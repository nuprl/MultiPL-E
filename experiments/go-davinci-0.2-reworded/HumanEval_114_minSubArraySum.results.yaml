language: go_test.go
name: HumanEval_114_minSubArraySum
results:
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum < 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum < 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := 0\n    for _, n := range nums {\n        sum += n\n        if sum\
    \ < minSum {\n            minSum = sum\n        }\n        if sum > 0 {\n    \
    \        sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := 0\n    for _, n := range nums {\n \
    \       sum += n\n        if sum < minSum {\n            minSum = sum\n      \
    \  }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    sum := 0\n    for _, v := range nums {\n    \
    \    sum += v\n        if sum < min {\n            min = sum\n        }\n    \
    \    if sum > 0 {\n            sum = 0\n        }\n    }\n    return min\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ < 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmppw183gch_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmppw183gch_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmppw183gch_test.go:57: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmppw183gch_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmppw183gch_test.go:57: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmppw183gch_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmppw183gch_test.go:57: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmppw183gch_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    sum := 0\n    for _, v := range nums {\n    \
    \    sum += v\n        if sum < min {\n            min = sum\n        }\n    \
    \    if sum > 0 {\n            sum = 0\n        }\n    }\n    return min\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    if len(nums) ==\
    \ 1 {\n        return nums[0]\n    }\n    min := nums[0]\n    for i := 0; i <\
    \ len(nums); i++ {\n        sum := 0\n        for j := i; j < len(nums); j++ {\n\
    \            sum += nums[j]\n            if sum < min {\n                min =\
    \ sum\n            }\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        if sum > 0 {\n            sum = nums[i]\n        } else {\n \
    \           sum += nums[i]\n        }\n        if sum < minSum {\n           \
    \ minSum = sum\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := 0\n    for _, num := range nums {\n        sum += num\n        if\
    \ sum < min {\n            min = sum\n        }\n        if sum > 0 {\n      \
    \      sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        if sum < 0 {\n            sum = nums[i]\n        } else {\n \
    \           sum += nums[i]\n        }\n        if sum < minSum {\n           \
    \ minSum = sum\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpiznx14ah_test.go:55: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpiznx14ah_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpiznx14ah_test.go:55: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpiznx14ah_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpiznx14ah_test.go:55: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpiznx14ah_test.go:55:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpiznx14ah_test.go:55: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpiznx14ah_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := 0\n    for _, num := range nums {\n\
    \        sum += num\n        if sum < minSum {\n            minSum = sum\n   \
    \     }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpcq10umq9_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpcq10umq9_test.go:44:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpcq10umq9_test.go:44: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpcq10umq9_test.go:44:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpcq10umq9_test.go:44: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpcq10umq9_test.go:44:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpcq10umq9_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpcq10umq9_test.go:44:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpcq10umq9_test.go:44: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpcq10umq9_test.go:44:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpcq10umq9_test.go:44: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := 0\n    for _, n := range nums {\n \
    \       sum += n\n        if sum < minSum {\n            minSum = sum\n      \
    \  }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := 0\n    for _, v := range nums {\n \
    \       sum += v\n        if sum < minSum {\n            minSum = sum\n      \
    \  }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ < 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmppw183gch_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmppw183gch_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmppw183gch_test.go:57: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmppw183gch_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmppw183gch_test.go:57: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmppw183gch_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmppw183gch_test.go:57: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmppw183gch_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < min {\n            min = sum\n        }\n        if sum < 0\
    \ {\n            sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := 0\n    for _, n := range nums {\n \
    \       sum += n\n        if sum < minSum {\n            minSum = sum\n      \
    \  }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        if sum > 0 {\n            sum = nums[i]\n        } else {\n \
    \           sum += nums[i]\n        }\n        if sum < minSum {\n           \
    \ minSum = sum\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < min {\n            min = sum\n        }\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpx59zcqo1_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpx59zcqo1_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpx59zcqo1_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum < 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        if sum > 0 {\n            sum = nums[i]\n        } else {\n \
    \           sum += nums[i]\n        }\n        if sum < minSum {\n           \
    \ minSum = sum\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    sum := 0\n    for _, num := range nums {\n  \
    \      sum += num\n        if sum < min {\n            min = sum\n        }\n\
    \        if sum > 0 {\n            sum = 0\n        }\n    }\n    return min\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        if sum > 0 {\n            sum = nums[i]\n        } else {\n \
    \           sum += nums[i]\n        }\n        if sum < minSum {\n           \
    \ minSum = sum\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := 0\n    for _, n := range nums {\n        sum += n\n        if sum\
    \ < minSum {\n            minSum = sum\n        }\n        if sum > 0 {\n    \
    \        sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := 0\n    sum := 0\n    for _, v := range nums {\n       \
    \ sum += v\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpe87a299x_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpe87a299x_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpe87a299x_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpe87a299x_test.go:51:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpe87a299x_test.go:51: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpe87a299x_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum < 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n        if sum\
    \ < min {\n            min = sum\n        }\n        if sum > 0 {\n          \
    \  sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := 0\n    for _, num := range nums {\n\
    \        sum += num\n        if sum < minSum {\n            minSum = sum\n   \
    \     }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    if len(nums) ==\
    \ 1 {\n        return nums[0]\n    }\n    min := nums[0]\n    sum := nums[0]\n\
    \    for i := 1; i < len(nums); i++ {\n        if sum < 0 {\n            sum =\
    \ nums[i]\n        } else {\n            sum += nums[i]\n        }\n        if\
    \ sum < min {\n            min = sum\n        }\n    }\n    return min\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp0ydna8xp_test.go:61: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp0ydna8xp_test.go:61:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp0ydna8xp_test.go:61: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp0ydna8xp_test.go:61:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp0ydna8xp_test.go:61: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp0ydna8xp_test.go:61:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmp0ydna8xp_test.go:61: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp0ydna8xp_test.go:61:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := 0\n    for _, num := range nums {\n\
    \        sum += num\n        if sum < minSum {\n            minSum = sum\n   \
    \     }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var minSum int\n    var sum int\n    for i := 0; i < len(nums); i++\
    \ {\n        sum += nums[i]\n        if i == 0 || sum < minSum {\n           \
    \ minSum = sum\n        }\n        if sum > 0 {\n            sum = 0\n       \
    \ }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        if sum > 0 {\n            sum = nums[i]\n        } else {\n \
    \           sum += nums[i]\n        }\n        if sum < minSum {\n           \
    \ minSum = sum\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        sum += nums[i]\n        if sum < minSum {\n            minSum\
    \ = sum\n        }\n        if sum > 0 {\n            sum = 0\n        }\n   \
    \ }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpdwcjxftk_test.go:54: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpdwcjxftk_test.go:54:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpdwcjxftk_test.go:54: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    curSum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        curSum =\
    \ min(curSum + nums[i], nums[i])\n        minSum = min(minSum, curSum)\n    }\n\
    \    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphsulcqw3_test.go:22:18: undefined: min

    /tmp/tmphsulcqw3_test.go:23:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    curSum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        if curSum < 0 {\n            curSum = nums[i]\n        } else\
    \ {\n            curSum += nums[i]\n        }\n        if curSum < minSum {\n\
    \            minSum = curSum\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp_qslbru7_test.go:55: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp_qslbru7_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp_qslbru7_test.go:55: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp_qslbru7_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp_qslbru7_test.go:55: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp_qslbru7_test.go:55:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmp_qslbru7_test.go:55: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp_qslbru7_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := 0\n    for _, num := range nums {\n        sum += num\n        if\
    \ sum < minSum {\n            minSum = sum\n        }\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075116
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := 0\n    for _, n := range nums {\n \
    \       sum += n\n        if sum < minSum {\n            minSum = sum\n      \
    \  }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    curSum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        curSum =\
    \ min(curSum + nums[i], nums[i])\n        minSum = min(minSum, curSum)\n    }\n\
    \    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphsulcqw3_test.go:22:18: undefined: min

    /tmp/tmphsulcqw3_test.go:23:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075116
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    if len(nums) ==\
    \ 1 {\n        return nums[0]\n    }\n    min := nums[0]\n    for i := 0; i <\
    \ len(nums); i++ {\n        sum := 0\n        for j := i; j < len(nums); j++ {\n\
    \            sum += nums[j]\n            if sum < min {\n                min =\
    \ sum\n            }\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum < 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum + nums[i]\
    \ < nums[i] {\n            sum = nums[i]\n        } else {\n            sum +=\
    \ nums[i]\n        }\n        if sum < min {\n            min = sum\n        }\n\
    \    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpkzjss06k_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpkzjss06k_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpkzjss06k_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpkzjss06k_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpkzjss06k_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpkzjss06k_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpkzjss06k_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpkzjss06k_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < min {\n            min = sum\n        }\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpx59zcqo1_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpx59zcqo1_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpx59zcqo1_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        sum += nums[i]\n        if sum < minSum {\n            minSum\
    \ = sum\n        }\n        if sum > 0 {\n            sum = 0\n        }\n   \
    \ }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpdwcjxftk_test.go:54: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpdwcjxftk_test.go:54:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpdwcjxftk_test.go:54: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < min {\n            min = sum\n        }\n        if sum < 0\
    \ {\n            sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum < 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    curSum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        if curSum > 0 {\n            curSum = nums[i]\n        } else\
    \ {\n            curSum += nums[i]\n        }\n        if curSum < minSum {\n\
    \            minSum = curSum\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ < 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmppw183gch_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmppw183gch_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmppw183gch_test.go:57: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmppw183gch_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmppw183gch_test.go:57: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmppw183gch_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmppw183gch_test.go:57: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmppw183gch_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ < 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmppw183gch_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmppw183gch_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmppw183gch_test.go:57: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmppw183gch_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmppw183gch_test.go:57: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmppw183gch_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmppw183gch_test.go:57: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmppw183gch_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < min {\n            min = sum\n        }\n        if sum < 0\
    \ {\n            sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    sum := 0\n    for _, v := range nums {\n    \
    \    sum += v\n        if sum < min {\n            min = sum\n        }\n    \
    \    if sum > 0 {\n            sum = 0\n        }\n    }\n    return min\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    curSum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if curSum\
    \ > 0 {\n            curSum = nums[i]\n        } else {\n            curSum +=\
    \ nums[i]\n        }\n        if curSum < minSum {\n            minSum = curSum\n\
    \        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        if sum < 0 {\n            sum = nums[i]\n        } else {\n \
    \           sum += nums[i]\n        }\n        if sum < minSum {\n           \
    \ minSum = sum\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpiznx14ah_test.go:55: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpiznx14ah_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpiznx14ah_test.go:55: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpiznx14ah_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpiznx14ah_test.go:55: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpiznx14ah_test.go:55:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpiznx14ah_test.go:55: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpiznx14ah_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum < 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < min {\n            min = sum\n        }\n        if sum < 0\
    \ {\n            sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    curSum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if curSum\
    \ < 0 {\n            curSum = nums[i]\n        } else {\n            curSum +=\
    \ nums[i]\n        }\n        if curSum < minSum {\n            minSum = curSum\n\
    \        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmphov5wylj_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmphov5wylj_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmphov5wylj_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmphov5wylj_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmphov5wylj_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmphov5wylj_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmphov5wylj_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmphov5wylj_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        if sum > 0 {\n            sum = nums[i]\n        } else {\n \
    \           sum += nums[i]\n        }\n        if sum < minSum {\n           \
    \ minSum = sum\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum < 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < min {\n            min = sum\n        }\n        if sum < 0\
    \ {\n            sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := 0\n    for _, num := range nums {\n\
    \        sum += num\n        if sum < minSum {\n            minSum = sum\n   \
    \     }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n        if sum\
    \ < min {\n            min = sum\n        }\n        if sum > 0 {\n          \
    \  sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    sum := 0\n    for _, v := range nums {\n    \
    \    sum += v\n        if sum < min {\n            min = sum\n        }\n    \
    \    if sum > 0 {\n            sum = 0\n        }\n    }\n    return min\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := 0\n    for _, num := range nums {\n        sum += num\n        if\
    \ sum < min {\n            min = sum\n        }\n        if sum > 0 {\n      \
    \      sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    sum := 0\n    for _, v := range nums {\n    \
    \    sum += v\n        if sum < min {\n            min = sum\n        }\n    \
    \    if sum > 0 {\n            sum = 0\n        }\n    }\n    return min\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < min {\n            min = sum\n        }\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpx59zcqo1_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpx59zcqo1_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpx59zcqo1_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := 0\n    for _, num := range nums {\n\
    \        sum += num\n        if sum < minSum {\n            minSum = sum\n   \
    \     }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n        if sum\
    \ < min {\n            min = sum\n        }\n        if sum > 0 {\n          \
    \  sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < min {\n            min = sum\n        }\n        if sum < 0\
    \ {\n            sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := 0\n    for _, num := range nums {\n        sum += num\n        if\
    \ sum < min {\n            min = sum\n        }\n        if sum > 0 {\n      \
    \      sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < min {\n            min = sum\n        }\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpx59zcqo1_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpx59zcqo1_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpx59zcqo1_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n        if sum\
    \ < minSum {\n            minSum = sum\n        }\n        if sum > 0 {\n    \
    \        sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        sum += nums[i]\n        if sum < min {\n            min = sum\n\
    \        }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpo23rvqya_test.go:54: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpo23rvqya_test.go:54:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpo23rvqya_test.go:54: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    curSum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        curSum =\
    \ min(curSum + nums[i], nums[i])\n        minSum = min(minSum, curSum)\n    }\n\
    \    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphsulcqw3_test.go:22:18: undefined: min

    /tmp/tmphsulcqw3_test.go:23:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075116
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := 0\n    for _, num := range nums {\n        sum += num\n        if\
    \ sum < minSum {\n            minSum = sum\n        }\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075116
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        if sum > 0 {\n            sum = nums[i]\n        } else {\n \
    \           sum += nums[i]\n        }\n        if sum < minSum {\n           \
    \ minSum = sum\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum < 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    curSum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if curSum\
    \ > 0 {\n            curSum = nums[i]\n        } else {\n            curSum +=\
    \ nums[i]\n        }\n        if curSum < minSum {\n            minSum = curSum\n\
    \        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < min {\n            min = sum\n        }\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpx59zcqo1_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpx59zcqo1_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpx59zcqo1_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum < 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < min {\n            min = sum\n        }\n        if sum < 0\
    \ {\n            sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for i := 0; i < len(nums); i++ {\n        sum := 0\n        for j := i; j\
    \ < len(nums); j++ {\n            sum += nums[j]\n            if sum < min {\n\
    \                min = sum\n            }\n        }\n    }\n    return min\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        if sum < 0 {\n            sum = nums[i]\n        } else {\n \
    \           sum += nums[i]\n        }\n        if sum < min {\n            min\
    \ = sum\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp84ccl1ch_test.go:55: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp84ccl1ch_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp84ccl1ch_test.go:55: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp84ccl1ch_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp84ccl1ch_test.go:55: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp84ccl1ch_test.go:55:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmp84ccl1ch_test.go:55: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp84ccl1ch_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := 0\n    for _, num := range nums {\n\
    \        sum += num\n        if sum < minSum {\n            minSum = sum\n   \
    \     }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := 0\n    for _, num := range nums {\n\
    \        sum += num\n        if sum < minSum {\n            minSum = sum\n   \
    \     }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum < 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum < 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    curSum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if curSum\
    \ > 0 {\n            curSum = nums[i]\n        } else {\n            curSum +=\
    \ nums[i]\n        }\n        if curSum < minSum {\n            minSum = curSum\n\
    \        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075116
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    curSum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        if curSum < 0 {\n            curSum = nums[i]\n        } else\
    \ {\n            curSum += nums[i]\n        }\n        if curSum < minSum {\n\
    \            minSum = curSum\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp_qslbru7_test.go:55: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp_qslbru7_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp_qslbru7_test.go:55: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp_qslbru7_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp_qslbru7_test.go:55: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp_qslbru7_test.go:55:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmp_qslbru7_test.go:55: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp_qslbru7_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < min {\n            min = sum\n        }\n        if sum < 0\
    \ {\n            sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    curSum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        curSum =\
    \ min(curSum + nums[i], nums[i])\n        minSum = min(minSum, curSum)\n    }\n\
    \    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphsulcqw3_test.go:22:18: undefined: min

    /tmp/tmphsulcqw3_test.go:23:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum < 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n        if sum\
    \ < minSum {\n            minSum = sum\n        }\n        if sum > 0 {\n    \
    \        sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075116
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := 0\n    for _, num := range nums {\n\
    \        sum += num\n        if sum < minSum {\n            minSum = sum\n   \
    \     }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := 0\n    for _, n := range nums {\n        sum += n\n        if sum\
    \ < minSum {\n            minSum = sum\n        }\n        if sum > 0 {\n    \
    \        sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := 0\n    for _, n := range nums {\n        sum += n\n        if sum\
    \ < minSum {\n            minSum = sum\n        }\n        if sum > 0 {\n    \
    \        sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n        if sum\
    \ < minSum {\n            minSum = sum\n        }\n        if sum > 0 {\n    \
    \        sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075116
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < min {\n            min = sum\n        }\n        if sum < 0\
    \ {\n            sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < min {\n            min = sum\n        }\n        if sum < 0\
    \ {\n            sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum < 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < min {\n            min = sum\n        }\n        if sum < 0\
    \ {\n            sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := 0\n    for _, n := range nums {\n        sum += n\n        if sum\
    \ < minSum {\n            minSum = sum\n        }\n        if sum > 0 {\n    \
    \        sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := 0\n    for _, n := range nums {\n        sum += n\n        if sum\
    \ < minSum {\n            minSum = sum\n        }\n        if sum > 0 {\n    \
    \        sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum < 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := 0\n    for _, num := range nums {\n        sum += num\n        if\
    \ sum < minSum {\n            minSum = sum\n        }\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ < 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmppw183gch_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmppw183gch_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmppw183gch_test.go:57: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmppw183gch_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmppw183gch_test.go:57: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmppw183gch_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmppw183gch_test.go:57: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmppw183gch_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    sum := 0\n    for _, n := range nums {\n    \
    \    sum += n\n        if sum < min {\n            min = sum\n        }\n    \
    \    if sum > 0 {\n            sum = 0\n        }\n    }\n    return min\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075116
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for i := 0; i < len(nums); i++ {\n        sum := 0\n        for j := i; j\
    \ < len(nums); j++ {\n            sum += nums[j]\n            if sum < min {\n\
    \                min = sum\n            }\n        }\n    }\n    return min\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075116
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    sum := 0\n    for _, v := range nums {\n    \
    \    sum += v\n        if sum < min {\n            min = sum\n        }\n    \
    \    if sum > 0 {\n            sum = 0\n        }\n    }\n    return min\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum < 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    curSum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        curSum =\
    \ min(curSum + nums[i], nums[i])\n        minSum = min(minSum, curSum)\n    }\n\
    \    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphsulcqw3_test.go:22:18: undefined: min

    /tmp/tmphsulcqw3_test.go:23:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := 0\n    for _, num := range nums {\n\
    \        sum += num\n        if sum < minSum {\n            minSum = sum\n   \
    \     }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        if sum < 0 {\n            sum = nums[i]\n        } else {\n \
    \           sum += nums[i]\n        }\n        if sum < minSum {\n           \
    \ minSum = sum\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpiznx14ah_test.go:55: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpiznx14ah_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpiznx14ah_test.go:55: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpiznx14ah_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpiznx14ah_test.go:55: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpiznx14ah_test.go:55:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpiznx14ah_test.go:55: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpiznx14ah_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := 0\n    for _, num := range nums {\n\
    \        sum += num\n        if sum < minSum {\n            minSum = sum\n   \
    \     }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum < 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := 0\n    for _, num := range nums {\n\
    \        sum += num\n        if sum < minSum {\n            minSum = sum\n   \
    \     }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    for i := 0; i < len(nums); i++ {\n        sum := 0\n        for j := i; j\
    \ < len(nums); j++ {\n            sum += nums[j]\n            if sum < minSum\
    \ {\n                minSum = sum\n            }\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075116
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n        if sum\
    \ < minSum {\n            minSum = sum\n        }\n        if sum > 0 {\n    \
    \        sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075116
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // TODO\n    return 0\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpxv0apoow_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpxv0apoow_test.go:44:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpxv0apoow_test.go:44: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpxv0apoow_test.go:44:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpxv0apoow_test.go:44: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpxv0apoow_test.go:44:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpxv0apoow_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpxv0apoow_test.go:44:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpxv0apoow_test.go:44: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpxv0apoow_test.go:44:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpxv0apoow_test.go:44: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum < 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    curSum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        curSum =\
    \ min(curSum+nums[i], nums[i])\n        minSum = min(minSum, curSum)\n    }\n\
    \    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupd1mguu_test.go:22:18: undefined: min

    /tmp/tmpupd1mguu_test.go:23:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075116
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    sum := 0\n    for _, v := range nums {\n    \
    \    sum += v\n        if sum < min {\n            min = sum\n        }\n    \
    \    if sum > 0 {\n            sum = 0\n        }\n    }\n    return min\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := 0\n    for _, n := range nums {\n        sum += n\n        if sum\
    \ < minSum {\n            minSum = sum\n        }\n        if sum > 0 {\n    \
    \        sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n        if sum\
    \ < min {\n            min = sum\n        }\n        if sum > 0 {\n          \
    \  sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075115
