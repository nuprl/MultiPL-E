language: go_test.go
name: HumanEval_104_unique_digits
results:
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !has_even_digit(v) {\n            result =\
    \ append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2_xv6kp6_test.go:19:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: implement this\
    \ function\n    return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprmu3q4y__test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprmu3q4y__test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprmu3q4y__test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, i := range x {\n        if hasEvenDigit(i) {\n            continue\n\
    \        }\n        result = append(result, i)\n    }\n    return result\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjw4gthxc_test.go:19:12: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !has_even_digit(v) {\n            result =\
    \ append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2_xv6kp6_test.go:19:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ v := range x {\n        if v % 2 != 0 {\n            y = append(y, v)\n    \
    \    }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmphpco8qdi_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmphpco8qdi_test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmphpco8qdi_test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmphpco8qdi_test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ v := range x {\n        if !has_even_digit(v) {\n            y = append(y, v)\n\
    \        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpexjfc7i6_test.go:19:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var res []int\n    for\
    \ _, v := range x {\n        if is_unique(v) {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqwcefh63_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, num := range x {\n        if !hasEvenDigit(num) {\n            result\
    \ = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkz8yjnf5_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var res []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdtur1nr1_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !has_even_digit(v) {\n            result =\
    \ append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2_xv6kp6_test.go:19:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var res []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdtur1nr1_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ i := range x {\n        if i % 2 != 0 {\n            y = append(y, i)\n    \
    \    }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmph3nz_0zl_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmph3nz_0zl_test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmph3nz_0zl_test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmph3nz_0zl_test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ v := range x {\n        if !has_even_digit(v) {\n            y = append(y, v)\n\
    \        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpexjfc7i6_test.go:19:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, num := range x {\n        if !hasEvenDigit(num) {\n            result\
    \ = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkz8yjnf5_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var res []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdtur1nr1_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if isUnique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp33s_ffzk_test.go:19:12: undefined: isUnique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if has_even_digit(v) {\n            continue\n\
    \        }\n        result = append(result, v)\n    }\n    return result\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8c5nee1q_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if hasEvenDigit(v) {\n            continue\n\
    \        }\n        result = append(result, v)\n    }\n    return result\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmofi3z34_test.go:19:12: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if has_even_digit(v) {\n            continue\n\
    \        }\n        result = append(result, v)\n    }\n    return result\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8c5nee1q_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if has_even_digit(v) {\n            continue\n\
    \        }\n        result = append(result, v)\n    }\n    return result\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8c5nee1q_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: Implement me\n\
    \    return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprhvzzuka_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprhvzzuka_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprhvzzuka_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // your code here\n  \
    \  return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpb9yoiis4_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpb9yoiis4_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpb9yoiis4_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: Implement me\n\
    \    return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprhvzzuka_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprhvzzuka_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprhvzzuka_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_odd(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxw53d0fa_test.go:19:12: undefined: is_odd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if isUniqueDigits(v) {\n            result =\
    \ append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9sb7h4mc_test.go:19:12: undefined: isUniqueDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return nil\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpa2v415av_test.go:36: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpa2v415av_test.go:36:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpa2v415av_test.go:36: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if v % 2 != 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpitwi53km_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpitwi53km_test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpitwi53km_test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmpitwi53km_test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !has_even_digit(v) {\n            result =\
    \ append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2_xv6kp6_test.go:19:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: Implement me\n\
    \    return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprhvzzuka_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprhvzzuka_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprhvzzuka_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, n := range x {\n        if !hasEvenDigit(n) {\n            result = append(result,\
    \ n)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps7zq1kty_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if isUnique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp33s_ffzk_test.go:19:12: undefined: isUnique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ v := range x {\n        if isUnique(v) {\n            y = append(y, v)\n   \
    \     }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe0lahng5_test.go:19:12: undefined: isUnique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if has_even_digit(v) {\n            continue\n\
    \        }\n        result = append(result, v)\n    }\n    return result\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8c5nee1q_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Write your code here\n\
    \    return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp29kgcrz5_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp29kgcrz5_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmp29kgcrz5_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if v % 2 != 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpitwi53km_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpitwi53km_test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpitwi53km_test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmpitwi53km_test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var res []int\n    for\
    \ _, v := range x {\n        if is_unique(v) {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqwcefh63_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if isUnique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp33s_ffzk_test.go:19:12: undefined: isUnique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // PATCH\n    return []int{}\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmphaqj0jjy_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmphaqj0jjy_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmphaqj0jjy_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !has_even_digit(v) {\n            result =\
    \ append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2_xv6kp6_test.go:19:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if v % 2 != 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpitwi53km_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpitwi53km_test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpitwi53km_test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmpitwi53km_test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if isUnique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp33s_ffzk_test.go:19:12: undefined: isUnique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: Implement me\n\
    \    return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprhvzzuka_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprhvzzuka_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprhvzzuka_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if isEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqkupurl0_test.go:19:12: undefined: isEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ v := range x {\n        if !has_even_digit(v) {\n            y = append(y, v)\n\
    \        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpexjfc7i6_test.go:19:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: implement me\n\
    \    return nil\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpieyahr_w_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpieyahr_w_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpieyahr_w_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ v := range x {\n        if !has_even_digit(v) {\n            y = append(y, v)\n\
    \        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpexjfc7i6_test.go:19:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ i := range x {\n        if i % 2 != 0 {\n            y = append(y, i)\n    \
    \    }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmph3nz_0zl_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmph3nz_0zl_test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmph3nz_0zl_test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmph3nz_0zl_test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ v := range x {\n        if v % 2 != 0 {\n            y = append(y, v)\n    \
    \    }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmphpco8qdi_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmphpco8qdi_test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmphpco8qdi_test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmphpco8qdi_test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var res []int\n    for\
    \ _, v := range x {\n        if is_unique(v) {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqwcefh63_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, num := range x {\n        if isUnique(num) {\n            result = append(result,\
    \ num)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy23kn16f_test.go:19:12: undefined: isUnique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var res []int\n    for\
    \ _, v := range x {\n        if isUnique(v) {\n            res = append(res, v)\n\
    \        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu561idjf_test.go:19:12: undefined: isUnique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // your code here\n  \
    \  return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpb9yoiis4_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpb9yoiis4_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpb9yoiis4_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: implement me\n\
    \    return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp7qatr_bv_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp7qatr_bv_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmp7qatr_bv_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    y := []int{}\n    for\
    \ _, v := range x {\n        if v % 2 != 0 {\n            y = append(y, v)\n \
    \       }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmptuqcc_ya_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmptuqcc_ya_test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmptuqcc_ya_test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmptuqcc_ya_test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return nil\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpa2v415av_test.go:36: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpa2v415av_test.go:36:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpa2v415av_test.go:36: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: Implement me\n\
    \    return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprhvzzuka_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprhvzzuka_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprhvzzuka_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if isUnique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp33s_ffzk_test.go:19:12: undefined: isUnique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: Implement me\n\
    \    return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprhvzzuka_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprhvzzuka_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprhvzzuka_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: Implement me\n\
    \    return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprhvzzuka_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprhvzzuka_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprhvzzuka_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // your code here\n  \
    \  return x\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmppgtf_r1n_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1422) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmppgtf_r1n_test.go:37: expected '[]', got '[%!s(int=152) %!s(int=323)\
    \ %!s(int=1422) %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmppgtf_r1n_test.go:37: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345)\
    \ %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmppgtf_r1n_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if v % 2 != 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpitwi53km_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpitwi53km_test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpitwi53km_test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmpitwi53km_test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return []int{}\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprxk7f0u9_test.go:36:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var res []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdtur1nr1_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, num := range x {\n        if isUniqueDigits(num) {\n            result\
    \ = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxp5t65k9_test.go:19:12: undefined: isUniqueDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !has_even_digit(v) {\n            result =\
    \ append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2_xv6kp6_test.go:19:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if v % 2 != 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpitwi53km_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpitwi53km_test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpitwi53km_test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmpitwi53km_test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if v % 2 != 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpitwi53km_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpitwi53km_test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpitwi53km_test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmpitwi53km_test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: Implement me\n\
    \    return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprhvzzuka_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprhvzzuka_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprhvzzuka_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if has_even_digit(v) {\n            continue\n\
    \        }\n        result = append(result, v)\n    }\n    return result\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8c5nee1q_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, value := range x {\n        if !hasEvenDigit(value) {\n            result\
    \ = append(result, value)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph7kz1cf2_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: implement me\n\
    \    return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp7qatr_bv_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp7qatr_bv_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmp7qatr_bv_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !has_even_digit(v) {\n            result =\
    \ append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2_xv6kp6_test.go:19:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ v := range x {\n        if v % 2 != 0 {\n            y = append(y, v)\n    \
    \    }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmphpco8qdi_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmphpco8qdi_test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmphpco8qdi_test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmphpco8qdi_test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var res []int\n    for\
    \ _, v := range x {\n        if is_unique(v) {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqwcefh63_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if hasEvenDigit(v) {\n            continue\n\
    \        }\n        result = append(result, v)\n    }\n    return result\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmofi3z34_test.go:19:12: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: implement this\
    \ function\n    return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprmu3q4y__test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprmu3q4y__test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprmu3q4y__test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ i := range x {\n        if is_unique(i) {\n            y = append(y, i)\n  \
    \      }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n \
    \ candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzkumeb_7_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if isUnique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp33s_ffzk_test.go:19:12: undefined: isUnique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Write your code here\n\
    \    return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp29kgcrz5_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp29kgcrz5_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmp29kgcrz5_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if v % 2 != 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpitwi53km_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpitwi53km_test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpitwi53km_test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmpitwi53km_test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if v < 10 {\n            result = append(result,\
    \ v)\n        } else {\n            if !hasEvenDigit(v) {\n                result\
    \ = append(result, v)\n            }\n        }\n    }\n    return result\n}\n\
    \nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjd1i1xpf_test.go:22:17: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return []int{}\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprxk7f0u9_test.go:36:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if hasEvenDigit(v) {\n            continue\n\
    \        }\n        result = append(result, v)\n    }\n    return result\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmofi3z34_test.go:19:12: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ v := range x {\n        if v % 2 != 0 {\n            y = append(y, v)\n    \
    \    }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmphpco8qdi_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmphpco8qdi_test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmphpco8qdi_test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmphpco8qdi_test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if isUnique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp33s_ffzk_test.go:19:12: undefined: isUnique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ v := range x {\n        if !has_even_digit(v) {\n            y = append(y, v)\n\
    \        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpexjfc7i6_test.go:19:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: Implement me\n\
    \    return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprhvzzuka_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprhvzzuka_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprhvzzuka_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: Implement me\n\
    \    return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprhvzzuka_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprhvzzuka_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprhvzzuka_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: implement me\n\
    \    return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp7qatr_bv_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp7qatr_bv_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmp7qatr_bv_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if isUnique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp33s_ffzk_test.go:19:12: undefined: isUnique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: implement this\
    \ function\n    return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprmu3q4y__test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprmu3q4y__test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprmu3q4y__test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ i := range x {\n        if !has_even_digit(i) {\n            y = append(y, i)\n\
    \        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpihx4oypt_test.go:19:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !has_even_digit(v) {\n            result =\
    \ append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2_xv6kp6_test.go:19:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if has_even_digit(v) {\n            continue\n\
    \        }\n        result = append(result, v)\n    }\n    return result\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8c5nee1q_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: Implement me\n\
    \    return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprhvzzuka_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprhvzzuka_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprhvzzuka_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var res []int\n    for\
    \ _, n := range x {\n        if !hasEvenDigit(n) {\n            res = append(res,\
    \ n)\n        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2orxfpxa_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cwnygvx_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ i := range x {\n        if isUnique(i) {\n            y = append(y, i)\n   \
    \     }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6cm_cfp__test.go:19:12: undefined: isUnique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if is_unique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi6r5g6k_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
