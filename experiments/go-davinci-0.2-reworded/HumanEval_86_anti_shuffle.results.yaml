language: go_test.go
name: HumanEval_86_anti_shuffle
results:
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpa8ygsqh2_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpa8ygsqh2_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, char := range s {\n  \
    \      if char == ' ' {\n            result += word + \" \"\n            word\
    \ = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n\
    \    result += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpj6ukx3gf_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpj6ukx3gf_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpj6ukx3gf_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpj6ukx3gf_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, char := range s {\n  \
    \      if char == ' ' {\n            result += word + \" \"\n            word\
    \ = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n\
    \    result += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpj6ukx3gf_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpj6ukx3gf_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpj6ukx3gf_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpj6ukx3gf_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, char := range s {\n  \
    \      if char == ' ' {\n            result += word + \" \"\n            word\
    \ = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n\
    \    result += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpj6ukx3gf_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpj6ukx3gf_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpj6ukx3gf_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpj6ukx3gf_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpa8ygsqh2_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpa8ygsqh2_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, char := range s {\n  \
    \      if string(char) == \" \" {\n            result += word + \" \"\n      \
    \      word = \"\"\n        } else {\n            word += string(char)\n     \
    \   }\n    }\n    result += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpauticx9b_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpauticx9b_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpauticx9b_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpauticx9b_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    var word_map map[string]string\n\
    \    word_map = make(map[string]string)\n    for _, char := range s {\n      \
    \  if char == ' ' {\n            result += word_map[word] + \" \"\n          \
    \  word = \"\"\n        } else {\n            word += string(char)\n        }\n\
    \        if _, ok := word_map[word]; !ok {\n            word_map[word] = sort_word(word)\n\
    \        }\n    }\n    result += word_map[word]\n    return result\n}\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp48egvsqe_test.go:33:30: undefined: sort_word

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpa8ygsqh2_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpa8ygsqh2_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    var word_map map[int]string\n\
    \    word_map = make(map[int]string)\n    for _, c := range s {\n        if c\
    \ == ' ' {\n            result += word + \" \"\n            word = \"\"\n    \
    \    } else {\n            word_map[int(c)] = string(c)\n        }\n    }\n  \
    \  for i := 0; i < len(word_map); i++ {\n        word += word_map[i]\n    }\n\
    \    result += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp0cqpc608_test.go:59: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp0cqpc608_test.go:59: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp0cqpc608_test.go:59: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp0cqpc608_test.go:59: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp0cqpc608_test.go:59: expected\
    \ 'Hello !!!Wdlor', got ' '\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp0cqpc608_test.go:59: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got '        '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: implement\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpcftdhdko_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpcftdhdko_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpcftdhdko_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpcftdhdko_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpcftdhdko_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpcftdhdko_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, char := range s {\n  \
    \      if char == ' ' {\n            result += word + \" \"\n            word\
    \ = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n\
    \    result += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpj6ukx3gf_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpj6ukx3gf_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpj6ukx3gf_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpj6ukx3gf_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    for _, word := range s {\n        result += string(word)\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpi05p5u2l_test.go:47: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpi05p5u2l_test.go:47:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpi05p5u2l_test.go:47: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpi05p5u2l_test.go:47:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, char := range s {\n  \
    \      if char == ' ' {\n            result += word + \" \"\n            word\
    \ = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n\
    \    result += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpj6ukx3gf_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpj6ukx3gf_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpj6ukx3gf_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpj6ukx3gf_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' {\n            result += word + \" \"\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpa8ygsqh2_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpa8ygsqh2_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: implement this function\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp3_6ym1rh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp3_6ym1rh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp3_6ym1rh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp3_6ym1rh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp3_6ym1rh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp3_6ym1rh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' {\n            result += word + \" \"\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: implement\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpcftdhdko_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpcftdhdko_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpcftdhdko_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpcftdhdko_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpcftdhdko_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpcftdhdko_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    for _, word := range s {\n        result += string(word)\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpi05p5u2l_test.go:47: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpi05p5u2l_test.go:47:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpi05p5u2l_test.go:47: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpi05p5u2l_test.go:47:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpa8ygsqh2_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpa8ygsqh2_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp08v_8omq_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp08v_8omq_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp08v_8omq_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp08v_8omq_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp08v_8omq_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp08v_8omq_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    var char byte\n    var min byte\n\
    \    var min_index int\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n\
    \    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n \
    \   var w int\n    var x int\n    var y int\n    var z int\n    var a int\n  \
    \  var b int\n    var c int\n    var d int\n    var e int\n    var f int\n   \
    \ var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n \
    \   var b int\n    var c int\n    var d int\n    var e int\n    var f int\n  \
    \  var g int\n    var h int\n    var i int\n    var j int\n    var k int\n   \
    \ var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var\
    \ q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v\
    \ int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n\
    \    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n \
    \   var g int\n    var h int\n    var i int\n    var j int\n    var k int\n  \
    \  var l int\n    var m int\n    var n int\n    var o int\n    var p int\n   \
    \ var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var\
    \ v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a\
    \ int\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnvi9_9_0_test.go:123:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpa8ygsqh2_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpa8ygsqh2_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    var words []string\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            words = append(words, word)\n\
    \            word = \"\"\n        } else {\n            word += string(c)\n  \
    \      }\n    }\n    words = append(words, word)\n    for _, w := range words\
    \ {\n        result += sortString(w)\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5f3jy9gm_test.go:34:19: undefined: sortString

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me!\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp2g4h5y5w_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp2g4h5y5w_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp2g4h5y5w_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp2g4h5y5w_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp2g4h5y5w_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp2g4h5y5w_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' {\n            result += word + \" \"\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpa8ygsqh2_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpa8ygsqh2_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 0
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    var words []string\n    var chars\
    \ []rune\n    for _, r := range s {\n        if r == ' ' {\n            words\
    \ = append(words, word)\n            word = \"\"\n        } else {\n         \
    \   word += string(r)\n        }\n    }\n    words = append(words, word)\n   \
    \ for _, word := range words {\n        chars = []rune(word)\n        for i :=\
    \ 0; i < len(chars); i++ {\n            for j := i + 1; j < len(chars); j++ {\n\
    \                if chars[i] > chars[j] {\n                    chars[i], chars[j]\
    \ = chars[j], chars[i]\n                }\n            }\n        }\n        result\
    \ += string(chars) + \" \"\n    }\n    return result[:len(result) - 1]\n}\n\n\
    func TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me!\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp2g4h5y5w_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp2g4h5y5w_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp2g4h5y5w_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp2g4h5y5w_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp2g4h5y5w_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp2g4h5y5w_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' {\n            result += word + \" \"\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp0kap_3lw_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp0kap_3lw_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp0kap_3lw_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp0kap_3lw_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp0kap_3lw_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp0kap_3lw_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var res string\n    for _, word := range s {\n        if word == ' ' {\n\
    \            res += \" \"\n        } else {\n            res += string(word)\n\
    \        }\n    }\n    return res\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpjo8xxr6v_test.go:51: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpjo8xxr6v_test.go:51:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpjo8xxr6v_test.go:51: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpjo8xxr6v_test.go:51:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: implement this function\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp3_6ym1rh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp3_6ym1rh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp3_6ym1rh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp3_6ym1rh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp3_6ym1rh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp3_6ym1rh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    var word_rune []rune\n    var\
    \ word_rune_sorted []rune\n    var word_sorted string\n    var space bool\n  \
    \  for _, char := range s {\n        if char == ' ' {\n            space = true\n\
    \            word_rune_sorted = []rune(word)\n            for i := 0; i < len(word_rune_sorted);\
    \ i++ {\n                for j := i + 1; j < len(word_rune_sorted); j++ {\n  \
    \                  if word_rune_sorted[i] > word_rune_sorted[j] {\n          \
    \              word_rune_sorted[i], word_rune_sorted[j] = word_rune_sorted[j],\
    \ word_rune_sorted[i]\n                    }\n                }\n            }\n\
    \            word_sorted = string(word_rune_sorted)\n            result += word_sorted\n\
    \            word = \"\"\n            word_rune = []rune{}\n            word_rune_sorted\
    \ = []rune{}\n            word_sorted = \"\"\n        } else {\n            space\
    \ = false\n            word += string(char)\n        }\n    }\n    if !space {\n\
    \        word_rune_sorted = []rune(word)\n        for i := 0; i < len(word_rune_sorted);\
    \ i++ {\n            for j := i + 1; j < len(word_rune_sorted); j++ {\n      \
    \          if word_rune_sorted[i] > word_rune_sorted[j] {\n                  \
    \  word_rune_sorted[i], word_rune_sorted[j] = word_rune_sorted[j], word_rune_sorted[i]\n\
    \                }\n            }\n        }\n        word_sorted = string(word_rune_sorted)\n\
    \        result += word_sorted\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzywc6jhy_test.go:23:9: word_rune declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' {\n            result += word + \" \"\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, char := range s {\n  \
    \      if char == ' ' {\n            result += word + \" \"\n            word\
    \ = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n\
    \    result += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpj6ukx3gf_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpj6ukx3gf_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpj6ukx3gf_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpj6ukx3gf_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var res string\n    for _, word := range s {\n        if word == ' ' {\n\
    \            res += string(word)\n        } else {\n            res += string(word)\n\
    \        }\n    }\n    return res\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpmuma9clb_test.go:51: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpmuma9clb_test.go:51:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpmuma9clb_test.go:51: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpmuma9clb_test.go:51:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' {\n            result += word + \" \"\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' {\n            result += word + \" \"\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' {\n            result += word + \" \"\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' {\n            result += word + \" \"\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' {\n            result += word + \" \"\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: implement this function\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp3_6ym1rh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp3_6ym1rh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp3_6ym1rh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp3_6ym1rh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp3_6ym1rh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp3_6ym1rh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpa8ygsqh2_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpa8ygsqh2_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me!\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp2g4h5y5w_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp2g4h5y5w_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp2g4h5y5w_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp2g4h5y5w_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp2g4h5y5w_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp2g4h5y5w_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me!\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp2g4h5y5w_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp2g4h5y5w_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp2g4h5y5w_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp2g4h5y5w_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp2g4h5y5w_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp2g4h5y5w_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me!\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp2g4h5y5w_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp2g4h5y5w_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp2g4h5y5w_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp2g4h5y5w_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp2g4h5y5w_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp2g4h5y5w_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' {\n            result += word + \" \"\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpa8ygsqh2_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpa8ygsqh2_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    for _, word := range s {\n        result += string(word)\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpi05p5u2l_test.go:47: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpi05p5u2l_test.go:47:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpi05p5u2l_test.go:47: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpi05p5u2l_test.go:47:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpa8ygsqh2_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpa8ygsqh2_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    var ascii_values []int\n    for\
    \ _, char := range s {\n        if char == ' ' {\n            result += word +\
    \ \" \"\n            word = \"\"\n            ascii_values = nil\n        } else\
    \ {\n            ascii_values = append(ascii_values, int(char))\n            word\
    \ = string(char)\n            for i := 0; i < len(ascii_values); i++ {\n     \
    \           for j := i + 1; j < len(ascii_values); j++ {\n                   \
    \ if ascii_values[i] > ascii_values[j] {\n                        ascii_values[i],\
    \ ascii_values[j] = ascii_values[j], ascii_values[i]\n                       \
    \ word = string(ascii_values[i]) + word\n                    }\n             \
    \   }\n            }\n        }\n    }\n    result += word\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp8pzkqi86_test.go:36:32: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpa8ygsqh2_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpa8ygsqh2_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, char := range s {\n  \
    \      if char == ' ' {\n            result += word + \" \"\n            word\
    \ = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n\
    \    result += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpj6ukx3gf_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpj6ukx3gf_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpj6ukx3gf_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpj6ukx3gf_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp08v_8omq_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp08v_8omq_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp08v_8omq_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp08v_8omq_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp08v_8omq_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp08v_8omq_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var res string\n    for _, word := range s {\n        res += string(word)\n\
    \    }\n    return res\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpcanwd7bg_test.go:47: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpcanwd7bg_test.go:47:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpcanwd7bg_test.go:47: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpcanwd7bg_test.go:47:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    for _, word := range s {\n        if word == ' ' {\n\
    \            result += \" \"\n        } else {\n            result += string(word)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpqf487poe_test.go:51: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpqf487poe_test.go:51:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpqf487poe_test.go:51: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpqf487poe_test.go:51:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' {\n            result += word + \" \"\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me!\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp2g4h5y5w_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp2g4h5y5w_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp2g4h5y5w_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp2g4h5y5w_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp2g4h5y5w_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp2g4h5y5w_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' {\n            result += word + \" \"\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpa8ygsqh2_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpa8ygsqh2_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' {\n            result += word + \" \"\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' {\n            result += word + \" \"\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    for _, word := range s {\n        result += string(word)\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpi05p5u2l_test.go:47: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpi05p5u2l_test.go:47:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpi05p5u2l_test.go:47: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpi05p5u2l_test.go:47:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp9p0nhnyd_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp9p0nhnyd_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp9p0nhnyd_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp9p0nhnyd_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp9p0nhnyd_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp9p0nhnyd_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' {\n            result += word + \" \"\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' {\n            result += word + \" \"\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpa8ygsqh2_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpa8ygsqh2_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' {\n            result += word + \" \"\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' {\n            result += word + \" \"\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp0_bg9y02_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp0_bg9y02_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp0_bg9y02_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp0_bg9y02_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp0_bg9y02_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp0_bg9y02_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me!\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp2g4h5y5w_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp2g4h5y5w_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp2g4h5y5w_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp2g4h5y5w_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp2g4h5y5w_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp2g4h5y5w_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    var word_list []string\n    var\
    \ char_list []byte\n    var char byte\n    var i int\n    var j int\n    var k\
    \ int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n\
    \    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n \
    \   var v int\n    var w int\n    var x int\n    var y int\n    var z int\n  \
    \  var a int\n    var b int\n    var c int\n    var d int\n    var e int\n   \
    \ var f int\n    var g int\n    var h int\n    var i int\n    var j int\n    var\
    \ k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p\
    \ int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n\
    \    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n \
    \   var a int\n    var b int\n    var c int\n    var d int\n    var e int\n  \
    \  var f int\n    var g int\n    var h int\n    var i int\n    var j int\n   \
    \ var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var\
    \ p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u\
    \ int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n\
    \    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n \
    \   var f int\n    var g int\n    var h int\n    var i int\n    var j int\n  \
    \  var k int\n    var l int\n    var m int\n    var n int\n    var o int\n   \
    \ var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var\
    \ u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z\
    \ int\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp95411yfa_test.go:123:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var res string\n    var word string\n    for _, c := range s {\n        if\
    \ c == ' ' {\n            res += word + \" \"\n            word = \"\"\n     \
    \   } else {\n            word += string(c)\n        }\n    }\n    res += word\n\
    \    return res\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpdt36mg97_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpdt36mg97_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpdt36mg97_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpdt36mg97_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' {\n            result += word + \" \"\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, char := range s {\n  \
    \      if char == ' ' {\n            result += word + \" \"\n            word\
    \ = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n\
    \    result += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpj6ukx3gf_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpj6ukx3gf_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpj6ukx3gf_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpj6ukx3gf_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpa8ygsqh2_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpa8ygsqh2_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me!\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp2g4h5y5w_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp2g4h5y5w_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp2g4h5y5w_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp2g4h5y5w_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp2g4h5y5w_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp2g4h5y5w_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' {\n            result += word + \" \"\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp5hz2wkp0_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp5hz2wkp0_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpa8ygsqh2_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpa8ygsqh2_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' '\
    \ {\n            res += \" \"\n        } else {\n            j := i\n        \
    \    for ; j < len(s) && s[j] != ' '; j++ {}\n            res += sort(s[i:j])\n\
    \            i = j - 1\n        }\n    }\n    return res\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcz_9axrb_test.go:28:20: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 0
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var words []string\n    var word string\n    var chars\
    \ []rune\n    var char rune\n    for _, char = range s {\n        if char == '\
    \ ' {\n            words = append(words, word)\n            word = \"\"\n    \
    \    } else {\n            word += string(char)\n        }\n    }\n    words =\
    \ append(words, word)\n    for _, word = range words {\n        chars = []rune(word)\n\
    \        for i := 0; i < len(chars); i++ {\n            for j := i + 1; j < len(chars);\
    \ j++ {\n                if chars[i] > chars[j] {\n                    chars[i],\
    \ chars[j] = chars[j], chars[i]\n                }\n            }\n        }\n\
    \        result += string(chars) + \" \"\n    }\n    return result[:len(result)\
    \ - 1]\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: implement\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpcftdhdko_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpcftdhdko_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpcftdhdko_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpcftdhdko_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpcftdhdko_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpcftdhdko_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps98znoyh_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps98znoyh_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps98znoyh_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps98znoyh_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
