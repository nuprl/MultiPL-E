name: HumanEval_9_rolling_max
language: go_test.go
prompt: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // From a given list of integers, generate a list of rolling maximum element found\
  \ until given moment\n// in the sequence.\n// >>> rolling_max([]int{1, 2, 3, 2,\
  \ 3, 4, 2})\n// []int{1, 2, 3, 3, 3, 4, 4}\nfunc rolling_max(numbers []int) []int\
  \ {\n"
tests: "func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
  \ candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
  \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2,\
  \ 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    var result []int\n    var max int\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n        result\
    \ = append(result, max)\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    max := numbers[0]\n    result[0] = max\n    for i := 1; i\
    \ < len(numbers); i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n\
    \        }\n        result[i] = max\n    }\n    return result\n}\n", "    var\
    \ result []int\n    var max int\n    for _, number := range numbers {\n      \
    \  if number > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n\
    \    max := numbers[0]\n    result[0] = max\n    for i := 1; i < len(numbers);\
    \ i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n       \
    \ }\n        result[i] = max\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for i, number := range numbers {\n        if i == 0 {\n         \
    \   result = append(result, number)\n        } else {\n            if number >\
    \ result[i-1] {\n                result = append(result, number)\n           \
    \ } else {\n                result = append(result, result[i-1])\n           \
    \ }\n        }\n    }\n    return result\n}\n", "    var result []int\n    var\
    \ max int\n    for _, number := range numbers {\n        if number > max {\n \
    \           max = number\n        }\n        result = append(result, max)\n  \
    \  }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return []int{}\n\
    \    }\n\n    result := make([]int, len(numbers))\n    result[0] = numbers[0]\n\
    \n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] > result[i-1]\
    \ {\n            result[i] = numbers[i]\n        } else {\n            result[i]\
    \ = result[i-1]\n        }\n    }\n\n    return result\n}\n", "    max := numbers[0]\n\
    \    result := make([]int, len(numbers))\n    result[0] = max\n    for i := 1;\
    \ i < len(numbers); i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n\
    \        }\n        result[i] = max\n    }\n    return result\n}\n", "    var\
    \ result []int\n    var max int\n    for _, n := range numbers {\n        if n\
    \ > max {\n            max = n\n        }\n        result = append(result, max)\n\
    \    }\n    return result\n}\n", "    max := numbers[0]\n    result := make([]int,\
    \ len(numbers))\n    result[0] = max\n    for i := 1; i < len(numbers); i++ {\n\
    \        if numbers[i] > max {\n            max = numbers[i]\n        }\n    \
    \    result[i] = max\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    max := numbers[0]\n    result[0] = max\n    for i := 1; i\
    \ < len(numbers); i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n\
    \        }\n        result[i] = max\n    }\n    return result\n}\n", "    max\
    \ := numbers[0]\n    result := make([]int, len(numbers))\n    result[0] = max\n\
    \    for i := 1; i < len(numbers); i++ {\n        if numbers[i] > max {\n    \
    \        max = numbers[i]\n        }\n        result[i] = max\n    }\n    return\
    \ result\n}\n", "    var result []int\n    var max int\n    for _, n := range\
    \ numbers {\n        if n > max {\n            max = n\n        }\n        result\
    \ = append(result, max)\n    }\n    return result\n}\n", "    var result []int\n\
    \    var max int\n\n    for _, number := range numbers {\n        if number >\
    \ max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n\n    return result\n}\n", "    result := make([]int, len(numbers))\n\
    \    for i, n := range numbers {\n        if i == 0 {\n            result[i] =\
    \ n\n        } else {\n            if n > result[i-1] {\n                result[i]\
    \ = n\n            } else {\n                result[i] = result[i-1]\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    var result []int\n  \
    \  var max int\n    for _, n := range numbers {\n        if n > max {\n      \
    \      max = n\n        }\n        result = append(result, max)\n    }\n    return\
    \ result\n}\n", "    var max int\n    var result []int\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \        result = append(result, max)\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(numbers))\n    max := numbers[0]\n    result[0] = max\n \
    \   for i := 1; i < len(numbers); i++ {\n        if numbers[i] > max {\n     \
    \       max = numbers[i]\n        }\n        result[i] = max\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(numbers))\n    max := 0\n    for\
    \ i, v := range numbers {\n        if v > max {\n            max = v\n       \
    \ }\n        result[i] = max\n    }\n    return result\n}\n", "    max := numbers[0]\n\
    \    result := make([]int, len(numbers))\n    result[0] = max\n    for i := 1;\
    \ i < len(numbers); i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n\
    \        }\n        result[i] = max\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
