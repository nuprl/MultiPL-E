name: HumanEval_118_get_closest_vowel
language: go_test.go
prompt: "package get_closest_vowel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// You are given a word. Your task is to find the closest vowel that stands\
  \ between \n// two consonants from the right side of the word (case sensitive).\n\
  // Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n// find any vowel met the above condition. \n// You may assume that the\
  \ given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
  yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
  quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunc get_closest_vowel(word\
  \ string) string {\n"
tests: "func TestGet_Closest_Vowel(t *testing.T) {\n  candidate := get_closest_vowel\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"yogurt\"), expected: \"u\" },\n\
  \     { actual: candidate(\"full\"), expected: \"u\" },\n     { actual: candidate(\"\
  easy\"), expected: \"\" },\n     { actual: candidate(\"eAsy\"), expected: \"\" },\n\
  \     { actual: candidate(\"ali\"), expected: \"\" },\n     { actual: candidate(\"\
  bad\"), expected: \"a\" },\n     { actual: candidate(\"most\"), expected: \"o\"\
  \ },\n     { actual: candidate(\"ab\"), expected: \"\" },\n     { actual: candidate(\"\
  ba\"), expected: \"\" },\n     { actual: candidate(\"quick\"), expected: \"\" },\n\
  \     { actual: candidate(\"anime\"), expected: \"i\" },\n     { actual: candidate(\"\
  Asia\"), expected: \"\" },\n     { actual: candidate(\"Above\"), expected: \"o\"\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for\
    \ i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n        \
    \    for j := i - 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n \
    \                   break\n                }\n                if is_consonant(word[j])\
    \ {\n                    return string(word[i])\n                }\n         \
    \   }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\"\
    , \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n   \
    \     for _, v := range vowels {\n            if word[i] == v[0] {\n         \
    \       if i == len(word) - 1 {\n                    return \"\"\n           \
    \     }\n                return string(word[i])\n            }\n        }\n  \
    \  }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\"\
    , \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i])\
    \ {\n            for j := i - 1; j >= 0; j-- {\n                if is_vowel(word[j])\
    \ {\n                    break\n                }\n                if !is_vowel(word[j])\
    \ {\n                    return string(word[i])\n                }\n         \
    \   }\n        }\n    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\"\
    a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    var prev_char\
    \ string\n    var closest_vowel string\n    for i := len(word) - 1; i >= 0; i--\
    \ {\n        if vowels[string(word[i])] {\n            if prev_char != \"\" &&\
    \ !vowels[prev_char] {\n                closest_vowel = string(word[i])\n    \
    \            break\n            }\n        }\n        prev_char = string(word[i])\n\
    \    }\n    return closest_vowel\n}\n", "    vowels := []string{\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for\
    \ _, v := range vowels {\n            if word[i] == v[0] {\n                return\
    \ v\n            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n \
    \               if is_vowel(word[j]) {\n                    return \"\"\n    \
    \            }\n                if is_consonant(word[j]) {\n                 \
    \   return string(word[i])\n                }\n            }\n        }\n    }\n\
    \    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels\
    \ {\n            if word[i] == v[0] {\n                if i == len(word) - 1 {\n\
    \                    return \"\"\n                }\n                for j :=\
    \ i + 1; j < len(word); j++ {\n                    for _, v := range vowels {\n\
    \                        if word[j] == v[0] {\n                            return\
    \ \"\"\n                        }\n                    }\n                   \
    \ return string(word[i])\n                }\n            }\n        }\n    }\n\
    \    return \"\"\n}\n", "    // TODO: implement\n    return \"\"\n}\n", "    vowels\
    \ := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        if is_consonant(word[i]) {\n            for j := i -\
    \ 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n                 \
    \   return string(word[j])\n                }\n            }\n        }\n    }\n\
    \    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels\
    \ {\n            if word[i] == v[0] {\n                if i == len(word) - 1 {\n\
    \                    return \"\"\n                }\n                if i == 0\
    \ {\n                    return \"\"\n                }\n                for _,\
    \ v := range vowels {\n                    if word[i-1] == v[0] {\n          \
    \              return \"\"\n                    }\n                    if word[i+1]\
    \ == v[0] {\n                        return \"\"\n                    }\n    \
    \            }\n                return string(word[i])\n            }\n      \
    \  }\n    }\n    return \"\"\n}\n", "    var vowels = []string{\"a\", \"e\", \"\
    i\", \"o\", \"u\"}\n    var consonants = []string{\"b\", \"c\", \"d\", \"f\",\
    \ \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n    var result = \"\"\n    var last_consonant\
    \ = \"\"\n    var last_vowel = \"\"\n    var last_vowel_index = 0\n    var last_consonant_index\
    \ = 0\n    for i, char := range word {\n        if contains(vowels, string(char))\
    \ {\n            last_vowel = string(char)\n            last_vowel_index = i\n\
    \        } else if contains(consonants, string(char)) {\n            last_consonant\
    \ = string(char)\n            last_consonant_index = i\n        }\n    }\n   \
    \ if last_vowel_index > last_consonant_index {\n        result = last_vowel\n\
    \    }\n    return result\n}\n", "    vowels := \"aeiou\"\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if vowels[0] == word[i] || vowels[1] == word[i]\
    \ || vowels[2] == word[i] || vowels[3] == word[i] || vowels[4] == word[i] {\n\
    \            if i == len(word) - 1 {\n                return \"\"\n          \
    \  }\n            if vowels[0] != word[i+1] && vowels[1] != word[i+1] && vowels[2]\
    \ != word[i+1] && vowels[3] != word[i+1] && vowels[4] != word[i+1] {\n       \
    \         return string(word[i])\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n\
    \            if word[i] == v[0] {\n                return v\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n           \
    \     if is_vowel(word[j]) {\n                    break\n                }\n \
    \               if is_consonant(word[j]) {\n                    return string(word[i])\n\
    \                }\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result string\n\
    \    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n \
    \           result = string(word[i])\n            break\n        }\n    }\n  \
    \  return result\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels\
    \ {\n            if word[i] == v[0] {\n                return v\n            }\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for\
    \ _, v := range vowels {\n            if word[i] == v[0] {\n                return\
    \ v\n            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n \
    \               if is_vowel(word[j]) {\n                    break\n          \
    \      }\n                if is_consonant(word[j]) {\n                    return\
    \ string(word[i])\n                }\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := \"aeiou\"\n    for i := len(word) - 1; i >= 0; i--\
    \ {\n        if strings.Contains(vowels, string(word[i])) {\n            return\
    \ string(word[i])\n        }\n    }\n    return \"\"\n}\n", "    vowels := \"\
    aeiouAEIOU\"\n    for i := len(word) - 1; i >= 0; i-- {\n        if strings.Contains(vowels,\
    \ string(word[i])) {\n            if i == len(word) - 1 {\n                continue\n\
    \            }\n            if !strings.Contains(vowels, string(word[i+1])) {\n\
    \                return string(word[i])\n            }\n        }\n    }\n   \
    \ return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"\
    }\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels\
    \ {\n            if word[i] == v[0] {\n                return v\n            }\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := \"aeiouAEIOU\"\n    for\
    \ i := len(word) - 1; i >= 0; i-- {\n        if vowels[strings.Index(vowels, string(word[i]))]\
    \ != 0 {\n            if i == len(word) - 1 {\n                return \"\"\n \
    \           }\n            if vowels[strings.Index(vowels, string(word[i+1]))]\
    \ == 0 {\n                return string(word[i])\n            }\n        }\n \
    \   }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range\
    \ vowels {\n            if word[i] == v[0] {\n                return v\n     \
    \       }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        for _, v := range vowels {\n            if word[i] == v[0] {\n      \
    \          return v\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        if is_consonant(word[i]) {\n\
    \            for j := i - 1; j >= 0; j-- {\n                if is_vowel(word[j])\
    \ {\n                    return string(word[j])\n                }\n         \
    \   }\n        }\n    }\n    return \"\"\n}\n", "    vowels := \"aeiouAEIOU\"\n\
    \    for i := len(word) - 1; i >= 0; i-- {\n        if i == 0 {\n            return\
    \ \"\"\n        }\n        if vowels[vowels.Index(word[i])] != 0 {\n         \
    \   if vowels[vowels.Index(word[i-1])] == 0 {\n                return string(word[i])\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n \
    \               if is_vowel(word[j]) {\n                    continue\n       \
    \         } else {\n                    return string(word[i])\n             \
    \   }\n            }\n        }\n    }\n    return \"\"\n}\n", "    vowels :=\
    \ \"aeiouAEIOU\"\n    for i := len(word) - 1; i >= 0; i-- {\n        if strings.Contains(vowels,\
    \ string(word[i])) {\n            return string(word[i])\n        }\n    }\n \
    \   return \"\"\n}\n", "    vowels := map[string]int{\"a\": 1, \"e\": 1, \"i\"\
    : 1, \"o\": 1, \"u\": 1, \"A\": 1, \"E\": 1, \"I\": 1, \"O\": 1, \"U\": 1}\n \
    \   var last_consonant_index int = -1\n    var closest_vowel_index int = -1\n\
    \    for i, c := range word {\n        if _, ok := vowels[string(c)]; ok {\n \
    \           if last_consonant_index != -1 {\n                if closest_vowel_index\
    \ == -1 {\n                    closest_vowel_index = i\n                } else\
    \ if i - last_consonant_index < closest_vowel_index - last_consonant_index {\n\
    \                    closest_vowel_index = i\n                }\n            }\n\
    \        } else {\n            last_consonant_index = i\n        }\n    }\n  \
    \  if closest_vowel_index == -1 {\n        return \"\"\n    }\n    return string(word[closest_vowel_index])\n\
    }\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i :=\
    \ len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n         \
    \   if word[i] == v[0] {\n                return v\n            }\n        }\n\
    \    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\n        \"a\"\
    : true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n  \
    \      \"u\": true,\n    }\n    var last_consonant string\n    var last_vowel\
    \ string\n    for _, c := range word {\n        if vowels[string(c)] {\n     \
    \       last_vowel = string(c)\n        } else {\n            last_consonant =\
    \ string(c)\n        }\n        if last_consonant != \"\" && last_vowel != \"\"\
    \ {\n            return last_vowel\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := map[rune]bool{\n        'a': true,\n        'e': true,\n       \
    \ 'i': true,\n        'o': true,\n        'u': true,\n        'A': true,\n   \
    \     'E': true,\n        'I': true,\n        'O': true,\n        'U': true,\n\
    \    }\n    var prev_char, cur_char rune\n    for i, char := range word {\n  \
    \      if i == 0 {\n            prev_char = char\n            continue\n     \
    \   }\n        if vowels[char] {\n            if !vowels[prev_char] {\n      \
    \          return string(char)\n            }\n        }\n        prev_char =\
    \ char\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"\
    i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i])\
    \ {\n            for j := i - 1; j >= 0; j-- {\n                if is_vowel(word[j])\
    \ {\n                    return \"\"\n                }\n                if is_consonant(word[j])\
    \ {\n                    return string(word[i])\n                }\n         \
    \   }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\"\
    , \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n   \
    \     for _, v := range vowels {\n            if word[i] == v[0] {\n         \
    \       return v\n            }\n        }\n    }\n    return \"\"\n}\n", "  \
    \  vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := map[string]bool{\n        \"a\": true,\n        \"\
    e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n\
    \    }\n    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            if i == len(word) - 1 {\n                return \"\"\n      \
    \      }\n            if vowels[string(word[i+1])] {\n                return \"\
    \"\n            }\n            return string(word[i])\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n\
    \            if word[i] == v[0] {\n                return v\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ !is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n          \
    \      if is_vowel(word[j]) {\n                    return string(word[j])\n  \
    \              }\n            }\n        }\n    }\n    return \"\"\n}\n", "  \
    \  vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var closest_vowel\
    \ string\n    var closest_vowel_index int\n    var closest_vowel_distance int\n\
    \    for i, c := range word {\n        if c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u' {\n            if closest_vowel_index == 0 {\n        \
    \        closest_vowel_index = i\n                closest_vowel = string(c)\n\
    \            } else {\n                if i - closest_vowel_index > closest_vowel_distance\
    \ {\n                    closest_vowel_index = i\n                    closest_vowel\
    \ = string(c)\n                }\n            }\n        }\n    }\n    return\
    \ closest_vowel\n}\n", "    var vowels = []string{\"a\", \"e\", \"i\", \"o\",\
    \ \"u\"}\n    var consonants = []string{\"b\", \"c\", \"d\", \"f\", \"g\", \"\
    h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"}\n    var result string\n    var is_consonant\
    \ bool\n    var is_vowel bool\n    var is_first_vowel bool\n    var is_last_vowel\
    \ bool\n    var is_first_consonant bool\n    var is_last_consonant bool\n    var\
    \ is_first_char bool\n    var is_last_char bool\n    var is_second_char bool\n\
    \    var is_second_last_char bool\n    var is_third_char bool\n    var is_third_last_char\
    \ bool\n    var is_fourth_char bool\n    var is_fourth_last_char bool\n    var\
    \ is_fifth_char bool\n    var is_fifth_last_char bool\n    var is_sixth_char bool\n\
    \    var is_sixth_last_char bool\n    var is_seventh_char bool\n    var is_seventh_last_char\
    \ bool\n    var is_eighth_char bool\n    var is_eighth_last_char bool\n    var\
    \ is_ninth_char bool\n    var is_ninth_last_char bool\n    var is_tenth_char bool\n\
    \    var is_tenth_last_char bool\n    var is_eleventh_char bool\n    var is_eleventh_last_char\
    \ bool\n    var is_twelfth_char bool\n    var is_twelfth_last_char bool\n    var\
    \ is_thirteenth_char bool\n    var is_thirteenth_last_char bool\n    var is_fourteenth_char\
    \ bool\n    var is_fourteenth_last_char bool\n    var is_fifteenth_char bool\n\
    \    var is_fifteenth_last_char bool\n    var is_sixteenth_char bool\n    var\
    \ is_sixteenth_last_char bool\n    var is_seventeenth_", "    vowels := \"aeiou\"\
    \n    for i := len(word) - 1; i >= 0; i-- {\n        for j := 0; j < len(vowels);\
    \ j++ {\n            if word[i] == vowels[j] {\n                return string(word[i])\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    var vowels = map[string]bool{\n\
    \        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"\
    o\": true,\n        \"u\": true,\n    }\n    var last_consonant string\n    var\
    \ closest_vowel string\n    for _, letter := range word {\n        if vowels[string(letter)]\
    \ {\n            closest_vowel = string(letter)\n        } else {\n          \
    \  last_consonant = string(letter)\n        }\n        if last_consonant != \"\
    \" && closest_vowel != \"\" {\n            return closest_vowel\n        }\n \
    \   }\n    return \"\"\n}\n", "    var vowels = []string{\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"}\n    var consonants = []string{\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n    var result string\n    var distance\
    \ int\n    var min_distance int = len(word)\n    var is_vowel bool\n    var is_consonant\
    \ bool\n    var is_first_vowel bool = true\n    var is_first_consonant bool =\
    \ true\n    for i := len(word) - 1; i >= 0; i-- {\n        is_vowel = false\n\
    \        is_consonant = false\n        for _, v := range vowels {\n          \
    \  if string(word[i]) == v {\n                is_vowel = true\n              \
    \  break\n            }\n        }\n        for _, c := range consonants {\n \
    \           if string(word[i]) == c {\n                is_consonant = true\n \
    \               break\n            }\n        }\n        if is_vowel {\n     \
    \       if is_first_vowel {\n                is_first_vowel = false\n        \
    \    } else {\n                if is_first_consonant {\n                    is_first_consonant\
    \ = false\n                } else {\n                    distance = len(word)\
    \ - i - 1\n                    if distance < min_distance {\n                \
    \        min_distance = distance\n                        result = string(word[i])\n\
    \                    }\n                }\n            }\n        } else if is_consonant\
    \ {\n            if is_first_consonant {\n                is_first_consonant =\
    \ false\n            }\n        }\n    }\n    return result\n}\n", "    vowels\
    \ := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i] ==\
    \ v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 1; i >=\
    \ 0; i-- {\n        if i == 0 {\n            return \"\"\n        }\n        if\
    \ vowels[i] == word[i] {\n            return string(word[i])\n        }\n    }\n\
    \    return \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    vowels\
    \ := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i] ==\
    \ v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n    \
    \        for j := i - 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n\
    \                    break\n                }\n                if is_consonant(word[j])\
    \ {\n                    for _, v := range vowels {\n                        if\
    \ v == string(word[i]) {\n                            return v\n             \
    \           }\n                    }\n                }\n            }\n     \
    \   }\n    }\n    return \"\"\n}\n", "    var vowels = []string{\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"}\n    var consonants = []string{\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n    var result string\n    var\
    \ distance int\n    var index int\n    var last_index int\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i], vowels) {\n            index\
    \ = i\n            if last_index == 0 {\n                return \"\"\n       \
    \     }\n            if distance == 0 || distance > last_index - index {\n   \
    \             distance = last_index - index\n                result = string(word[i])\n\
    \            }\n        } else if is_consonant(word[i], consonants) {\n      \
    \      last_index = i\n        }\n    }\n    return result\n}\n", "    vowels\
    \ := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        if is_vowel(word[i]) {\n            for j := i - 1; j\
    \ >= 0; j-- {\n                if is_vowel(word[j]) {\n                    break\n\
    \                }\n                if is_consonant(word[j]) {\n             \
    \       return string(word[i])\n                }\n            }\n        }\n\
    \    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range\
    \ vowels {\n            if word[i] == v[0] {\n                return v\n     \
    \       }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        for _, v := range vowels {\n            if word[i] == v[0] {\n      \
    \          return v\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i], vowels) {\n            if i\
    \ == len(word) - 1 {\n                return \"\"\n            }\n           \
    \ if is_vowel(word[i+1], vowels) {\n                continue\n            }\n\
    \            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i], vowels) {\n            if i\
    \ == len(word) - 1 {\n                return \"\"\n            }\n           \
    \ if !is_vowel(word[i + 1], vowels) {\n                return string(word[i])\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n \
    \               if is_vowel(word[j]) {\n                    break\n          \
    \      }\n                for _, v := range vowels {\n                    if string(word[j])\
    \ == v {\n                        return string(word[j])\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return \"\"\n}\n",
  "    if len(word) < 3 {\n        return \"\"\n    }\n    vowels := []string{\"a\"\
    , \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n   \
    \     if word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o'\
    \ || word[i] == 'u' {\n            if i == len(word) - 1 {\n                continue\n\
    \            }\n            if word[i + 1] == 'a' || word[i + 1] == 'e' || word[i\
    \ + 1] == 'i' || word[i + 1] == 'o' || word[i + 1] == 'u' {\n                continue\n\
    \            }\n            return string(word[i])\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n\
    \            if word[i] == v[0] {\n                return v\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n           \
    \     if is_vowel(word[j]) {\n                    break\n                }\n \
    \               if is_consonant(word[j]) {\n                    for _, v := range\
    \ vowels {\n                        if v == string(word[i]) {\n              \
    \              return v\n                        }\n                    }\n  \
    \              }\n            }\n        }\n    }\n    return \"\"\n}\n", "  \
    \  vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n            for j := i -\
    \ 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n                 \
    \   break\n                }\n                if is_consonant(word[j]) {\n   \
    \                 return string(word[i])\n                }\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    var vowels = map[string]bool{\n\
    \        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"\
    o\": true,\n        \"u\": true,\n        \"A\": true,\n        \"E\": true,\n\
    \        \"I\": true,\n        \"O\": true,\n        \"U\": true,\n    }\n   \
    \ var prev_char string\n    var closest_vowel string\n    for i := len(word) -\
    \ 1; i >= 0; i-- {\n        if vowels[string(word[i])] {\n            if prev_char\
    \ != \"\" && !vowels[prev_char] {\n                closest_vowel = string(word[i])\n\
    \                break\n            }\n        }\n        prev_char = string(word[i])\n\
    \    }\n    return closest_vowel\n}\n", "    vowels := \"aeiou\"\n    for i :=\
    \ len(word) - 1; i >= 0; i-- {\n        if strings.Contains(vowels, string(word[i]))\
    \ {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n            for j := i -\
    \ 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n                 \
    \   break\n                }\n                if is_consonant(word[j]) {\n   \
    \                 return string(word[i])\n                }\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ isVowel(word[i], vowels) {\n            return string(word[i])\n        }\n\
    \    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range\
    \ vowels {\n            if word[i] == v[0] {\n                return v\n     \
    \       }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n \
    \               if is_vowel(word[j]) {\n                    break\n          \
    \      }\n                if is_consonant(word[j]) {\n                    return\
    \ string(word[i])\n                }\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    var vowels =\
    \ []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var consonants = []string{\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n    var result\
    \ string\n    var i int\n    var j int\n    var k int\n    var l int\n    var\
    \ m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r\
    \ int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n\
    \    var x int\n    var y int\n    var z int\n    var a int\n    var e int\n \
    \   var i int\n    var o int\n    var u int\n    for i = 0; i < len(word); i++\
    \ {\n        if word[i] == \"b\" {\n            b = i\n        }\n        if word[i]\
    \ == \"c\" {\n            c = i\n        }\n        if word[i] == \"d\" {\n  \
    \          d = i\n        }\n        if word[i] == \"f\" {\n            f = i\n\
    \        }\n        if word[i] == \"g\" {\n            g = i\n        }\n    \
    \    if word[i] == \"h\" {\n            h = i\n        }\n        if word[i] ==\
    \ \"j\" {\n            j = i\n        }\n        if word[i] == \"k\" {\n     \
    \       k = i\n        }\n        if word[i] == \"l\" {\n            l = i\n \
    \       }\n        if word[i] == \"m\" {\n            m = i\n        }\n     \
    \   if word[i] == \"n\" {\n            n = i\n        }\n        if word[i] ==\
    \ \"p\" {\n            p = i\n        }\n        if word[i] == \"q\" {\n     \
    \       q = i\n        }\n        if word[i] == \"r\" {\n            r = i\n \
    \       }\n       ", "    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        if strings.ContainsRune(vowels, rune(word[i])) {\n  \
    \          return string(word[i])\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := \"aeiouAEIOU\"\n    for i := len(word) - 1; i >= 0; i-- {\n    \
    \    if vowels[i] != 0 {\n            return string(vowels[i])\n        }\n  \
    \  }\n    return \"\"\n}\n", "    vowels := \"aeiouAEIOU\"\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if strings.Contains(vowels, string(word[i])) {\n\
    \            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
  "    vowels := map[string]bool{\n        \"a\": true,\n        \"e\": true,\n  \
    \      \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    var\
    \ closest_vowel string\n    var closest_vowel_index int\n    var closest_vowel_distance\
    \ int\n    for i, char := range word {\n        if vowels[string(char)] {\n  \
    \          if closest_vowel_index == 0 {\n                closest_vowel_index\
    \ = i\n                closest_vowel = string(char)\n                closest_vowel_distance\
    \ = len(word) - i\n            } else {\n                if len(word) - i < closest_vowel_distance\
    \ {\n                    closest_vowel_index = i\n                    closest_vowel\
    \ = string(char)\n                    closest_vowel_distance = len(word) - i\n\
    \                }\n            }\n        }\n    }\n    if closest_vowel_index\
    \ == 0 {\n        return \"\"\n    }\n    return closest_vowel\n}\n", "    vowels\
    \ := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        if is_vowel(word[i]) {\n            for j := i - 1; j\
    \ >= 0; j-- {\n                if is_vowel(word[j]) {\n                    break\n\
    \                }\n                if is_consonant(word[j]) {\n             \
    \       return string(word[i])\n                }\n            }\n        }\n\
    \    }\n    return \"\"\n}\n", "    vowels := \"aeiou\"\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if vowels[i] == word[i] {\n            return string(word[i])\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := \"aeiou\"\n    for i\
    \ := len(word) - 1; i >= 0; i-- {\n        if vowels[strings.Index(vowels, string(word[i]))]\
    \ != \"\" {\n            if i == len(word) - 1 {\n                return \"\"\n\
    \            }\n            if vowels[strings.Index(vowels, string(word[i + 1]))]\
    \ == \"\" {\n                return string(word[i])\n            }\n        }\n\
    \    }\n    return \"\"\n}\n", "    vowels := \"aeiouAEIOU\"\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if vowels[i] != 0 {\n            return string(vowels[i])\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for\
    \ _, v := range vowels {\n            if word[i] == v[0] {\n                return\
    \ v\n            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n \
    \               if is_vowel(word[j]) {\n                    break\n          \
    \      }\n                if !is_vowel(word[j]) {\n                    return\
    \ string(word[i])\n                }\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        if is_consonant(word[i]) {\n\
    \            for j := i - 1; j >= 0; j-- {\n                if is_vowel(word[j])\
    \ {\n                    return string(word[j])\n                }\n         \
    \   }\n        }\n    }\n    return \"\"\n}\n", "    var vowels = map[string]int{\"\
    a\":1, \"e\":1, \"i\":1, \"o\":1, \"u\":1, \"A\":1, \"E\":1, \"I\":1, \"O\":1,\
    \ \"U\":1}\n    var consonants = map[string]int{\"b\":1, \"c\":1, \"d\":1, \"\
    f\":1, \"g\":1, \"h\":1, \"j\":1, \"k\":1, \"l\":1, \"m\":1, \"n\":1, \"p\":1,\
    \ \"q\":1, \"r\":1, \"s\":1, \"t\":1, \"v\":1, \"w\":1, \"x\":1, \"y\":1, \"z\"\
    :1, \"B\":1, \"C\":1, \"D\":1, \"F\":1, \"G\":1, \"H\":1, \"J\":1, \"K\":1, \"\
    L\":1, \"M\":1, \"N\":1, \"P\":1, \"Q\":1, \"R\":1, \"S\":1, \"T\":1, \"V\":1,\
    \ \"W\":1, \"X\":1, \"Y\":1, \"Z\":1}\n    var prev_char string\n    var prev_prev_char\
    \ string\n    var prev_prev_prev_char string\n    var prev_prev_prev_prev_char\
    \ string\n    for i := len(word) - 1; i >= 0; i-- {\n        if _, ok := vowels[string(word[i])];\
    \ ok {\n            if _, ok := consonants[prev_char]; ok {\n                if\
    \ _, ok := consonants[prev_prev_char]; ok {\n                    if _, ok := consonants[prev_prev_prev_char];\
    \ ok {\n                        if _, ok := consonants[prev_prev_prev_prev_char];\
    \ ok {\n                            return \"\"\n                        }\n \
    \                   }\n                    return string(word[i])\n          \
    \      }\n            }\n        }\n        prev_prev_prev_prev_char = prev_prev_prev_char\n\
    \        prev_prev_prev_char = prev_prev_char\n        prev_prev_char = prev_char\n\
    \       ", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for\
    \ i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n    \
    \        if word[i] == v[0] {\n                return v\n            }\n     \
    \   }\n    }\n    return \"\"\n}\n", "    // your code here\n    return \"\"\n\
    }\n", "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var consonants\
    \ = []string{\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"\
    z\"}\n    var result string\n    var last_consonant_index int\n    var last_vowel_index\
    \ int\n    var last_vowel string\n    var last_consonant string\n    var last_vowel_distance\
    \ int\n    var last_consonant_distance int\n    var last_vowel_distance_index\
    \ int\n    var last_consonant_distance_index int\n    var last_vowel_distance_index_temp\
    \ int\n    var last_consonant_distance_index_temp int\n    var last_vowel_distance_temp\
    \ int\n    var last_consonant_distance_temp int\n    var last_vowel_temp string\n\
    \    var last_consonant_temp string\n    var last_vowel_index_temp int\n    var\
    \ last_consonant_index_temp int\n    var last_vowel_index_temp_temp int\n    var\
    \ last_consonant_index_temp_temp int\n    var last_vowel_index_temp_temp_temp\
    \ int\n    var last_consonant_index_temp_temp_temp int\n    var last_vowel_index_temp_temp_temp_temp\
    \ int\n    var last_consonant_index_temp_temp_temp_temp int\n    var last_vowel_index_temp_temp_temp_temp_temp\
    \ int\n    var last_consonant_index_temp_temp_temp_temp_temp int\n    var last_vowel_index_temp_temp_temp_temp_temp_temp\
    \ int\n    var last_consonant_index_temp_temp_temp_temp_temp_temp int\n    var\
    \ last_vowel_index_temp_temp_temp_temp_temp_temp_temp int\n    var last_cons",
  "    vowels := map[string]int{\"a\":1, \"e\":1, \"i\":1, \"o\":1, \"u\":1, \"A\"\
    :1, \"E\":1, \"I\":1, \"O\":1, \"U\":1}\n    for i := len(word) - 1; i >= 0; i--\
    \ {\n        if _, ok := vowels[string(word[i])]; ok {\n            if i > 0 &&\
    \ i < len(word) - 1 {\n                if _, ok := vowels[string(word[i-1])];\
    \ !ok && _, ok := vowels[string(word[i+1])]; !ok {\n                    return\
    \ string(word[i])\n                }\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n\
    \            if word[i] == v[0] {\n                return v\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    if len(word) < 3 {\n        return\
    \ \"\"\n    }\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        if word[i] == 'a' || word[i]\
    \ == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' {\n           \
    \ for _, v := range vowels {\n                if v == string(word[i]) {\n    \
    \                return v\n                }\n            }\n        }\n    }\n\
    \    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels\
    \ {\n            if word[i] == v[0] {\n                return v\n            }\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for\
    \ _, v := range vowels {\n            if word[i] == v[0] {\n                return\
    \ v\n            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        for _, v := range vowels {\n            if word[i] == v[0] {\n      \
    \          return v\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   var vowels = map[string]int{\n        \"a\": 1,\n        \"e\": 1,\n     \
    \   \"i\": 1,\n        \"o\": 1,\n        \"u\": 1,\n        \"A\": 1,\n     \
    \   \"E\": 1,\n        \"I\": 1,\n        \"O\": 1,\n        \"U\": 1,\n    }\n\
    \    var result string\n    var last_consonant_index int\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if _, ok := vowels[string(word[i])]; ok {\n    \
    \        if i < last_consonant_index {\n                result = string(word[i])\n\
    \                break\n            }\n        } else {\n            last_consonant_index\
    \ = i\n        }\n    }\n    return result\n}\n", "    vowels := []string{\"a\"\
    , \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n   \
    \     if is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n    \
    \            if is_vowel(word[j]) {\n                    return \"\"\n       \
    \         }\n                if is_consonant(word[j]) {\n                    return\
    \ string(word[i])\n                }\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    var vowels = map[string]bool{\n        \"a\": true,\n     \
    \   \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n\
    \    }\n    var last_consonant_index = -1\n    for i := len(word) - 1; i >= 0;\
    \ i-- {\n        if _, ok := vowels[string(word[i])]; !ok {\n            last_consonant_index\
    \ = i\n            break\n        }\n    }\n    if last_consonant_index == -1\
    \ {\n        return \"\"\n    }\n    for i := last_consonant_index - 1; i >= 0;\
    \ i-- {\n        if _, ok := vowels[string(word[i])]; ok {\n            return\
    \ string(word[i])\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        for _, v := range vowels {\n            if word[i] == v[0] {\n      \
    \          if i == len(word) - 1 {\n                    return \"\"\n        \
    \        }\n                for j := i + 1; j < len(word); j++ {\n           \
    \         for _, v := range vowels {\n                        if word[j] == v[0]\
    \ {\n                            return \"\"\n                        }\n    \
    \                }\n                    return string(word[i])\n             \
    \   }\n            }\n        }\n    }\n    return \"\"\n}\n", "    vowels :=\
    \ \"aeiou\"\n    for i := len(word) - 1; i >= 0; i-- {\n        if strings.Contains(vowels,\
    \ string(word[i])) {\n            if i > 0 && strings.Contains(vowels, string(word[i-1]))\
    \ {\n                continue\n            }\n            if i < len(word) - 1\
    \ && strings.Contains(vowels, string(word[i+1])) {\n                continue\n\
    \            }\n            return string(word[i])\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := map[string]bool{\"a\": true, \"e\": true, \"i\":\
    \ true, \"o\": true, \"u\": true}\n    var last_vowel string\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if vowels[string(word[i])] {\n            last_vowel\
    \ = string(word[i])\n            break\n        }\n    }\n    if last_vowel ==\
    \ \"\" {\n        return \"\"\n    }\n    for i := len(word) - 1; i >= 0; i--\
    \ {\n        if !vowels[string(word[i])] {\n            return last_vowel\n  \
    \      }\n        last_vowel = string(word[i])\n    }\n    return \"\"\n}\n",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n            for j := i -\
    \ 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n                 \
    \   break\n                }\n                if is_consonant(word[j]) {\n   \
    \                 return string(word[i])\n                }\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := \"aeiouAEIOU\"\n    for\
    \ i := len(word) - 1; i >= 0; i-- {\n        if i == 0 {\n            return \"\
    \"\n        }\n        if word[i] == 'a' || word[i] == 'e' || word[i] == 'i' ||\
    \ word[i] == 'o' || word[i] == 'u' ||\n           word[i] == 'A' || word[i] ==\
    \ 'E' || word[i] == 'I' || word[i] == 'O' || word[i] == 'U' {\n            if\
    \ word[i-1] != 'a' && word[i-1] != 'e' && word[i-1] != 'i' && word[i-1] != 'o'\
    \ && word[i-1] != 'u' &&\n               word[i-1] != 'A' && word[i-1] != 'E'\
    \ && word[i-1] != 'I' && word[i-1] != 'O' && word[i-1] != 'U' {\n            \
    \    return string(word[i])\n            }\n        }\n    }\n    return \"\"\n\
    }\n", "    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if vowels[i] == word[i] {\n            return string(word[i])\n     \
    \   }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"\
    i\", \"o\", \"u\"}\n    var closest_vowel string\n    var closest_vowel_index\
    \ int\n    var closest_vowel_distance int\n    for i, char := range word {\n \
    \       if is_vowel(char) {\n            distance := len(word) - i\n         \
    \   if closest_vowel_distance == 0 || distance < closest_vowel_distance {\n  \
    \              closest_vowel_distance = distance\n                closest_vowel_index\
    \ = i\n                closest_vowel = string(char)\n            }\n        }\n\
    \    }\n    if closest_vowel_index == 0 || closest_vowel_index == len(word) -\
    \ 1 {\n        return \"\"\n    }\n    if is_vowel(word[closest_vowel_index -\
    \ 1]) || is_vowel(word[closest_vowel_index + 1]) {\n        return \"\"\n    }\n\
    \    return closest_vowel\n}\n", "    vowels := \"aeiouAEIOU\"\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if vowels[i] != 0 {\n            return string(vowels[i])\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for\
    \ _, v := range vowels {\n            if word[i] == v[0] {\n                return\
    \ v\n            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := \"\
    aeiouAEIOU\"\n    consonants := \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    found := false\n    for i := len(word) - 1; i >= 0; i-- {\n        if found\
    \ {\n            if strings.Contains(consonants, string(word[i])) {\n        \
    \        return string(word[i+1])\n            }\n        } else {\n         \
    \   if strings.Contains(vowels, string(word[i])) {\n                found = true\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := map[string]int{\n\
    \        \"a\": 1,\n        \"e\": 1,\n        \"i\": 1,\n        \"o\": 1,\n\
    \        \"u\": 1,\n        \"A\": 1,\n        \"E\": 1,\n        \"I\": 1,\n\
    \        \"O\": 1,\n        \"U\": 1,\n    }\n    var prev_consonant, next_consonant\
    \ bool\n    var prev_vowel, next_vowel string\n    for i := len(word) - 1; i >=\
    \ 0; i-- {\n        if _, ok := vowels[string(word[i])]; ok {\n            if\
    \ prev_consonant && !next_consonant {\n                return string(word[i])\n\
    \            }\n            prev_vowel = string(word[i])\n            prev_consonant\
    \ = false\n        } else {\n            if next_consonant && !prev_consonant\
    \ {\n                return prev_vowel\n            }\n            next_consonant\
    \ = true\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if is_vowel(word[i], vowels) {\n            if i == len(word) - 1 {\n\
    \                return \"\"\n            }\n            if !is_vowel(word[i +\
    \ 1], vowels) {\n                return string(word[i])\n            }\n     \
    \   }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"\
    i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if stringInSlice(word[i:i+1],\
    \ vowels) {\n            return word[i:i+1]\n        }\n    }\n    return \"\"\
    \n}\n", "    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 1; i >= 0; i--\
    \ {\n        if vowels[i] != -1 {\n            return string(vowels[i])\n    \
    \    }\n    }\n    return \"\"\n}\n", "    var vowels = []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    var consonants = []string{\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n    var result string\n    var\
    \ last_consonant_index int\n    var first_vowel_index int\n    var is_first_vowel_found\
    \ bool\n    for i, c := range word {\n        if !is_first_vowel_found {\n   \
    \         for _, v := range vowels {\n                if string(c) == v {\n  \
    \                  first_vowel_index = i\n                    is_first_vowel_found\
    \ = true\n                    break\n                }\n            }\n      \
    \  }\n        for _, v := range consonants {\n            if string(c) == v {\n\
    \                last_consonant_index = i\n                break\n           \
    \ }\n        }\n    }\n    if last_consonant_index > first_vowel_index {\n   \
    \     result = string(word[first_vowel_index])\n    }\n    return result\n}\n",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n            for j := i -\
    \ 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n                 \
    \   return \"\"\n                }\n                if !is_vowel(word[j]) {\n\
    \                    return string(word[i])\n                }\n            }\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ is_vowel(word[i], vowels) {\n            if i == len(word) - 1 {\n         \
    \       return \"\"\n            }\n            if !is_vowel(word[i+1], vowels)\
    \ {\n                return string(word[i])\n            }\n        }\n    }\n\
    \    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i])\
    \ {\n            for j := i - 1; j >= 0; j-- {\n                if is_vowel(word[j])\
    \ {\n                    break\n                }\n                if is_consonant(word[j])\
    \ {\n                    return string(word[i])\n                }\n         \
    \   }\n        }\n    }\n    return \"\"\n}\n", "    vowels := \"aeiou\"\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        if strings.Contains(vowels, string(word[i]))\
    \ {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
  "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var consonants\
    \ = []string{\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"\
    z\"}\n    var result string\n    var last_vowel_index int\n    var last_consonant_index\
    \ int\n    var last_vowel string\n    var last_consonant string\n    var last_consonant_index_found\
    \ bool\n    var last_vowel_index_found bool\n    var last_vowel_found bool\n \
    \   var last_consonant_found bool\n    var index int\n    var letter string\n\
    \    var letter_found bool\n    var letter_index int\n    var letter_index_found\
    \ bool\n    var letter_index_found_first bool\n    var letter_index_found_second\
    \ bool\n    var letter_index_found_third bool\n    var letter_index_found_fourth\
    \ bool\n    var letter_index_found_fifth bool\n    var letter_index_found_sixth\
    \ bool\n    var letter_index_found_seventh bool\n    var letter_index_found_eighth\
    \ bool\n    var letter_index_found_ninth bool\n    var letter_index_found_tenth\
    \ bool\n    var letter_index_found_eleventh bool\n    var letter_index_found_twelfth\
    \ bool\n    var letter_index_found_thirteenth bool\n    var letter_index_found_fourteenth\
    \ bool\n    var letter_index_found_fifteenth bool\n    var letter_index_found_sixteenth\
    \ bool\n    var letter_index_found_seventeenth bool\n    var letter_index_found_eighteenth\
    \ bool\n    var letter_index_found_nineteenth bool\n    var letter_index_found_twentieth\
    \ bool\n    var letter_index_found_twenty_first bool\n    var letter_index_found_twenty_second\
    \ bool\n    var letter_index_found_twenty_third bool\n    var letter_index_found_twenty_",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n            for j := i -\
    \ 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n                 \
    \   break\n                }\n                if is_consonant(word[j]) {\n   \
    \                 return string(word[i])\n                }\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for\
    \ _, vowel := range vowels {\n            if word[i] == vowel[0] {\n         \
    \       return vowel\n            }\n        }\n    }\n    return \"\"\n}\n",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n            for j := i -\
    \ 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n                 \
    \   break\n                }\n                if is_consonant(word[j]) {\n   \
    \                 return string(word[i])\n                }\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ is_consonant(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n       \
    \         if is_vowel(word[j]) {\n                    return string(word[j])\n\
    \                }\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := \"aeiouAEIOU\"\n    for i := len(word) - 1; i > 0; i-- {\n     \
    \   if strings.Contains(vowels, string(word[i])) {\n            if !strings.Contains(vowels,\
    \ string(word[i-1])) {\n                return string(word[i])\n            }\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ contains(vowels, string(word[i])) {\n            for j := i - 1; j >= 0; j--\
    \ {\n                if contains(vowels, string(word[j])) {\n                \
    \    continue\n                } else {\n                    return string(word[i])\n\
    \                }\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n            for j := i -\
    \ 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n                 \
    \   return \"\"\n                }\n                if is_consonant(word[j]) {\n\
    \                    return string(word[i])\n                }\n            }\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\n  \
    \      \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\"\
    : true,\n        \"u\": true,\n    }\n    var prev_char string\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if vowels[string(word[i])] {\n            if prev_char\
    \ != \"\" && !vowels[prev_char] {\n                return string(word[i])\n  \
    \          }\n        }\n        prev_char = string(word[i])\n    }\n    return\
    \ \"\"\n}\n", "    vowels := \"aeiou\"\n    for i := len(word) - 1; i >= 0; i--\
    \ {\n        if i == 0 {\n            return \"\"\n        }\n        if word[i]\
    \ == word[i-1] {\n            continue\n        }\n        if word[i] == 'a' ||\
    \ word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' {\n   \
    \         return string(word[i])\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := map[string]int{\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1,\
    \ \"A\": 1, \"E\": 1, \"I\": 1, \"O\": 1, \"U\": 1}\n    for i := len(word) -\
    \ 1; i >= 0; i-- {\n        if _, ok := vowels[string(word[i])]; ok {\n      \
    \      if i > 0 && i < len(word) - 1 {\n                if _, ok := vowels[string(word[i-1])];\
    \ !ok && _, ok := vowels[string(word[i+1])]; !ok {\n                    return\
    \ string(word[i])\n                }\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i], vowels)\
    \ {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := map[string]int{\n        \"a\": 1,\n        \"e\"\
    : 1,\n        \"i\": 1,\n        \"o\": 1,\n        \"u\": 1,\n        \"A\":\
    \ 1,\n        \"E\": 1,\n        \"I\": 1,\n        \"O\": 1,\n        \"U\":\
    \ 1,\n    }\n    var prev_char string\n    var prev_prev_char string\n    var\
    \ vowel_pos int\n    var vowel_pos_prev int\n    for i, char := range word {\n\
    \        if _, ok := vowels[string(char)]; ok {\n            if prev_char != \"\
    \" && prev_prev_char != \"\" {\n                if _, ok := vowels[prev_char];\
    \ !ok {\n                    if _, ok := vowels[prev_prev_char]; !ok {\n     \
    \                   if vowel_pos == 0 {\n                            vowel_pos\
    \ = i\n                        } else {\n                            if vowel_pos_prev\
    \ < i {\n                                vowel_pos = i\n                     \
    \       }\n                        }\n                    }\n                }\n\
    \            }\n            vowel_pos_prev = i\n        }\n        prev_prev_char\
    \ = prev_char\n        prev_char = string(char)\n    }\n    if vowel_pos == 0\
    \ {\n        return \"\"\n    }\n    return string(word[vowel_pos])\n}\n", " \
    \   vowels := \"aeiouAEIOU\"\n    for i := len(word) - 1; i > 0; i-- {\n     \
    \   if strings.Contains(vowels, string(word[i])) {\n            if !strings.Contains(vowels,\
    \ string(word[i-1])) {\n                return string(word[i])\n            }\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    var closest_vowel string\n    var closest_vowel_index\
    \ int\n    var closest_vowel_distance int\n    for i, char := range word {\n \
    \       if char == 'a' || char == 'e' || char == 'i' || char == 'o' || char ==\
    \ 'u' {\n            if closest_vowel_index == 0 {\n                closest_vowel_index\
    \ = i\n                closest_vowel = string(char)\n            } else {\n  \
    \              if i - closest_vowel_index > closest_vowel_distance {\n       \
    \             closest_vowel_index = i\n                    closest_vowel = string(char)\n\
    \                }\n            }\n        }\n    }\n    return closest_vowel\n\
    }\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i :=\
    \ len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n            for\
    \ j := i - 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n        \
    \            break\n                }\n                if is_consonant(word[j])\
    \ {\n                    return string(word[i])\n                }\n         \
    \   }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\"\
    , \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n   \
    \     if is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n    \
    \            if is_vowel(word[j]) {\n                    break\n             \
    \   }\n                if is_consonant(word[j]) {\n                    return\
    \ string(word[i])\n                }\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n\
    \            if v == string(word[i]) {\n                return v\n           \
    \ }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"\
    e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n       \
    \ for _, v := range vowels {\n            if word[i] == v[0] {\n             \
    \   return string(word[i])\n            }\n        }\n    }\n    return \"\"\n\
    }\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result\
    \ string\n    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i])\
    \ {\n            result = string(word[i])\n            break\n        }\n    }\n\
    \    return result\n}\n", "    vowels := map[string]bool{\"a\": true, \"e\": true,\
    \ \"i\": true, \"o\": true, \"u\": true}\n    for i := len(word) - 1; i >= 0;\
    \ i-- {\n        if vowels[string(word[i])] {\n            for j := i - 1; j >=\
    \ 0; j-- {\n                if vowels[string(word[j])] {\n                   \
    \ return \"\"\n                }\n                if !vowels[string(word[j])]\
    \ {\n                    return string(word[i])\n                }\n         \
    \   }\n        }\n    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\n\
    \        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"\
    o\": true,\n        \"u\": true,\n    }\n    var prev_char string\n    var prev_prev_char\
    \ string\n    for i := len(word) - 1; i >= 0; i-- {\n        char := string(word[i])\n\
    \        if vowels[char] {\n            if prev_char != \"\" && !vowels[prev_char]\
    \ {\n                return char\n            }\n        } else {\n          \
    \  if prev_prev_char != \"\" && vowels[prev_prev_char] {\n                return\
    \ prev_prev_char\n            }\n        }\n        prev_prev_char = prev_char\n\
    \        prev_char = char\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        for _, v := range vowels {\n            if word[i] == v[0] {\n      \
    \          return v\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := \"aeiou\"\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ vowels[vowels.Index(word[i])] == word[i] {\n            if i > 0 && vowels[vowels.Index(word[i-1])]\
    \ != word[i-1] {\n                return string(word[i])\n            }\n    \
    \    }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"\
    i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i])\
    \ {\n            for j := i - 1; j >= 0; j-- {\n                if is_vowel(word[j])\
    \ {\n                    return \"\"\n                }\n                if !is_vowel(word[j])\
    \ {\n                    return string(word[i])\n                }\n         \
    \   }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\"\
    , \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n   \
    \     for _, v := range vowels {\n            if word[i] == v[0] {\n         \
    \       return v\n            }\n        }\n    }\n    return \"\"\n}\n", "  \
    \  vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n            for j := i -\
    \ 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n                 \
    \   break\n                }\n                if is_consonant(word[j]) {\n   \
    \                 return string(word[i])\n                }\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n           \
    \     if is_vowel(word[j]) {\n                    return \"\"\n              \
    \  }\n                if is_consonant(word[j]) {\n                    return string(word[i])\n\
    \                }\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n\
    \            if word[i] == v[0] {\n                return v\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for\
    \ _, v := range vowels {\n            if word[i] == v[0] {\n                if\
    \ i == len(word) - 1 {\n                    return \"\"\n                }\n \
    \               return string(word[i])\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 1; i >=\
    \ 0; i-- {\n        if vowels[strings.Index(vowels, string(word[i]))] != 0 {\n\
    \            if i == len(word) - 1 {\n                return \"\"\n          \
    \  }\n            if vowels[strings.Index(vowels, string(word[i+1]))] == 0 {\n\
    \                return string(word[i])\n            }\n        }\n    }\n   \
    \ return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"\
    }\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels\
    \ {\n            if word[i] == v[0] {\n                return v\n            }\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := \"aeiouAEIOU\"\n    for\
    \ i := len(word) - 1; i >= 0; i-- {\n        if strings.Contains(vowels, string(word[i]))\
    \ {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
  "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var consonants\
    \ = []string{\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"\
    z\"}\n    var result string\n    var found bool\n    for i := len(word) - 1; i\
    \ >= 0; i-- {\n        if !found {\n            for _, v := range vowels {\n \
    \               if word[i] == v[0] {\n                    result = string(word[i])\n\
    \                    found = true\n                    break\n               \
    \ }\n            }\n        } else {\n            for _, c := range consonants\
    \ {\n                if word[i] == c[0] {\n                    return result\n\
    \                }\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n    \
    \        for j := i - 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n\
    \                    break\n                }\n                if is_consonant(word[j])\
    \ {\n                    return string(word[i])\n                }\n         \
    \   }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\"\
    , \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n   \
    \     if isVowel(word[i], vowels) {\n            if i == len(word) - 1 {\n   \
    \             return \"\"\n            }\n            if isVowel(word[i+1], vowels)\
    \ {\n                continue\n            }\n            return string(word[i])\n\
    \        }\n    }\n    return \"\"\n}\n", "    // your code here\n    return \"\
    \"\n}\n", "    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 1; i >= 0; i--\
    \ {\n        if strings.Contains(vowels, string(word[i])) {\n            return\
    \ string(word[i])\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        for _, v := range vowels {\n            if word[i] == v[0] {\n      \
    \          return v\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := \"aeiou\"\n    prev_char := \"\"\n    for i := len(word) - 1; i\
    \ >= 0; i-- {\n        char := string(word[i])\n        if strings.Contains(vowels,\
    \ char) {\n            if prev_char != \"\" && !strings.Contains(vowels, prev_char)\
    \ {\n                return char\n            }\n        }\n        prev_char\
    \ = char\n    }\n    return \"\"\n}\n", "    vowels := \"aeiouAEIOU\"\n    for\
    \ i := len(word) - 1; i >= 0; i-- {\n        if word[i] == 'a' || word[i] == 'e'\
    \ || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' || word[i] == 'A' || word[i]\
    \ == 'E' || word[i] == 'I' || word[i] == 'O' || word[i] == 'U' {\n           \
    \ for j := i - 1; j >= 0; j-- {\n                if word[j] != 'a' && word[j]\
    \ != 'e' && word[j] != 'i' && word[j] != 'o' && word[j] != 'u' && word[j] != 'A'\
    \ && word[j] != 'E' && word[j] != 'I' && word[j] != 'O' && word[j] != 'U' {\n\
    \                    return string(word[i])\n                }\n            }\n\
    \        }\n    }\n    return \"\"\n}\n", "    var vowels = []string{\"a\", \"\
    e\", \"i\", \"o\", \"u\"}\n    var consonants = []string{\"b\", \"c\", \"d\",\
    \ \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n    var result string\n  \
    \  var last_consonant_index int\n    var last_vowel_index int\n    var last_vowel\
    \ string\n    var last_consonant string\n    var last_vowel_distance int\n   \
    \ var last_consonant_distance int\n    var current_vowel_distance int\n    var\
    \ current_consonant_distance int\n    var current_vowel string\n    var current_consonant\
    \ string\n    var current_vowel_index int\n    var current_consonant_index int\n\
    \    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n \
    \   var n int\n    var o int\n    var p int\n    var q int\n    var r int\n  \
    \  var s int\n    var t int\n    var u int\n    var v int\n    var w int\n   \
    \ var x int\n    var y int\n    var z int\n    var a int\n    var e int\n    var\
    \ i_ int\n    var o_ int\n    var u_ int\n    var b int\n    var c int\n    var\
    \ d int\n    var f int\n    var g int\n    var h int\n    var j_ int\n    var\
    \ k_ int\n    var l_ int\n    var m_ int\n    var n_ int\n    var p_ int\n   \
    \ var q_ int\n    var r_ int\n    var s_ int\n    var t_ int\n    var v_ int\n\
    \    var w_ int\n    var x_ int\n    var y_ int\n    var z_ int\n    var last_vowel_index_found\
    \ bool\n    var last_consonant_index_found bool\n    var current_vowel_index_found\
    \ bool\n    var current_consonant_index_found", "    vowels := []string{\"a\"\
    , \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n   \
    \     if is_consonant(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n\
    \                if is_vowel(word[j]) {\n                    return string(word[j])\n\
    \                }\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := map[string]bool{\n        \"a\": true,\n        \"e\": true,\n \
    \       \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    closest_vowel\
    \ := \"\"\n    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            closest_vowel = string(word[i])\n            break\n        }\n\
    \    }\n    return closest_vowel\n}\n", "    vowels := \"aeiouAEIOU\"\n    for\
    \ i := len(word) - 1; i >= 0; i-- {\n        if strings.Contains(vowels, string(word[i]))\
    \ {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n            for j := i -\
    \ 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n                 \
    \   break\n                }\n                if is_consonant(word[j]) {\n   \
    \                 return string(word[i])\n                }\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n           \
    \     if is_vowel(word[j]) {\n                    break\n                }\n \
    \               if is_consonant(word[j]) {\n                    return string(word[i])\n\
    \                }\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"o\": true,\
    \ \"u\": true}\n    var prev_char string\n    var prev_vowel string\n    for i\
    \ := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])] {\n    \
    \        if prev_char != \"\" && !vowels[prev_char] {\n                return\
    \ string(word[i])\n            }\n            prev_vowel = string(word[i])\n \
    \       }\n        prev_char = string(word[i])\n    }\n    return prev_vowel\n\
    }\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i :=\
    \ len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n         \
    \   if word[i] == v[0] {\n                return v\n            }\n        }\n\
    \    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range\
    \ vowels {\n            if v == string(word[i]) {\n                return v\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    var vowels = []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    var consonants = []string{\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n    var result string\n\
    \    var found bool\n    for i := len(word) - 1; i >= 0; i-- {\n        for _,\
    \ v := range vowels {\n            if word[i] == v[0] {\n                result\
    \ = v\n                found = true\n                break\n            }\n  \
    \      }\n        if found {\n            break\n        }\n    }\n    if !found\
    \ {\n        return \"\"\n    }\n    for i := len(word) - 1; i >= 0; i-- {\n \
    \       for _, c := range consonants {\n            if word[i] == c[0] {\n   \
    \             return result\n            }\n        }\n    }\n    return \"\"\n\
    }\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result\
    \ string\n    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i])\
    \ {\n            result = string(word[i])\n            break\n        }\n    }\n\
    \    return result\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\",\
    \ \"u\"}\n    var vowel string\n    for i := len(word) - 1; i >= 0; i-- {\n  \
    \      if stringInSlice(word[i:i+1], vowels) {\n            vowel = word[i:i+1]\n\
    \            break\n        }\n    }\n    return vowel\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        for _, v := range vowels {\n            if word[i] == v[0] {\n      \
    \          return v\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := \"aeiouAEIOU\"\n    for i := len(word) - 1; i >= 0; i-- {\n    \
    \    if vowels[strings.Index(vowels, string(word[i]))] != 0 {\n            if\
    \ i == len(word) - 1 {\n                return \"\"\n            }\n         \
    \   if vowels[strings.Index(vowels, string(word[i + 1]))] == 0 {\n           \
    \     return string(word[i])\n            }\n        }\n    }\n    return \"\"\
    \n}\n", "    vowels := map[string]bool{\n        \"a\": true,\n        \"e\":\
    \ true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n  \
    \  }\n    var prev_char string\n    for i := len(word) - 1; i >= 0; i-- {\n  \
    \      if vowels[string(word[i])] {\n            if prev_char != \"\" && !vowels[prev_char]\
    \ {\n                return string(word[i])\n            }\n        }\n      \
    \  prev_char = string(word[i])\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n \
    \               if is_vowel(word[j]) {\n                    return \"\"\n    \
    \            }\n                if is_consonant(word[j]) {\n                 \
    \   return string(word[i])\n                }\n            }\n        }\n    }\n\
    \    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels\
    \ {\n            if word[i] == v[0] {\n                return v\n            }\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := \"aeiouAEIOU\"\n    for\
    \ i := len(word) - 1; i >= 0; i-- {\n        if vowels[strings.Index(vowels, string(word[i]))]\
    \ != 0 {\n            if i == len(word) - 1 {\n                return \"\"\n \
    \           }\n            if vowels[strings.Index(vowels, string(word[i + 1]))]\
    \ == 0 {\n                return string(word[i])\n            }\n        }\n \
    \   }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if isVowel(word[i],\
    \ vowels) {\n            if i == len(word) - 1 {\n                return \"\"\n\
    \            } else if !isVowel(word[i + 1], vowels) {\n                return\
    \ string(word[i])\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := \"aeiouAEIOU\"\n    for i := len(word) - 1; i >= 0; i-- {\n    \
    \    if strings.Contains(vowels, string(word[i])) {\n            return string(word[i])\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := \"aeiouAEIOU\"\n    for\
    \ i := len(word) - 1; i >= 0; i-- {\n        if strings.Contains(vowels, string(word[i]))\
    \ {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
  "    vowels := \"aeiou\"\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ vowels[strings.Index(vowels, string(word[i]))] != 0 {\n            return string(word[i])\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for\
    \ _, v := range vowels {\n            if word[i] == v[0] {\n                return\
    \ v\n            }\n        }\n    }\n    return \"\"\n}\n", "    var vowels =\
    \ \"aeiou\"\n    var last_vowel_index = -1\n    var last_consonant_index = -1\n\
    \    var closest_vowel = \"\"\n    var closest_distance = 0\n    for i, c := range\
    \ word {\n        if strings.Contains(vowels, string(c)) {\n            if last_consonant_index\
    \ != -1 {\n                if closest_vowel == \"\" || i - last_consonant_index\
    \ < closest_distance {\n                    closest_vowel = string(c)\n      \
    \              closest_distance = i - last_consonant_index\n                }\n\
    \            }\n            last_vowel_index = i\n        } else {\n         \
    \   if last_vowel_index != -1 {\n                last_consonant_index = i\n  \
    \          }\n        }\n    }\n    return closest_vowel\n}\n", "    vowels :=\
    \ []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >=\
    \ 0; i-- {\n        for _, v := range vowels {\n            if word[i] == v[0]\
    \ {\n                return v\n            }\n        }\n    }\n    return \"\"\
    \n}\n", "    vowels := map[string]bool{\n        \"a\": true,\n        \"e\":\
    \ true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n  \
    \  }\n    var closest_vowel string\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if vowels[string(word[i])] {\n            closest_vowel = string(word[i])\n\
    \            break\n        }\n    }\n    if closest_vowel == \"\" {\n       \
    \ return closest_vowel\n    }\n    for i := len(word) - 1; i >= 0; i-- {\n   \
    \     if vowels[string(word[i])] {\n            continue\n        }\n        if\
    \ closest_vowel == string(word[i]) {\n            return \"\"\n        }\n   \
    \     return closest_vowel\n    }\n    return \"\"\n}\n", "    vowels := \"aeiou\"\
    \n    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[strings.Index(vowels,\
    \ string(word[i]))] != -1 {\n            if i == len(word) - 1 {\n           \
    \     return \"\"\n            }\n            if vowels[strings.Index(vowels,\
    \ string(word[i+1]))] == -1 {\n                return string(word[i])\n      \
    \      }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if is_vowel(word[i], vowels) {\n            if i == len(word) - 1 {\n\
    \                return \"\"\n            }\n            if is_vowel(word[i +\
    \ 1], vowels) {\n                continue\n            }\n            return string(word[i])\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for\
    \ _, v := range vowels {\n            if word[i] == v[0] {\n                return\
    \ v\n            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n \
    \               if is_vowel(word[j]) {\n                    return \"\"\n    \
    \            }\n                if is_consonant(word[j]) {\n                 \
    \   return string(word[i])\n                }\n            }\n        }\n    }\n\
    \    return \"\"\n}\n", "    var vowels = []string{\"a\", \"e\", \"i\", \"o\"\
    , \"u\"}\n    var consonants = []string{\"b\", \"c\", \"d\", \"f\", \"g\", \"\
    h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"}\n    var result string\n    var vowel_index int\n\
    \    var consonant_index int\n    var vowel_found bool\n    var consonant_found\
    \ bool\n    var word_length int = len(word)\n    var i int\n\n    for i = word_length\
    \ - 1; i >= 0; i-- {\n        if !vowel_found {\n            vowel_index = get_index(vowels,\
    \ string(word[i]))\n            if vowel_index != -1 {\n                vowel_found\
    \ = true\n            }\n        } else {\n            consonant_index = get_index(consonants,\
    \ string(word[i]))\n            if consonant_index != -1 {\n                consonant_found\
    \ = true\n                break\n            }\n        }\n    }\n\n    if vowel_found\
    \ && consonant_found {\n        result = string(word[i + 1])\n    }\n\n    return\
    \ result\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n \
    \   for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n\
    \            if word[i] == v[0] {\n                return v\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for\
    \ _, v := range vowels {\n            if word[i] == v[0] {\n                return\
    \ v\n            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if contains(vowels, string(word[i])) {\n            for j := i - 1; j\
    \ >= 0; j-- {\n                if contains(vowels, string(word[j])) {\n      \
    \              break\n                }\n                if j == 0 {\n       \
    \             return string(word[i])\n                }\n            }\n     \
    \   }\n    }\n    return \"\"\n}\n", "    // your code here\n    return \"\"\n\
    }\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var closest_vowel\
    \ string\n    var closest_vowel_index int\n    var closest_vowel_distance int\n\
    \    for i, char := range word {\n        if char == 'a' || char == 'e' || char\
    \ == 'i' || char == 'o' || char == 'u' {\n            if closest_vowel_index ==\
    \ 0 {\n                closest_vowel_index = i\n                closest_vowel\
    \ = string(char)\n            } else {\n                if i - closest_vowel_index\
    \ < closest_vowel_distance {\n                    closest_vowel_index = i\n  \
    \                  closest_vowel = string(char)\n                }\n         \
    \   }\n        }\n    }\n    return closest_vowel\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        for _, v := range vowels {\n            if word[i] == v[0] {\n      \
    \          return v\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := map[string]bool{\n        \"a\": true,\n        \"e\": true,\n \
    \       \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    var\
    \ result string\n    for i := len(word) - 1; i >= 0; i-- {\n        if _, ok :=\
    \ vowels[string(word[i])]; ok {\n            result = string(word[i])\n      \
    \      break\n        }\n    }\n    return result\n}\n", "    var vowels = []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    var consonants = []string{\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n    var result string\n\
    \    var first_vowel_index int\n    var first_consonant_index int\n    var last_vowel_index\
    \ int\n    var last_consonant_index int\n    var first_vowel_found bool\n    var\
    \ first_consonant_found bool\n    var last_vowel_found bool\n    var last_consonant_found\
    \ bool\n    var i int\n    var j int\n    var k int\n    var l int\n    for i\
    \ = 0; i < len(word); i++ {\n        for j = 0; j < len(vowels); j++ {\n     \
    \       if word[i:i+1] == vowels[j] {\n                first_vowel_index = i\n\
    \                first_vowel_found = true\n                break\n           \
    \ }\n        }\n        if first_vowel_found {\n            break\n        }\n\
    \    }\n    for k = len(word) - 1; k >= 0; k-- {\n        for l = 0; l < len(vowels);\
    \ l++ {\n            if word[k:k+1] == vowels[l] {\n                last_vowel_index\
    \ = k\n                last_vowel_found = true\n                break\n      \
    \      }\n        }\n        if last_vowel_found {\n            break\n      \
    \  }\n    }\n    if first_vowel_found && last_vowel_found {\n        for i = first_vowel_index\
    \ + 1; i < last_vowel_index; i++ {\n            for j = 0; j < len(consonants);\
    \ j++ {\n                if word[i:i+1] == consonants[j] {\n                 \
    \   first_consonant_index = i\n                   ", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        for _, v := range vowels {\n            if word[i] == v[0] {\n      \
    \          return v\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var consonants\
    \ = []string{\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"\
    z\"}\n    var result string\n    var found bool\n    var index int\n    for i\
    \ := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n      \
    \      if word[i] == v[0] {\n                if i == len(word) - 1 {\n       \
    \             continue\n                }\n                for _, c := range consonants\
    \ {\n                    if word[i + 1] == c[0] {\n                        if\
    \ !found {\n                            result = string(word[i])\n           \
    \                 index = i\n                            found = true\n      \
    \                  } else {\n                            if i > index {\n    \
    \                            result = string(word[i])\n                      \
    \          index = i\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return result\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels\
    \ {\n            if word[i] == v[0] {\n                return v\n            }\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\n  \
    \      \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\"\
    : true,\n        \"u\": true,\n    }\n    var closest_vowel string\n    var closest_vowel_index\
    \ int = -1\n    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            closest_vowel = string(word[i])\n            closest_vowel_index\
    \ = i\n            break\n        }\n    }\n    if closest_vowel_index == -1 {\n\
    \        return \"\"\n    }\n    for i := closest_vowel_index - 1; i >= 0; i--\
    \ {\n        if !vowels[string(word[i])] {\n            return closest_vowel\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := \"aeiouAEIOU\"\n    for\
    \ i := len(word) - 1; i >= 0; i-- {\n        if strings.Contains(vowels, string(word[i]))\
    \ {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
  "    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 1; i >= 0; i-- {\n     \
    \   if strings.Contains(vowels, string(word[i])) {\n            return string(word[i])\n\
    \        }\n    }\n    return \"\"\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
