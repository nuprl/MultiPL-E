name: HumanEval_118_get_closest_vowel
language: go_test.go
prompt: "package get_closest_vowel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// You are given a word. Your task is to find the closest vowel that stands\
  \ between \n// two consonants from the right side of the word (case sensitive).\n\
  // Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n// find any vowel met the above condition. \n// You may assume that the\
  \ given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
  yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
  quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunc get_closest_vowel(word\
  \ string) string {\n"
tests: "func TestGet_Closest_Vowel(t *testing.T) {\n  candidate := get_closest_vowel\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"yogurt\"), expected: \"u\" },\n\
  \     { actual: candidate(\"full\"), expected: \"u\" },\n     { actual: candidate(\"\
  easy\"), expected: \"\" },\n     { actual: candidate(\"eAsy\"), expected: \"\" },\n\
  \     { actual: candidate(\"ali\"), expected: \"\" },\n     { actual: candidate(\"\
  bad\"), expected: \"a\" },\n     { actual: candidate(\"most\"), expected: \"o\"\
  \ },\n     { actual: candidate(\"ab\"), expected: \"\" },\n     { actual: candidate(\"\
  ba\"), expected: \"\" },\n     { actual: candidate(\"quick\"), expected: \"\" },\n\
  \     { actual: candidate(\"anime\"), expected: \"i\" },\n     { actual: candidate(\"\
  Asia\"), expected: \"\" },\n     { actual: candidate(\"Above\"), expected: \"o\"\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for\
    \ i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n        \
    \    for j := i - 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n \
    \                   break\n                }\n                if is_consonant(word[j])\
    \ {\n                    return string(word[i])\n                }\n         \
    \   }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\"\
    , \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n   \
    \     for _, v := range vowels {\n            if word[i] == v[0] {\n         \
    \       if i == len(word) - 1 {\n                    return \"\"\n           \
    \     }\n                return string(word[i])\n            }\n        }\n  \
    \  }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\"\
    , \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i])\
    \ {\n            for j := i - 1; j >= 0; j-- {\n                if is_vowel(word[j])\
    \ {\n                    break\n                }\n                if !is_vowel(word[j])\
    \ {\n                    return string(word[i])\n                }\n         \
    \   }\n        }\n    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\"\
    a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    var prev_char\
    \ string\n    var closest_vowel string\n    for i := len(word) - 1; i >= 0; i--\
    \ {\n        if vowels[string(word[i])] {\n            if prev_char != \"\" &&\
    \ !vowels[prev_char] {\n                closest_vowel = string(word[i])\n    \
    \            break\n            }\n        }\n        prev_char = string(word[i])\n\
    \    }\n    return closest_vowel\n}\n", "    vowels := []string{\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for\
    \ _, v := range vowels {\n            if word[i] == v[0] {\n                return\
    \ v\n            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n \
    \               if is_vowel(word[j]) {\n                    return \"\"\n    \
    \            }\n                if is_consonant(word[j]) {\n                 \
    \   return string(word[i])\n                }\n            }\n        }\n    }\n\
    \    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels\
    \ {\n            if word[i] == v[0] {\n                if i == len(word) - 1 {\n\
    \                    return \"\"\n                }\n                for j :=\
    \ i + 1; j < len(word); j++ {\n                    for _, v := range vowels {\n\
    \                        if word[j] == v[0] {\n                            return\
    \ \"\"\n                        }\n                    }\n                   \
    \ return string(word[i])\n                }\n            }\n        }\n    }\n\
    \    return \"\"\n}\n", "    // TODO: implement\n    return \"\"\n}\n", "    vowels\
    \ := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        if is_consonant(word[i]) {\n            for j := i -\
    \ 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n                 \
    \   return string(word[j])\n                }\n            }\n        }\n    }\n\
    \    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels\
    \ {\n            if word[i] == v[0] {\n                if i == len(word) - 1 {\n\
    \                    return \"\"\n                }\n                if i == 0\
    \ {\n                    return \"\"\n                }\n                for _,\
    \ v := range vowels {\n                    if word[i-1] == v[0] {\n          \
    \              return \"\"\n                    }\n                    if word[i+1]\
    \ == v[0] {\n                        return \"\"\n                    }\n    \
    \            }\n                return string(word[i])\n            }\n      \
    \  }\n    }\n    return \"\"\n}\n", "    var vowels = []string{\"a\", \"e\", \"\
    i\", \"o\", \"u\"}\n    var consonants = []string{\"b\", \"c\", \"d\", \"f\",\
    \ \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n    var result = \"\"\n    var last_consonant\
    \ = \"\"\n    var last_vowel = \"\"\n    var last_vowel_index = 0\n    var last_consonant_index\
    \ = 0\n    for i, char := range word {\n        if contains(vowels, string(char))\
    \ {\n            last_vowel = string(char)\n            last_vowel_index = i\n\
    \        } else if contains(consonants, string(char)) {\n            last_consonant\
    \ = string(char)\n            last_consonant_index = i\n        }\n    }\n   \
    \ if last_vowel_index > last_consonant_index {\n        result = last_vowel\n\
    \    }\n    return result\n}\n", "    vowels := \"aeiou\"\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if vowels[0] == word[i] || vowels[1] == word[i]\
    \ || vowels[2] == word[i] || vowels[3] == word[i] || vowels[4] == word[i] {\n\
    \            if i == len(word) - 1 {\n                return \"\"\n          \
    \  }\n            if vowels[0] != word[i+1] && vowels[1] != word[i+1] && vowels[2]\
    \ != word[i+1] && vowels[3] != word[i+1] && vowels[4] != word[i+1] {\n       \
    \         return string(word[i])\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n\
    \            if word[i] == v[0] {\n                return v\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n           \
    \     if is_vowel(word[j]) {\n                    break\n                }\n \
    \               if is_consonant(word[j]) {\n                    return string(word[i])\n\
    \                }\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result string\n\
    \    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n \
    \           result = string(word[i])\n            break\n        }\n    }\n  \
    \  return result\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels\
    \ {\n            if word[i] == v[0] {\n                return v\n            }\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for\
    \ _, v := range vowels {\n            if word[i] == v[0] {\n                return\
    \ v\n            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n \
    \               if is_vowel(word[j]) {\n                    break\n          \
    \      }\n                if is_consonant(word[j]) {\n                    return\
    \ string(word[i])\n                }\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := \"aeiou\"\n    for i := len(word) - 1; i >= 0; i--\
    \ {\n        if strings.Contains(vowels, string(word[i])) {\n            return\
    \ string(word[i])\n        }\n    }\n    return \"\"\n}\n", "    vowels := \"\
    aeiouAEIOU\"\n    for i := len(word) - 1; i >= 0; i-- {\n        if strings.Contains(vowels,\
    \ string(word[i])) {\n            if i == len(word) - 1 {\n                continue\n\
    \            }\n            if !strings.Contains(vowels, string(word[i+1])) {\n\
    \                return string(word[i])\n            }\n        }\n    }\n   \
    \ return \"\"\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
