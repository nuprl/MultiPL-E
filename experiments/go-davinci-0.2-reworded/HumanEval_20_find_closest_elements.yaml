name: HumanEval_20_find_closest_elements
language: go_test.go
prompt: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n// other and return them in order (smaller number,\
  \ larger number).\n// >>> find_closest_elements([]float64{1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
  \ []float64) []interface{} {\n"
tests: "func TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
  \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
  \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
  \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
  \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
  \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var difference float64\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference =\
    \ numbers[j] - numbers[i]\n            if closest_difference == 0 || closest_difference\
    \ > difference {\n                closest_difference = difference\n          \
    \      closest_elements = []interface{}{numbers[i], numbers[j]}\n            }\n\
    \        }\n    }\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var smallest_difference float64\n    var current_difference\
    \ float64\n    var previous_number float64\n    var current_number float64\n\n\
    \    for _, current_number = range numbers {\n        if previous_number != 0\
    \ {\n            current_difference = current_number - previous_number\n     \
    \       if smallest_difference == 0 || current_difference < smallest_difference\
    \ {\n                smallest_difference = current_difference\n              \
    \  closest_elements = []interface{}{previous_number, current_number}\n       \
    \     }\n        }\n        previous_number = current_number\n    }\n\n    return\
    \ closest_elements\n}\n", "    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    var diff float64\n    var smaller_number float64\n    var larger_number\
    \ float64\n\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i +\
    \ 1; j < len(numbers); j++ {\n            if numbers[i] < numbers[j] {\n     \
    \           smaller_number = numbers[i]\n                larger_number = numbers[j]\n\
    \            } else {\n                smaller_number = numbers[j]\n         \
    \       larger_number = numbers[i]\n            }\n            diff = larger_number\
    \ - smaller_number\n            if closest_diff == 0 || diff < closest_diff {\n\
    \                closest_diff = diff\n                closest_elements = []interface{}{smaller_number,\
    \ larger_number}\n            }\n        }\n    }\n    return closest_elements\n\
    }\n", "    var closest []interface{}\n    var smallest_difference float64\n  \
    \  var smallest_difference_index int\n\n    for i := 0; i < len(numbers) - 1;\
    \ i++ {\n        difference := numbers[i+1] - numbers[i]\n        if i == 0 ||\
    \ difference < smallest_difference {\n            smallest_difference = difference\n\
    \            smallest_difference_index = i\n        }\n    }\n\n    closest =\
    \ append(closest, numbers[smallest_difference_index])\n    closest = append(closest,\
    \ numbers[smallest_difference_index+1])\n\n    return closest\n}\n", "    var\
    \ closest_elements []interface{}\n    var closest_difference float64 = 0.0\n \
    \   var current_difference float64 = 0.0\n    var current_element float64 = 0.0\n\
    \    var previous_element float64 = 0.0\n\n    for i, current_element := range\
    \ numbers {\n        if i == 0 {\n            previous_element = current_element\n\
    \            continue\n        }\n\n        current_difference = current_element\
    \ - previous_element\n        if closest_difference == 0.0 || current_difference\
    \ < closest_difference {\n            closest_difference = current_difference\n\
    \            closest_elements = []interface{}{previous_element, current_element}\n\
    \        }\n\n        previous_element = current_element\n    }\n\n    return\
    \ closest_elements\n}\n", "    var closest []interface{}\n    var closestDiff\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n     \
    \       if closestDiff == 0 || diff < closestDiff {\n                closestDiff\
    \ = diff\n                closest = []interface{}{numbers[i], numbers[j]}\n  \
    \          }\n        }\n    }\n    return closest\n}\n", "    if len(numbers)\
    \ < 2 {\n        return []interface{}{}\n    }\n    var closest_difference float64\
    \ = numbers[1] - numbers[0]\n    var closest_numbers []interface{} = []interface{}{numbers[0],\
    \ numbers[1]}\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n\
    \            if difference < closest_difference {\n                closest_difference\
    \ = difference\n                closest_numbers = []interface{}{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n    return closest_numbers\n}\n", "    var closest_elements\
    \ []interface{}\n    var smallest_difference float64\n    var smallest_difference_index\
    \ int\n    for i := 0; i < len(numbers) - 1; i++ {\n        difference := numbers[i\
    \ + 1] - numbers[i]\n        if i == 0 || difference < smallest_difference {\n\
    \            smallest_difference = difference\n            smallest_difference_index\
    \ = i\n        }\n    }\n    closest_elements = append(closest_elements, numbers[smallest_difference_index])\n\
    \    closest_elements = append(closest_elements, numbers[smallest_difference_index\
    \ + 1])\n    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_difference float64 = numbers[1] - numbers[0]\n    for i := 0;\
    \ i < len(numbers) - 1; i++ {\n        difference := numbers[i + 1] - numbers[i]\n\
    \        if difference < closest_difference {\n            closest_difference\
    \ = difference\n            closest_elements = []interface{}{numbers[i], numbers[i\
    \ + 1]}\n        }\n    }\n    return closest_elements\n}\n", "    var result\
    \ []interface{}\n    var minDiff float64 = numbers[1] - numbers[0]\n    var minDiffIndex\
    \ int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        diff := numbers[i\
    \ + 1] - numbers[i]\n        if diff < minDiff {\n            minDiff = diff\n\
    \            minDiffIndex = i\n        }\n    }\n    result = append(result, numbers[minDiffIndex])\n\
    \    result = append(result, numbers[minDiffIndex + 1])\n    return result\n}\n",
  "    var closest_elements []interface{}\n    var closest_diff float64 = numbers[1]\
    \ - numbers[0]\n    var closest_index int = 0\n    for i := 1; i < len(numbers)\
    \ - 1; i++ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < closest_diff\
    \ {\n            closest_diff = diff\n            closest_index = i\n        }\n\
    \    }\n    closest_elements = append(closest_elements, numbers[closest_index])\n\
    \    closest_elements = append(closest_elements, numbers[closest_index + 1])\n\
    \    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_difference float64\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference :=\
    \ numbers[j] - numbers[i]\n            if closest_difference == 0 || difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_elements = []interface{}{numbers[i], numbers[j]}\n    \
    \        }\n        }\n    }\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_diff float64\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            diff\
    \ := numbers[j] - numbers[i]\n            if closest_diff == 0 || diff < closest_diff\
    \ {\n                closest_elements = []interface{}{numbers[i], numbers[j]}\n\
    \                closest_diff = diff\n            }\n        }\n    }\n    return\
    \ closest_elements\n}\n", "    var closest_elements []interface{}\n    var closest_diff\
    \ float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < closest_diff\
    \ {\n            closest_diff = diff\n            closest_elements = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest_elements\n}\n", "    var\
    \ closest_elements []interface{}\n    var closest_difference float64 = numbers[1]\
    \ - numbers[0]\n    var closest_elements_indexes []int = []int{0, 1}\n    for\
    \ i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            if numbers[j] - numbers[i] < closest_difference {\n     \
    \           closest_difference = numbers[j] - numbers[i]\n                closest_elements_indexes\
    \ = []int{i, j}\n            }\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ numbers[closest_elements_indexes[0]])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_elements_indexes[1]])\n    return closest_elements\n}\n", " \
    \   var closest_pair []interface{}\n    var smallest_diff float64 = numbers[1]\
    \ - numbers[0]\n    var smallest_diff_pair []float64 = []float64{numbers[0], numbers[1]}\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        diff := numbers[i + 1] -\
    \ numbers[i]\n        if diff < smallest_diff {\n            smallest_diff = diff\n\
    \            smallest_diff_pair = []float64{numbers[i], numbers[i + 1]}\n    \
    \    }\n    }\n    closest_pair = append(closest_pair, smallest_diff_pair[0])\n\
    \    closest_pair = append(closest_pair, smallest_diff_pair[1])\n    return closest_pair\n\
    }\n", "    var closest_elements []interface{}\n    var closest_difference float64\
    \ = numbers[1] - numbers[0]\n    var closest_index int = 0\n    var current_difference\
    \ float64\n    for i := 1; i < len(numbers) - 1; i++ {\n        current_difference\
    \ = numbers[i + 1] - numbers[i]\n        if current_difference < closest_difference\
    \ {\n            closest_difference = current_difference\n            closest_index\
    \ = i\n        }\n    }\n    closest_elements = append(closest_elements, numbers[closest_index])\n\
    \    closest_elements = append(closest_elements, numbers[closest_index + 1])\n\
    \    return closest_elements\n}\n", "    var closest []interface{}\n    var diff\
    \ float64\n    var closest_diff float64\n    var closest_index int\n\n    for\
    \ i, number := range numbers {\n        if i == 0 {\n            closest_diff\
    \ = number - numbers[i+1]\n            closest_index = i\n        } else if i\
    \ == len(numbers) - 1 {\n            diff = numbers[i-1] - number\n          \
    \  if diff < closest_diff {\n                closest_diff = diff\n           \
    \     closest_index = i\n            }\n        } else {\n            diff = number\
    \ - numbers[i+1]\n            if diff < closest_diff {\n                closest_diff\
    \ = diff\n                closest_index = i\n            }\n        }\n    }\n\
    \n    closest = append(closest, numbers[closest_index])\n    closest = append(closest,\
    \ numbers[closest_index+1])\n\n    return closest\n}\n", "    var closest []interface{}\n\
    \    var smallestDifference float64 = numbers[1] - numbers[0]\n    for i := 0;\
    \ i < len(numbers) - 1; i++ {\n        difference := numbers[i + 1] - numbers[i]\n\
    \        if difference < smallestDifference {\n            smallestDifference\
    \ = difference\n            closest = []interface{}{numbers[i], numbers[i + 1]}\n\
    \        }\n    }\n    return closest\n}\n", "    var closest []interface{}\n\
    \    var closest_diff float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < closest_diff\
    \ {\n            closest_diff = diff\n            closest = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
