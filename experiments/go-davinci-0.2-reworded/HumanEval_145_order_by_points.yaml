name: HumanEval_145_order_by_points
language: go_test.go
prompt: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Write a function which sorts the given list of integers\n// in ascending\
  \ order according to the sum of their digits.\n// Note: if there are several items\
  \ with similar sum of their digits,\n// order them based on their index in original\
  \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n//\
  \ []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
  \ order_by_points(nums []int) []int {\n"
tests: "func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
  \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
  \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6,\
  \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
  \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
  \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7,\
  \ 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
  \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
  t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(nums) == 0 {\n        return nums\n    }\n    // TODO: implement\
    \ the function\n    return nums\n}\n", "    // TODO: implement\n    return nums\n\
    }\n", "    // TODO: implement this function\n    return []int{}\n}\n", "    return\
    \ nums\n}\n", "    // TODO: implement this function\n    return nil\n}\n", " \
    \   return nums\n}\n", "    // TODO: implement this function\n    return nil\n\
    }\n", "    // TODO: implement\n    return nil\n}\n", "    // TODO: implement this\
    \ function\n    return nil\n}\n", "    // your code here\n    return nums\n}\n",
  "    // your code here\n    return nums\n}\n", "    return []int{}\n}\n", "    //\
    \ TODO: implement this function\n    return []int{}\n}\n", "    // TODO: implement\
    \ this function\n    return nil\n}\n", "    // TODO: implement this function\n\
    \    return nil\n}\n", "    // TODO: implement this function\n    return []int{}\n\
    }\n", "    // TODO: Implement the function\n    return []int{}\n}\n", "    //\
    \ TODO: implement this function\n    return []int{}\n}\n", "    if len(nums) ==\
    \ 0 {\n        return nums\n    }\n    // TODO: Implement me!\n    return nums\n\
    }\n", "    // TODO: implement this function\n    return nil\n}\n", "    // TODO:\
    \ implement this function\n    return nil\n}\n", "    // TODO: implement this\
    \ function\n    return nil\n}\n", "    return nums\n}\n", "    if len(nums) ==\
    \ 0 {\n        return nums\n    }\n    for i := 0; i < len(nums); i++ {\n    \
    \    for j := i + 1; j < len(nums); j++ {\n            if sum_digits(nums[i])\
    \ > sum_digits(nums[j]) {\n                nums[i], nums[j] = nums[j], nums[i]\n\
    \            }\n        }\n    }\n    return nums\n}\n", "    return nums\n}\n",
  "    if len(nums) == 0 {\n        return nums\n    }\n    for i := 0; i < len(nums);\
    \ i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if sum_digits(nums[i])\
    \ > sum_digits(nums[j]) {\n                nums[i], nums[j] = nums[j], nums[i]\n\
    \            }\n        }\n    }\n    return nums\n}\n", "    // TODO: implement\
    \ this function\n    return nil\n}\n", "    return []int{}\n}\n", "    // TODO:\
    \ implement the function\n    return nil\n}\n", "    // TODO: implement this function\n\
    \    return nil\n}\n", "    return nums\n}\n", "    // TODO: implement me\n  \
    \  return nums\n}\n", "    // TODO: implement this function\n    return []int{}\n\
    }\n", "    // TODO: implement this function\n    return []int{}\n}\n", "    return\
    \ nums\n}\n", "    return []int{}\n}\n", "    // TODO: implement this function\n\
    \    return []int{}\n}\n", "    // TODO: implement\n    return nums\n}\n", " \
    \   return nums\n}\n", "    return nil\n}\n", "    if len(nums) == 0 {\n     \
    \   return nums\n    }\n    // create a map of sum of digits to list of numbers\n\
    \    // with that sum\n    sums := make(map[int][]int)\n    for _, num := range\
    \ nums {\n        sum := 0\n        for num != 0 {\n            sum += num % 10\n\
    \            num /= 10\n        }\n        sums[sum] = append(sums[sum], num)\n\
    \    }\n    // get a list of all the sums\n    keys := make([]int, 0, len(sums))\n\
    \    for key := range sums {\n        keys = append(keys, key)\n    }\n    //\
    \ sort the sums\n    for i := 0; i < len(keys) - 1; i++ {\n        for j := i\
    \ + 1; j < len(keys); j++ {\n            if keys[i] > keys[j] {\n            \
    \    keys[i], keys[j] = keys[j], keys[i]\n            }\n        }\n    }\n  \
    \  // create a list of numbers in sorted order\n    sorted := make([]int, 0, len(nums))\n\
    \    for _, key := range keys {\n        for _, num := range sums[key] {\n   \
    \         sorted = append(sorted, num)\n        }\n    }\n    return sorted\n\
    }\n", "    return nums\n}\n", "    return nums\n}\n", "    // TODO: implement\
    \ the function\n    return nil\n}\n", "    // TODO: implement this function\n\
    \    return []int{}\n}\n", "    // TODO: implement\n    return nums\n}\n", " \
    \   // TODO: implement this function\n    return nil\n}\n", "    // TODO: implement\
    \ this function\n    return nil\n}\n", "    // TODO: implement\n    return nil\n\
    }\n", "    // TODO: implement this function\n    return []int{}\n}\n", "    //\
    \ TODO: implement this function\n    return []int{}\n}\n", "    if len(nums) ==\
    \ 0 {\n        return nums\n    }\n    for i := 0; i < len(nums); i++ {\n    \
    \    for j := i + 1; j < len(nums); j++ {\n            if sum(nums[i]) > sum(nums[j])\
    \ {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n    \
    \    }\n    }\n    return nums\n}\n", "    return nums\n}\n", "    return []int{}\n\
    }\n", "    // TODO: implement this function\n    return []int{}\n}\n", "    return\
    \ nil\n}\n", "    // TODO: implement this function\n    return []int{}\n}\n",
  "    return nums\n}\n", "    return nil\n}\n", "    if len(nums) == 0 {\n      \
    \  return nums\n    }\n    // TODO: implement the function\n    return nums\n\
    }\n", "    if len(nums) == 0 {\n        return nums\n    }\n    var sum [][]int\n\
    \    for i, v := range nums {\n        sum = append(sum, []int{v, i})\n    }\n\
    \    for i := 0; i < len(sum); i++ {\n        for j := i + 1; j < len(sum); j++\
    \ {\n            if sum[i][0] > sum[j][0] {\n                sum[i], sum[j] =\
    \ sum[j], sum[i]\n            }\n        }\n    }\n    for i := 0; i < len(sum);\
    \ i++ {\n        for j := i + 1; j < len(sum); j++ {\n            if sum[i][0]\
    \ == sum[j][0] {\n                if sum[i][1] > sum[j][1] {\n               \
    \     sum[i], sum[j] = sum[j], sum[i]\n                }\n            }\n    \
    \    }\n    }\n    var result []int\n    for _, v := range sum {\n        result\
    \ = append(result, v[0])\n    }\n    return result\n}\n", "    // TODO: implement\n\
    \    return nil\n}\n", "    // TODO: implement this function\n    return []int{}\n\
    }\n", "    return []int{}\n}\n", "    // TODO: implement\n    return nums\n}\n",
  "    // TODO: implement\n    return nil\n}\n", "    // TODO: implement\n    return\
    \ nums\n}\n", "    return []int{}\n}\n", "    return nums\n}\n", "    return nums\n\
    }\n", "    // TODO: implement this function\n    return nil\n}\n", "    // TODO:\
    \ implement this function\n    return nil\n}\n", "    return nil\n}\n", "    //\
    \ TODO: implement me\n    return nil\n}\n", "    // TODO: implement this function\n\
    \    return []int{}\n}\n", "    return []int{}\n}\n", "    return nums\n}\n",
  "    // TODO: implement this function\n    return nil\n}\n", "    return nums\n\
    }\n", "    // TODO: implement\n    return nil\n}\n", "    return nums\n}\n", " \
    \   if len(nums) == 0 {\n        return nums\n    }\n    // create a map to store\
    \ the sum of digits\n    sum_map := make(map[int]int)\n    // create a map to\
    \ store the index of the number\n    index_map := make(map[int]int)\n    for i,\
    \ num := range nums {\n        sum := 0\n        for num != 0 {\n            sum\
    \ += num % 10\n            num /= 10\n        }\n        sum_map[i] = sum\n  \
    \      index_map[i] = i\n    }\n    // sort the map by sum of digits\n    for\
    \ i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n\
    \            if sum_map[i] > sum_map[j] {\n                sum_map[i], sum_map[j]\
    \ = sum_map[j], sum_map[i]\n                index_map[i], index_map[j] = index_map[j],\
    \ index_map[i]\n            }\n        }\n    }\n    // sort the original list\n\
    \    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums);\
    \ j++ {\n            if index_map[i] > index_map[j] {\n                index_map[i],\
    \ index_map[j] = index_map[j], index_map[i]\n                nums[i], nums[j]\
    \ = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n",
  "    // TODO: implement the function\n    return nums\n}\n", "    // TODO: implement\n\
    \    return nil\n}\n", "    // TODO: implement\n    return nums\n}\n", "    //\
    \ TODO: implement the function\n    return nil\n}\n", "    return nums\n}\n",
  "    // TODO: implement\n    return nil\n}\n", "    // your code here\n    return\
    \ nums\n}\n", "    // TODO: implement this function\n    return []int{}\n}\n",
  "    return nums\n}\n", "    // TODO: implement this function\n    return nil\n\
    }\n", "    return nil\n}\n", "    return nums\n}\n", "    // TODO: Implement me\n\
    \    return []int{}\n}\n", "    return []int{}\n}\n", "    var sum_map = make(map[int]int)\n\
    \    var index_map = make(map[int]int)\n    var sum_list []int\n    for i, v :=\
    \ range nums {\n        sum := 0\n        for v > 0 {\n            sum += v %\
    \ 10\n            v /= 10\n        }\n        sum_map[sum] = i\n        index_map[i]\
    \ = sum\n        sum_list = append(sum_list, sum)\n    }\n    fmt.Println(sum_map)\n\
    \    fmt.Println(index_map)\n    fmt.Println(sum_list)\n    return nums\n}\n",
  "    return nums\n}\n", "    // TODO: implement this function\n    return []int{}\n\
    }\n", "    return nil\n}\n", "    // TODO: implement this function\n    return\
    \ nil\n}\n", "    // TODO: implement this function\n    return nil\n}\n", "  \
    \  return nil\n}\n", "    return nums\n}\n", "    return nums\n}\n", "    return\
    \ nil\n}\n", "    return nums\n}\n", "    // TODO: implement\n    return nil\n\
    }\n", "    return nums\n}\n", "    // TODO: implement this function\n    return\
    \ nil\n}\n", "    if len(nums) == 0 {\n        return nums\n    }\n    // create\
    \ a map of sum of digits to list of numbers\n    // with that sum\n    sum_to_nums\
    \ := make(map[int][]int)\n    for _, num := range nums {\n        sum := 0\n \
    \       for num != 0 {\n            sum += num % 10\n            num /= 10\n \
    \       }\n        sum_to_nums[sum] = append(sum_to_nums[sum], num)\n    }\n \
    \   // create a list of sums\n    sums := make([]int, 0, len(sum_to_nums))\n \
    \   for sum := range sum_to_nums {\n        sums = append(sums, sum)\n    }\n\
    \    // sort the list of sums\n    for i := 0; i < len(sums); i++ {\n        for\
    \ j := i + 1; j < len(sums); j++ {\n            if sums[i] > sums[j] {\n     \
    \           sums[i], sums[j] = sums[j], sums[i]\n            }\n        }\n  \
    \  }\n    // create the result list\n    result := make([]int, 0, len(nums))\n\
    \    for _, sum := range sums {\n        for _, num := range sum_to_nums[sum]\
    \ {\n            result = append(result, num)\n        }\n    }\n    return result\n\
    }\n", "    // Write your code here\n    return nums\n}\n", "    return []int{}\n\
    }\n", "    // TODO: implement the function\n    return nums\n}\n", "    // TODO:\
    \ implement\n    return nil\n}\n", "    // TODO: implement\n    return nil\n}\n",
  "    // TODO: implement\n    return nums\n}\n", "    // TODO: implement\n    return\
    \ nil\n}\n", "    // TODO: implement\n    return nil\n}\n", "    // TODO: implement\
    \ the function\n    return nums\n}\n", "    // TODO: implement me\n    return\
    \ nil\n}\n", "    // TODO: implement this function\n    return nil\n}\n", "  \
    \  // TODO: implement the function\n    return nil\n}\n", "    // TODO: implement\
    \ this function\n    return []int{}\n}\n", "    return nums\n}\n", "    // TODO:\
    \ implement\n    return nums\n}\n", "    if len(nums) == 0 {\n        return nums\n\
    \    }\n    // create a map to store the sum of digits\n    sum_map := make(map[int]int)\n\
    \    // create a map to store the index of the number\n    index_map := make(map[int]int)\n\
    \    for i, num := range nums {\n        sum := 0\n        for num != 0 {\n  \
    \          sum += num % 10\n            num /= 10\n        }\n        sum_map[i]\
    \ = sum\n        index_map[i] = i\n    }\n    // sort the map by value\n    for\
    \ i := 0; i < len(nums) - 1; i++ {\n        for j := i + 1; j < len(nums); j++\
    \ {\n            if sum_map[i] > sum_map[j] {\n                sum_map[i], sum_map[j]\
    \ = sum_map[j], sum_map[i]\n                index_map[i], index_map[j] = index_map[j],\
    \ index_map[i]\n            }\n        }\n    }\n    // create a new list to store\
    \ the result\n    result := make([]int, len(nums))\n    for i, _ := range nums\
    \ {\n        result[i] = nums[index_map[i]]\n    }\n    return result\n}\n", " \
    \   // TODO: implement this function\n    return nil\n}\n", "    return []int{}\n\
    }\n", "    if len(nums) == 0 {\n        return nums\n    }\n    // create a map\
    \ to store the sum of digits of each number\n    sum_map := make(map[int]int)\n\
    \    for _, num := range nums {\n        sum_map[num] = sum_digits(num)\n    }\n\
    \    // create a map to store the index of each number\n    index_map := make(map[int]int)\n\
    \    for index, num := range nums {\n        index_map[num] = index\n    }\n \
    \   // sort the numbers based on their sum of digits\n    for i := 0; i < len(nums);\
    \ i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if sum_map[nums[i]]\
    \ > sum_map[nums[j]] {\n                nums[i], nums[j] = nums[j], nums[i]\n\
    \            } else if sum_map[nums[i]] == sum_map[nums[j]] {\n              \
    \  if index_map[nums[i]] > index_map[nums[j]] {\n                    nums[i],\
    \ nums[j] = nums[j], nums[i]\n                }\n            }\n        }\n  \
    \  }\n    return nums\n}\n", "    if len(nums) == 0 {\n        return nums\n \
    \   }\n    var sum_map = make(map[int]int)\n    for i, v := range nums {\n   \
    \     sum_map[i] = sum_digits(v)\n    }\n    var sorted_nums = make([]int, len(nums))\n\
    \    for i, v := range nums {\n        var min_sum = sum_map[i]\n        var min_index\
    \ = i\n        for j, v := range sum_map {\n            if v < min_sum {\n   \
    \             min_sum = v\n                min_index = j\n            }\n    \
    \    }\n        sorted_nums[i] = nums[min_index]\n        delete(sum_map, min_index)\n\
    \    }\n    return sorted_nums\n}\n", "    // TODO: implement this function\n\
    \    return []int{}\n}\n", "    if len(nums) == 0 {\n        return nums\n   \
    \ }\n    numsMap := make(map[int][]int)\n    for i, num := range nums {\n    \
    \    sum := 0\n        for num > 0 {\n            sum += num % 10\n          \
    \  num /= 10\n        }\n        numsMap[sum] = append(numsMap[sum], i)\n    }\n\
    \    result := make([]int, len(nums))\n    i := 0\n    for _, v := range numsMap\
    \ {\n        for _, index := range v {\n            result[i] = nums[index]\n\
    \            i++\n        }\n    }\n    return result\n}\n", "    if len(nums)\
    \ == 0 {\n        return nums\n    }\n    for i := 0; i < len(nums); i++ {\n \
    \       for j := i + 1; j < len(nums); j++ {\n            if sum_of_digits(nums[i])\
    \ > sum_of_digits(nums[j]) {\n                nums[i], nums[j] = nums[j], nums[i]\n\
    \            }\n        }\n    }\n    return nums\n}\n", "    // Write your code\
    \ here\n    return nil\n}\n", "    return nums\n}\n", "    // TODO: implement\n\
    \    return nums\n}\n", "    // TODO: implement this function\n    return nil\n\
    }\n", "    if len(nums) == 0 {\n        return nums\n    }\n    // sort by sum\
    \ of digits\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j <\
    \ len(nums); j++ {\n            if sum_of_digits(nums[i]) > sum_of_digits(nums[j])\
    \ {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n    \
    \    }\n    }\n    // sort by index\n    for i := 0; i < len(nums); i++ {\n  \
    \      for j := i + 1; j < len(nums); j++ {\n            if sum_of_digits(nums[i])\
    \ == sum_of_digits(nums[j]) && i > j {\n                nums[i], nums[j] = nums[j],\
    \ nums[i]\n            }\n        }\n    }\n    return nums\n}\n", "    return\
    \ nums\n}\n", "    return nums\n}\n", "    return nums\n}\n", "    // TODO: implement\
    \ me\n    return nums\n}\n", "    // TODO: implement this function\n    return\
    \ nil\n}\n", "    return []int{}\n}\n", "    // TODO: implement this function\n\
    \    return []int{}\n}\n", "    // TODO: implement\n    return nums\n}\n", " \
    \   return nums\n}\n", "    return nil\n}\n", "    // your code here\n    return\
    \ nums\n}\n", "    // your code here\n    return nums\n}\n", "    // TODO: implement\
    \ the function\n    return nil\n}\n", "    return nums\n}\n", "    // TODO: implement\n\
    \    return nil\n}\n", "    if len(nums) == 0 {\n        return nums\n    }\n\
    \    // TODO: implement the function\n    return nums\n}\n", "    // TODO: implement\n\
    \    return nums\n}\n", "    if len(nums) == 0 {\n        return nums\n    }\n\
    \    // sort by sum of digits\n    sums := make([]int, len(nums))\n    for i,\
    \ n := range nums {\n        sums[i] = sum_digits(n)\n    }\n    for i := 0; i\
    \ < len(sums); i++ {\n        for j := i + 1; j < len(sums); j++ {\n         \
    \   if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n\
    \                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n\
    \    }\n    return nums\n}\n", "    return nums\n}\n", "    // TODO: implement\n\
    \    return nil\n}\n", "    if len(nums) == 0 {\n        return nums\n    }\n\
    \    // TODO: implement\n    return nil\n}\n", "    // TODO: implement this function\n\
    \    return []int{}\n}\n", "    return nums\n}\n", "    // TODO: implement this\
    \ function\n    return nil\n}\n", "    return nil\n}\n", "    // TODO: implement\
    \ the function\n    return nil\n}\n", "    // TODO: implement\n    return nums\n\
    }\n", "    // TODO: implement\n    return nil\n}\n", "    if len(nums) == 0 {\n\
    \        return nums\n    }\n    // sort by sum of digits\n    for i := 0; i <\
    \ len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n           \
    \ if sum_of_digits(nums[i]) > sum_of_digits(nums[j]) {\n                nums[i],\
    \ nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    // sort by\
    \ index\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums);\
    \ j++ {\n            if sum_of_digits(nums[i]) == sum_of_digits(nums[j]) && i\
    \ > j {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n\
    \        }\n    }\n    return nums\n}\n", "    // TODO: implement\n    return\
    \ nil\n}\n", "    return nums\n}\n", "    // TODO: implement this function\n \
    \   return nil\n}\n", "    // TODO: implement this function\n    return nil\n\
    }\n", "    return []int{}\n}\n", "    // TODO: implement this function\n    return\
    \ []int{}\n}\n", "    // TODO: implement\n    return nil\n}\n", "    // TODO:\
    \ implement this function\n    return []int{}\n}\n", "    return nil\n}\n", " \
    \   if len(nums) == 0 {\n        return nums\n    }\n    nums_map := make(map[int][]int)\n\
    \    for i, num := range nums {\n        sum := 0\n        for num > 0 {\n   \
    \         sum += num % 10\n            num /= 10\n        }\n        nums_map[sum]\
    \ = append(nums_map[sum], i)\n    }\n    result := make([]int, len(nums))\n  \
    \  index := 0\n    for i := 0; i < len(nums); i++ {\n        for _, num := range\
    \ nums_map[i] {\n            result[index] = nums[num]\n            index++\n\
    \        }\n    }\n    return result\n}\n", "    // TODO: implement this function\n\
    \    return []int{}\n}\n", "    // TODO: implement this function\n    return []int{}\n\
    }\n", "    return nil\n}\n", "    // your code here\n    return nums\n}\n", " \
    \   // TODO: implement this function\n    return nil\n}\n", "    if len(nums)\
    \ == 0 {\n        return nums\n    }\n    var sum_map = make(map[int]int)\n  \
    \  for i, num := range nums {\n        sum_map[num] = sum_digits(num)\n    }\n\
    \    fmt.Println(sum_map)\n    return nums\n}\n", "    // TODO: implement it\n\
    \    return nil\n}\n", "    // TODO: implement this function\n    return []int{}\n\
    }\n", "    // TODO: implement this function\n    return []int{}\n}\n", "    //\
    \ TODO: implement\n    return nil\n}\n", "    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    // create a map to store the sum of digits and the index of\
    \ the number\n    sum_map := make(map[int][]int)\n    for i, num := range nums\
    \ {\n        sum := 0\n        for num != 0 {\n            sum += num % 10\n \
    \           num /= 10\n        }\n        sum_map[sum] = append(sum_map[sum],\
    \ i)\n    }\n    // sort the keys\n    keys := make([]int, 0, len(sum_map))\n\
    \    for k := range sum_map {\n        keys = append(keys, k)\n    }\n    for\
    \ i := 0; i < len(keys) - 1; i++ {\n        for j := i + 1; j < len(keys); j++\
    \ {\n            if keys[i] > keys[j] {\n                keys[i], keys[j] = keys[j],\
    \ keys[i]\n            }\n        }\n    }\n    // sort the numbers\n    sorted_nums\
    \ := make([]int, len(nums))\n    for i, key := range keys {\n        for _, index\
    \ := range sum_map[key] {\n            sorted_nums[i] = nums[index]\n        \
    \    i++\n        }\n    }\n    return sorted_nums\n}\n", "    // TODO: implement\
    \ this function\n    return nil\n}\n", "    return nums\n}\n", "    return nums\n\
    }\n", "    return nums\n}\n", "    // TODO: implement this function\n    return\
    \ []int{}\n}\n", "    // TODO: implement the function\n    return nums\n}\n",
  "    // TODO: implement\n    return nums\n}\n", "    // TODO: implement\n    return\
    \ nil\n}\n", "    if len(nums) == 0 {\n        return nums\n    }\n    // create\
    \ a map of sum of digits to list of numbers\n    sum_to_nums := make(map[int][]int)\n\
    \    for i, num := range nums {\n        sum := 0\n        for num != 0 {\n  \
    \          sum += num % 10\n            num /= 10\n        }\n        sum_to_nums[sum]\
    \ = append(sum_to_nums[sum], i)\n    }\n    // sort the keys\n    keys := make([]int,\
    \ 0, len(sum_to_nums))\n    for key := range sum_to_nums {\n        keys = append(keys,\
    \ key)\n    }\n    sort.Ints(keys)\n    // create the result\n    result := make([]int,\
    \ len(nums))\n    i := 0\n    for _, key := range keys {\n        for _, index\
    \ := range sum_to_nums[key] {\n            result[i] = nums[index]\n         \
    \   i++\n        }\n    }\n    return result\n}\n", "    if len(nums) == 0 {\n\
    \        return nums\n    }\n    // create a map of sum of digits to list of numbers\n\
    \    // with that sum\n    sum_to_nums := make(map[int][]int)\n    for _, num\
    \ := range nums {\n        sum := 0\n        for num != 0 {\n            sum +=\
    \ num % 10\n            num /= 10\n        }\n        sum_to_nums[sum] = append(sum_to_nums[sum],\
    \ num)\n    }\n    // sort the keys\n    keys := make([]int, 0, len(sum_to_nums))\n\
    \    for key := range sum_to_nums {\n        keys = append(keys, key)\n    }\n\
    \    for i := 0; i < len(keys) - 1; i++ {\n        for j := i + 1; j < len(keys);\
    \ j++ {\n            if keys[i] > keys[j] {\n                keys[i], keys[j]\
    \ = keys[j], keys[i]\n            }\n        }\n    }\n    // create the result\n\
    \    result := make([]int, 0, len(nums))\n    for _, key := range keys {\n   \
    \     for _, num := range sum_to_nums[key] {\n            result = append(result,\
    \ num)\n        }\n    }\n    return result\n}\n", "    // TODO: implement this\
    \ function\n    return []int{}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
