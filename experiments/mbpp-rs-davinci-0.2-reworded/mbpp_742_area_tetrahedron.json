{
  "name": "mbpp_742_area_tetrahedron",
  "language": "rs",
  "prompt": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0_f64;\n    area",
    "    let a = side as f64;\n    let s = a * a.sqrt();\n    let area = (s * s * s.sqrt()) / 12.0;\n    area",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt() / 2.0",
    "    let s = side as f64;\n    let area = (s.powi(2) * (s.powi(2) - 2.0 * s + 2.0).sqrt()).sqrt();\n    area",
    "    let s = side as f64;\n    let a = (s.powi(2) * (3.0_f64.sqrt())) / 4.0;\n    a",
    "    let area = ((side as f64).powi(2) * (3.0_f64).sqrt() / 4.0).powi(2);\n    area",
    "    let area = (3.0 * (side as f64).powi(2) * (3.0_f64.sqrt() / 2.0)).sqrt();\n    area",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s.powi(2) * 3.0_f64.sqrt()",
    "    let a = side as f64;\n    let area = (a.powi(2) * (3.0_f64).sqrt() / 4.0).powi(2);\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let s = side as f64;\n    let area = (s.powi(2) * (3.0_f64.sqrt())) / 4.0;\n    area",
    "    let area = ((3.0f64).sqrt() / 4.0) * (side as f64).powi(2);\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    (s * s * s * 3.0_f64.sqrt() / 2.0).round()",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area / 4.0",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt()",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powf(2.0) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = (3.0 * (side as f64).powi(2) * ((3.0_f64).sqrt() / 2.0)).sqrt();\n    area",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    let area = a.powi(2) * 3.0_f64.sqrt() / 4.0;\n    println!(\"The area of a tetrahedron with side {} is {}\", side, area);\n    area",
    "    let area = (3.0 * (side as f64).powi(2) * (3.0_f64.sqrt() / 2.0)).sqrt();\n    area",
    "    let area = (3.0f64).sqrt() * (side as f64).powi(2);\n    area",
    "    let area = (side.pow(2) * (3 as f64).sqrt() / 4.0) as f64;\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt()",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let square_side = side as f64;\n    let area = (square_side.powi(2) * (3.0_f64).sqrt() / 4.0).powi(2);\n    area",
    "    let s = side as f64;\n    let a = (s.powi(2) * (3.0_f64.sqrt())) / 4.0;\n    a",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt()",
    "    let s = side as f64;\n    let area = (s.powi(2) * (3.0_f64).sqrt() / 4.0).powi(2);\n    area",
    "    let area = (side as f64).powi(2) * (3_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let s = side as f64;\n    let a = (s * s * (3.0_f64).sqrt()) / 4.0;\n    a",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area_square = area_square(side);\n    let area_triangle = area_triangle(side);\n    (area_square + area_triangle * 3.0).sqrt()",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (3.0_f64).sqrt() * side as f64 * side as f64;\n    area / 4.0",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    s * s * s * (3.0_f64.sqrt() / 6.0)",
    "    let area = (side as f64).powi(2) * (3f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s",
    "    let area = (side as f64).powf(2.0) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt() / 2.0",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    let area = (s * (s - a) * (s - a) * (s - a)).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let mut area = 0.0;\n    let mut side = side as f64;\n    area = (side.powi(2) * (3.0_f64).sqrt() / 4.0) * 4.0;\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = (3.0f64).sqrt() * side as f64 * side as f64;\n    area / 4.0",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = (side as f64).powi(2) * ((3.0_f64).sqrt() / 4.0_f64);\n    area",
    "    let area = (3.0f64).sqrt() * side as f64 * side as f64;\n    area / 4.0",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (3.0 * (side as f64).powi(2) * ((3.0_f64).sqrt() / 2.0)).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = (side as f64).powf(2.0) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = (3.0_f64).sqrt() * (side as f64).powi(2);\n    area / 4.0",
    "    let s = side as f64;\n    let a = s.powi(2) * (3.0_f64).sqrt();\n    let b = (3.0_f64 / 2.0_f64) * a;\n    let c = (b.powi(2) - (s.powi(4) / 4.0_f64)).sqrt();\n    let d = (b - c) / 4.0_f64;\n    let e = (3.0_f64 * d.powi(2)).sqrt();\n    e",
    "    let area = (side as f64).powi(2) * (3 as f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = ((side as f64).powi(2) * (3.0_f64).sqrt() / 4.0_f64).powi(2);\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (3.0 * (side as f64).powi(2) * ((3.0_f64).sqrt() / 2.0)).sqrt();\n    area",
    "    let area = (3.0 * (side as f64).powi(2) * ((3.0_f64).sqrt() / 2.0)).sqrt();\n    area",
    "    let s = side as f64;\n    let a = s.powi(2) * (3.0_f64).sqrt();\n    let b = (3.0_f64 / 2.0_f64) * (s.powi(2) * (3.0_f64).sqrt());\n    let c = (a * b) / 2.0_f64;\n    c",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    let area = (s * s * 3.0_f64.sqrt() / 2.0).round();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let s = side as f64;\n    let a = (s.powi(2) * (3.0_f64).sqrt() / 4.0_f64).sqrt();\n    a",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    let area = s * s * 3.0_f64.sqrt() / 4.0;\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (3.0f64).sqrt() * (side as f64).powi(2);\n    area / 4.0",
    "    let s = side as f64;\n    let a = (s * s * (3.0_f64).sqrt()) / 4.0;\n    a",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (3.0f64).sqrt() * (side as f64).powi(2);\n    area / 4.0",
    "    let a = side as f64;\n    let s = a * a.sqrt();\n    let area = (s * s * 3.0).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let s = side as f64;\n    let a = (3.0_f64).sqrt() * s * s / 4.0;\n    a",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area / 4.0",
    "    // The formula for the area of a tetrahedron is:\n    //\n    //     sqrt(3) * side^2\n    //\n    // We can calculate this using the `powf` function from the `std::f64` module.\n    //\n    // The `powf` function takes two arguments, the first is the number to raise to\n    // the power of the second.\n    //\n    // The `sqrt` function takes a single argument, the number to take the square\n    // root of.\n    //\n    // The `sqrt` function returns a `f64` value, so we need to cast the result of\n    // `powf` to a `f64` value.\n    //\n    // The `powf` function returns a `f64` value, so we need to cast the result of\n    // `powf` to a `f64` value.\n    //\n    // The `sqrt` function returns a `f64` value, so we need to cast the result of\n    // `powf` to a `f64` value.\n    //\n    // The `sqrt` function returns a `f64` value, so we need to cast the result of\n    // `powf` to a `f64` value.\n    //\n    // The `sqrt` function returns a `f64` value, so we need to cast the result of\n    // `powf` to a `f64` value.\n    //\n    // The `sqrt` function returns a `f64` value, so we need to cast the result of\n    // `powf` to a `f64` value.\n    //\n    // The `sqrt` function returns a `f64` value, so we need to cast the result of\n    // `powf` to a `f64` value.\n    //\n    // The `sqrt` function returns a `f64` value, so we need to cast the result of\n    // `powf` to a `f64` value.\n    //\n    // The `sqrt` function returns a `f64` value, so we need to cast the result of\n    // `powf`",
    "    let s = side as f64;\n    let a = (s.powi(2) * (3.0_f64).sqrt() / 4.0).sqrt();\n    a",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let side = side as f64;\n    let area = (side.powi(2) * (3.0_f64).sqrt()).sqrt();\n    area",
    "    let area = (3.0 * (side as f64).powi(2) * (3.0_f64.sqrt() / 2.0)).sqrt();\n    area",
    "    let area = ((side as f64).powi(2) * (3.0_f64).sqrt() / 4.0_f64).powi(2);\n    area",
    "    let s = side as f64;\n    let area = (s.powi(2) * (3.0_f64.sqrt()) / 4.0) * 3.0;\n    area",
    "    let area = (3.0 * (side as f64).powi(2) * (3.0_f64.sqrt() / 2.0)).powf(1.0 / 3.0);\n    area",
    "    let area = (3.0f64).sqrt() * side as f64 * side as f64;\n    area / 4.0",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let a = side as f64;\n    let s = (a * a * a / (6.0 * (a * a / 4.0).sqrt())).sqrt();\n    (s * s * 3.0).sqrt()",
    "    let s = side as f64;\n    let a = (3.0_f64).sqrt() * s * s / 4.0;\n    a",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    let area = s * s * 3.0_f64.sqrt() / 4.0;\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = (3.0 * (side as f64).powi(2) * ((3.0_f64).sqrt() / 2.0)).sqrt();\n    area",
    "    let area = (3.0 * (side as f64).powi(2) * (3.0_f64.sqrt() / 2.0)).sqrt();\n    area",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt()",
    "    let area = ((side as f64).powi(2) * (3.0_f64).sqrt() / 4.0).powi(2);\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powf(2.0) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = ((3.0f64).sqrt() * (side as f64).powi(2)) / 4.0;\n    area",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    s * s * 3.0_f64.sqrt() / 4.0",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let s = side as f64;\n    let area = (s.powi(2) * (3.0_f64).sqrt() / 4.0).powi(2);\n    area",
    "    let area = (side as f64).powi(2) * (3.0 as f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0 as f64).sqrt();\n    area / 4.0",
    "    let area = (3.0_f64).sqrt() * side as f64;\n    area * area",
    "    let s = side as f64;\n    let a = (s * s * (3.0_f64).sqrt()) / 4.0;\n    a",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    s * s * 3.0_f64.sqrt() / 4.0",
    "    let area = (side as f64 * side as f64 * (3.0_f64).sqrt() / 4.0).round();\n    area",
    "    let area = (side as f64).powf(2.0) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = (side as f64).powf(2.0) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = (side.pow(2) * 3_f64.sqrt() / 4_f64) as f64;\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s.powi(2) * 3.0_f64.sqrt()",
    "    let area = (3.0 * (side as f64).powi(2) * (3.0_f64.sqrt() / 2.0)).sqrt();\n    area",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    (s * (s - a) * (s - a) * (s - a)).sqrt()",
    "    let area = ((side as f64).powi(2) * (3.0_f64).sqrt()).powi(2);\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    let area = (s * s * 3.0_f64.sqrt() / 2.0).sqrt();\n    area",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt()",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    s * s * 3.0_f64.sqrt() / 4.0",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    let area = s * (s - a) * (s - a) * (s - a);\n    area.sqrt()",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powf(2.0) * (3.0 as f64).sqrt() / 4.0;\n    area",
    "    let side = side as f64;\n    let area = (side.powi(2) * (3.0_f64.sqrt()) / 4.0) * 3.0;\n    area",
    "    let area = (side as f64).powf(2.0) * (3.0 as f64).sqrt() / 4.0;\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (3.0f64).sqrt() * side as f64 * side as f64;\n    area / 4.0",
    "    let area = (3.0 * f64::sqrt(3.0) * side as f64 * side as f64) / 2.0;\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let a = side as f64;\n    let s = a * a * a / (6.0 * (a * a - a * a * a).sqrt());\n    (s * s * (s - a) * (s - a) * (s - a)).sqrt()",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area / 4.0",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 2.0;\n    let area = s * s * 3.0_f64.sqrt() / 2.0;\n    area",
    "    let area = (side as f64).powf(2.0) * (3.0 as f64).sqrt();\n    area",
    "    let a = side as f64;\n    let s = a * (3.0_f64).sqrt() / 4.0;\n    (s * s * (3.0_f64).sqrt() / 4.0).round()",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt()",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = (3.0_f64).sqrt() * side as f64 * side as f64;\n    area / 4.0",
    "    let area = (side as f64).powi(2) * ((3.0_f64).sqrt() / 4.0);\n    area",
    "    let area = (3.0 * (side as f64).powi(2) * (3.0_f64.sqrt() / 2.0)).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    let area = (s * s * 3.0_f64.sqrt() / 2.0).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let s = side as f64;\n    let a = (s.powi(2) * (3.0_f64.sqrt() / 4.0)).powi(2);\n    a",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (3.0 * (side as f64).powi(2) * (3.0_f64.sqrt() / 2.0)).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let s = side as f64;\n    let a = (3.0_f64).sqrt() * s * s;\n    a / 4.0",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let area = (3.0 * (side as f64).powi(2) * (3.0_f64.sqrt() / 2.0)).sqrt();\n    area",
    "    let area = (3.0f64.sqrt() / 4.0) * side as f64;\n    area",
    "    let area = (side as f64).powf(2.0) * (3.0_f64).sqrt() / 4.0;\n    area",
    "    let s = side as f64;\n    let a = (s.powi(2) * (3.0_f64).sqrt() / 4.0) * (s.powi(3) / (6.0 * (6.0_f64).sqrt()));\n    a",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * (15.0_f64 + 7.0_f64 * 5.0_f64.sqrt())",
    "    let area = (3.0 * (side as f64).powi(2) * (3.0_f64.sqrt() / 2.0)).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area",
    "    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt() / 2.0"
  ]
}