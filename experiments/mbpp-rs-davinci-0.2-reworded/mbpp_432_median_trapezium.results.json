{
  "name": "mbpp_432_median_trapezium",
  "language": "rs",
  "prompt": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_432_median_trapezium.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / median;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `35.0`,\n right: `20.0`', /tmp/tmpmnilm1ru.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = base1 as f64 + base2 as f64 + 2.0 * height;\n    let length = 2.0 * area / perimeter;\n    length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `12.727272727272727`,\n right: `20.0`', /tmp/tmppru_laby.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / median;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `35.0`,\n right: `20.0`', /tmp/tmpmnilm1ru.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    median * height / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmprnom9k59.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    (median * height as f64).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpx0di9tce.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = median * height as f64;\n    area.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpb7c74b3k.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = 2.0 * (base1 + base2) as f64;\n    let median_length = 2.0 * area / perimeter;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `17.5`,\n right: `20.0`', /tmp/tmp749yvizv.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = ((base1 + base2) as f64) / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    area.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `18.708286933869708`,\n right: `20.0`', /tmp/tmph_jbdzhm.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = height as f64 * median;\n    let median_length = (2.0 * area) / median;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `70.0`,\n right: `20.0`', /tmp/tmpc8xxgh03.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    let median = median / 2.0;\n    let median = median * height;\n    median\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmpxeqddn3k.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp_8791vmn.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median * height as f64 / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp0vc335wa.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = median * height as f64;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `40.0`,\n right: `20.0`', /tmp/tmpc8pwwgpl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = ((base1 + base2) as f64) / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = 2.0 * area / median;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `35.0`,\n right: `20.0`', /tmp/tmppkh4wsss.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let median_length = (height * height + median * median).sqrt();\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `40.311288741492746`,\n right: `20.0`', /tmp/tmpbs4qosvu.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = 2.0 * (median + height);\n    area / perimeter\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6.363636363636363`,\n right: `20.0`', /tmp/tmp70q9qn22.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp_8791vmn.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    ((base1 + base2) as f64).powi(2) + (4 * height * height) as f64;\n    ((base1 + base2) as f64).powi(2) + (4 * height * height) as f64;\n    ((base1 + base2) as f64).powi(2) + (4 * height * height) as f64;\n    ((base1 + base2) as f64).powi(2) + (4 * height * height) as f64;\n    ((base1 + base2) as f64).powi(2) + (4 * height * height) as f64;\n    ((base1 + base2) as f64).powi(2) + (4 * height * height) as f64;\n    ((base1 + base2) as f64).powi(2) + (4 * height * height) as f64;\n    ((base1 + base2) as f64).powi(2) + (4 * height * height) as f64;\n    ((base1 + base2) as f64).powi(2) + (4 * height * height) as f64;\n    ((base1 + base2) as f64).powi(2) + (4 * height * height) as f64;\n    ((base1 + base2) as f64).powi(2) + (4 * height * height) as f64;\n    ((base1 + base2) as f64).powi(2) + (4 * height * height) as f64;\n    ((base1 + base2) as f64).powi(2) + (4 * height * height) as f64;\n    ((base1 + base2) as f64).powi(2) + (4 * height * height) as f64;\n    ((base1 + base2) as f64).powi(2) + (4 * height * height) as f64;\n    ((base1 + base2) as f64).powi(2) + (4 * height * height) as f64;\n    ((base1 + base2) as f64).powi\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "error[E0615]: attempted to take value of method `powi` on type `f64`\n  --> /tmp/tmpx95o94op.rs:19:30\n   |\n19 |     ((base1 + base2) as f64).powi\n   |                              ^^^^ method, not a field\n   |\nhelp: use parentheses to call the method\n   |\n19 |     ((base1 + base2) as f64).powi(_)\n   |                                  +++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0615`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = ((base1 + base2) as f64) / 2.0;\n    let median_length = (median * height as f64).sqrt();\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpphdybf0b.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = base1 + base2 + 2 * height;\n    let median_length = (4.0 * area) / perimeter as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "error[E0277]: cannot multiply `{integer}` by `f64`\n --> /tmp/tmpp7ki33y_.rs:6:39\n  |\n6 |     let perimeter = base1 + base2 + 2 * height;\n  |                                       ^ no implementation for `{integer} * f64`\n  |\n  = help: the trait `Mul<f64>` is not implemented for `{integer}`\n  = help: the following other types implement trait `Mul<Rhs>`:\n            <&'a f32 as Mul<f32>>\n            <&'a f64 as Mul<f64>>\n            <&'a i128 as Mul<i128>>\n            <&'a i16 as Mul<i16>>\n            <&'a i32 as Mul<i32>>\n            <&'a i64 as Mul<i64>>\n            <&'a i8 as Mul<i8>>\n            <&'a isize as Mul<isize>>\n          and 49 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = base1 as f64 + base2 as f64 + 2.0 * (height.powf(2.0) + median.powf(2.0)).sqrt();\n    2.0 * area / perimeter\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `11.606450709424427`,\n right: `20.0`', /tmp/tmpil7hawsz.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    let median = median.sqrt();\n    median\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpx45_5wxp.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    let median = median.sqrt();\n    median\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpx45_5wxp.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    area.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `18.708286933869708`,\n right: `20.0`', /tmp/tmph_jbdzhm.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let median_squared = median * median;\n    let height_squared = height as f64 * height as f64;\n    (median_squared + height_squared).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `40.311288741492746`,\n right: `20.0`', /tmp/tmpn2p7ktfy.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    median * height / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmprnom9k59.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp_8791vmn.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let side = (area * 2.0 / height as f64).sqrt();\n    side\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.47213595499958`,\n right: `20.0`', /tmp/tmpfmrv9tnc.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `37.416573867739416`,\n right: `20.0`', /tmp/tmps2md7y1e.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    area.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `18.708286933869708`,\n right: `20.0`', /tmp/tmph_jbdzhm.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let area = area_trapezium(base1, base2, height);\n    let perimeter = perimeter_trapezium(base1, base2, height);\n    area / perimeter\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `area_trapezium` in this scope\n --> /tmp/tmpx264m29p.rs:3:16\n  |\n3 |     let area = area_trapezium(base1, base2, height);\n  |                ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `perimeter_trapezium` in this scope\n --> /tmp/tmpx264m29p.rs:4:21\n  |\n4 |     let perimeter = perimeter_trapezium(base1, base2, height);\n  |                     ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = base1 as f64 + base2 as f64 + 2.0 * (height.powf(2.0) + (median / 2.0).powf(2.0)).sqrt();\n    area / perimeter\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6.205613304044223`,\n right: `20.0`', /tmp/tmpdmmc53rn.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = 2.0 * (base1 + base2) as f64;\n    let median_length = 2.0 * area / perimeter;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `17.5`,\n right: `20.0`', /tmp/tmp749yvizv.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = ((base1 + base2) as f64) / 2.0;\n    let area = (median * height as f64) / 2.0;\n    area.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `18.708286933869708`,\n right: `20.0`', /tmp/tmpjqr689f0.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let median_length = (2.0 * height * median.sqrt()).sqrt();\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `17.693205386531027`,\n right: `20.0`', /tmp/tmpcxjks4qc.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let a = base1 as f64;\n    let b = base2 as f64;\n    let h = height as f64;\n    let m = (a + b) / 2.0;\n    let c = (m * h).sqrt();\n    c\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpe7rgb2hj.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = ((base1 + base2) as f64) / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / median;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `35.0`,\n right: `20.0`', /tmp/tmps_kwpb9o.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    area.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `18.708286933869708`,\n right: `20.0`', /tmp/tmph_jbdzhm.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    median * height / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmprnom9k59.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = (median * height) / 2.0;\n    let perimeter = base1 as f64 + base2 as f64 + (2.0 * height.sqrt());\n    area / perimeter\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6.752564487554979`,\n right: `20.0`', /tmp/tmp7ju_pacu.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    (median * height as f64).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpx0di9tce.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = base1 as f64 + base2 as f64 + 2.0 * (height.sqrt());\n    area / perimeter\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `13.505128975109958`,\n right: `20.0`', /tmp/tmpgh3ilq_b.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    let median = median / 2.0;\n    let median = median * height;\n    median\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmpxeqddn3k.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median * height as f64 / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp0vc335wa.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = height as f64 * median;\n    let median_length = 2.0 * area / median;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `70.0`,\n right: `20.0`', /tmp/tmp3vwfznji.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = ((base1 + base2) as f64) / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = 2.0 * (base1 + base2) as f64;\n    let median_length = 2.0 * area / perimeter;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `17.5`,\n right: `20.0`', /tmp/tmpu8hdnohl.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = median * height as f64;\n    let median_length = (2.0 * area) / (base1 + base2) as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `35.0`,\n right: `20.0`', /tmp/tmpmk55k9lf.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let median_length = (2.0 * height * median.sqrt()).sqrt();\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `17.693205386531027`,\n right: `20.0`', /tmp/tmpcxjks4qc.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    median * height / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmprnom9k59.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = ((base1 + base2) as f64 * height as f64).sqrt();\n    median\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `37.416573867739416`,\n right: `20.0`', /tmp/tmp3qqdjsaj.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = base1 as f64 + base2 as f64 + 2.0 * height;\n    area / perimeter\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6.363636363636363`,\n right: `20.0`', /tmp/tmpavxz5hkb.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = 2.0 * (median + height);\n    let median_length = 2.0 * area / perimeter;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `12.727272727272727`,\n right: `20.0`', /tmp/tmpodj519fo.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = 2.0 * area / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    (median * height as f64).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `37.416573867739416`,\n right: `20.0`', /tmp/tmpmqkszy95.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    median * height as f64 / height as f64\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `37.416573867739416`,\n right: `20.0`', /tmp/tmps2md7y1e.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    area.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `18.708286933869708`,\n right: `20.0`', /tmp/tmph_jbdzhm.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let median_squared = median * median;\n    let height_squared = height as f64 * height as f64;\n    (median_squared + height_squared).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `40.311288741492746`,\n right: `20.0`', /tmp/tmpn2p7ktfy.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    (base1 + base2) as f64 * height as f64 / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmpr9bmw5ga.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let side_length = (area * 2.0).sqrt();\n    side_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmp5h18f64w.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    median * height / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmprnom9k59.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    median * height.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `118.32159566199232`,\n right: `20.0`', /tmp/tmph4yreriu.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    let median = median.sqrt();\n    median\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpx45_5wxp.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    ((base1 + base2) as f64 / 2.0).sqrt() * height as f64\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `156.5247584249853`,\n right: `20.0`', /tmp/tmpqpca_xbb.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let base_sum = base1 + base2;\n    let base_diff = (base1 - base2).abs();\n    let median = (base_sum + base_diff) as f64 / 4.0;\n    median * height as f64\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `437.5`,\n right: `20.0`', /tmp/tmpfz6fqapq.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = median * height as f64;\n    area.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpb7c74b3k.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let median_length = (median * height as f64).sqrt();\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmphi9gcvbt.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median * height as f64 / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp0vc335wa.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = ((base1 + base2) as f64) / 2.0;\n    let area = (median * height as f64) / 2.0;\n    area.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `18.708286933869708`,\n right: `20.0`', /tmp/tmpjqr689f0.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median * height as f64 / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp0vc335wa.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = ((base1 + base2) as f64) / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median * height as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmpfqvvrt7c.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let perimeter = base1 + base2 + (2 * height);\n    let median_length = (4.0 * area) / perimeter as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `12.727272727272727`,\n right: `20.0`', /tmp/tmpdooo87ex.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = height as f64 * median;\n    let median_length = 2.0 * area / median;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `70.0`,\n right: `20.0`', /tmp/tmp3vwfznji.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let median_length = (median * height as f64).sqrt();\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmphi9gcvbt.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `37.416573867739416`,\n right: `20.0`', /tmp/tmps2md7y1e.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = median * height as f64;\n    let median_length = (2.0 * area / height as f64).sqrt();\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6.324555320336759`,\n right: `20.0`', /tmp/tmpplzqs4tj.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let base_sum = base1 + base2;\n    let base_product = base1 * base2;\n    let height_square = height * height;\n    let base_sum_square = base_sum * base_sum;\n    let base_product_square = base_product * base_product;\n\n    let numerator = (base_sum_square * height_square) as f64;\n    let denominator = (4.0 * base_product_square) as f64;\n\n    numerator / denominator\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "error[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmpdt4_0pb8.rs:10:28\n   |\n10 |     let denominator = (4.0 * base_product_square) as f64;\n   |                            ^ no implementation for `{float} * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented for `{float}`\n   = help: the following other types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    let median = median.sqrt();\n    median\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpx45_5wxp.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let median_length = (median * height).sqrt() * 2.0;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `52.91502622129181`,\n right: `20.0`', /tmp/tmppzn9z_e0.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let base_diff = (base2 - base1).abs();\n    let height_diff = (height * 2).abs();\n    let sum = base_diff + height_diff;\n    let median = sum as f64 / 2.0;\n    median\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `40.0`,\n right: `20.0`', /tmp/tmpqwod6qe2.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = ((base1 + base2) as f64) / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpi98llf8f.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    ((base1 + base2) as f64).powi(2) + (4.0 * height as f64).powi(2)\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `21200.0`,\n right: `20.0`', /tmp/tmp0rhfu7sh.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    median * height / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmprnom9k59.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    median * height / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmprnom9k59.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    ((base1 + base2) as f64 / 2.0) * height as f64\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp2_18jbj3.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = base1 as f64 + base2 as f64 + 2.0 * height;\n    area / perimeter\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6.363636363636363`,\n right: `20.0`', /tmp/tmpavxz5hkb.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `37.416573867739416`,\n right: `20.0`', /tmp/tmps2md7y1e.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let a = base1 as f64;\n    let b = base2 as f64;\n    let h = height as f64;\n    let m = (a + b) / 2.0;\n    let s = (h * m).sqrt();\n    s\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmptzce2dpu.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `37.416573867739416`,\n right: `20.0`', /tmp/tmps2md7y1e.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    (median * height as f64).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpx0di9tce.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median * height as f64 / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp0vc335wa.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = ((base1 + base2) as f64) / 2.0;\n    let area = (median * height as f64).abs();\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `40.0`,\n right: `20.0`', /tmp/tmpdkjtddc_.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let median_length = (median * height as f64).sqrt();\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmphi9gcvbt.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median * height as f64 / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp0vc335wa.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = ((base1 + base2) as f64) / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let side = (area * 2.0 / height as f64).sqrt();\n    side\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.47213595499958`,\n right: `20.0`', /tmp/tmp43a9e4sl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    median * height / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmprnom9k59.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median * height as f64 / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp0vc335wa.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = height as f64 * median;\n    let median_length = 2.0 * area / median;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `70.0`,\n right: `20.0`', /tmp/tmp3vwfznji.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    area.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `18.708286933869708`,\n right: `20.0`', /tmp/tmph_jbdzhm.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    median * height / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmprnom9k59.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    median * height / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmprnom9k59.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = ((base1 + base2) as f64) / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / median;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `35.0`,\n right: `20.0`', /tmp/tmps_kwpb9o.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let length = (area * 2.0).sqrt();\n    length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmp8qvdqw92.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = 2.0 * (base1 + base2) as f64;\n    let length = area / perimeter;\n    length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `8.75`,\n right: `20.0`', /tmp/tmpphyefbgr.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = base1 + base2 + (2 * height);\n    let median_length = (4.0 * area) / perimeter as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "error[E0277]: cannot multiply `{integer}` by `f64`\n --> /tmp/tmprkpyawii.rs:6:40\n  |\n6 |     let perimeter = base1 + base2 + (2 * height);\n  |                                        ^ no implementation for `{integer} * f64`\n  |\n  = help: the trait `Mul<f64>` is not implemented for `{integer}`\n  = help: the following other types implement trait `Mul<Rhs>`:\n            <&'a f32 as Mul<f32>>\n            <&'a f64 as Mul<f64>>\n            <&'a i128 as Mul<i128>>\n            <&'a i16 as Mul<i16>>\n            <&'a i32 as Mul<i32>>\n            <&'a i64 as Mul<i64>>\n            <&'a i8 as Mul<i8>>\n            <&'a isize as Mul<isize>>\n          and 49 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = ((base1 + base2) as f64) / 2.0;\n    let area = (median * height as f64) / 2.0;\n    area.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `18.708286933869708`,\n right: `20.0`', /tmp/tmpjqr689f0.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let median_length = (median * height as f64).sqrt();\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmphi9gcvbt.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = base1 as f64 + base2 as f64 + 2.0 * height;\n    let median_length = 2.0 * area / perimeter;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `12.727272727272727`,\n right: `20.0`', /tmp/tmp49at2qbz.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `37.416573867739416`,\n right: `20.0`', /tmp/tmps2md7y1e.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    median * height as f64 / height as f64\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = base1 as f64 + base2 as f64 + 2.0 * height.sqrt();\n    area / perimeter\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `13.505128975109958`,\n right: `20.0`', /tmp/tmp0rbbz_w9.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let median_length = (2.0 * height * median.sqrt() + base1 + base2) as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "error[E0277]: cannot add `isize` to `f64`\n --> /tmp/tmprxj5vh82.rs:5:55\n  |\n5 |     let median_length = (2.0 * height * median.sqrt() + base1 + base2) as f64;\n  |                                                       ^ no implementation for `f64 + isize`\n  |\n  = help: the trait `Add<isize>` is not implemented for `f64`\n  = help: the following other types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    let area = (median * height) / 2.0;\n    let median_length = (2.0 * area) / height;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `40.0`,\n right: `20.0`', /tmp/tmp81gsfqd8.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}