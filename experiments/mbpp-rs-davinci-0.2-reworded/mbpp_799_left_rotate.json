{
  "name": "mbpp_799_left_rotate",
  "language": "rs",
  "prompt": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n",
    "    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut mask = (1 << d) - 1;\n    mask = mask & n;\n    mask = mask << (32 - d);\n    n = n << d;\n    n = n | mask;\n    n",
    "    let mut n = n;\n    let mut d = d;\n    while d > 0 {\n        n = n << 1;\n        d -= 1;\n    }\n    n",
    "    let mut n = n;\n    let mut d = d;\n    let mut r = 0;\n    let mut i = 0;\n    while i < d {\n        r = r | (n & 1);\n        r = r << 1;\n        n = n >> 1;\n        i += 1;\n    }\n    n = n | r;\n    n",
    "    let mut n = n;\n    for _ in 0..d {\n        let msb = n & 1;\n        n = n >> 1;\n        n = n | (msb << 31);\n    }\n    n",
    "    let mut n = n;\n    let mut d = d;\n    if d > 32 {\n        d = d % 32;\n    }\n    let mut i = 0;\n    while i < d {\n        let mut temp = n & 1;\n        n = n >> 1;\n        temp = temp << 31;\n        n = n | temp;\n        i += 1;\n    }\n    n",
    "    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut mask = 0;\n    for i in 0..d {\n        mask = mask | (1 << i);\n    }\n    let mut left = n >> (32 - d);\n    let mut right = n & mask;\n    left = left << (32 - d);\n    n = left | right;\n    n",
    "    let mut n = n;\n    let mut d = d;\n    while d > 0 {\n        let bit = n & 1;\n        n = n >> 1;\n        n = n | (bit << 31);\n        d -= 1;\n    }\n    n",
    "    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> 32 - d);\n    n",
    "    return (n << d) | (n >> (32 - d));",
    "    let mut n = n;\n    let mut d = d;\n    let mut r = 0;\n    while d > 0 {\n        r = (r << 1) | (n & 1);\n        n = n >> 1;\n        d -= 1;\n    }\n    n | (r << (32 - d))",
    "    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n",
    "    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n",
    "    let mut n = n;\n    let mut d = d;\n    let mut result = 0;\n    while d > 0 {\n        result = result << 1;\n        result = result | (n & 1);\n        n = n >> 1;\n        d = d - 1;\n    }\n    result = result << (32 - d);\n    result = result | n;\n    result",
    "    (n << d) | (n >> (32 - d))",
    "    let mut n = n;\n    let mut d = d;\n    if d > 32 {\n        d = d % 32;\n    }\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n",
    "    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut result = 0;\n    for _ in 0..d {\n        let mut temp = n & 1;\n        n = n >> 1;\n        temp = temp << 31;\n        result = result | temp;\n    }\n    result = result | n;\n    result",
    "    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n",
    "    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n",
    "    let mut n = n;\n    let mut d = d;\n    let mut i = 0;\n    while i < d {\n        let mut temp = n & 1;\n        n = n >> 1;\n        temp = temp << 31;\n        n = n | temp;\n        i += 1;\n    }\n    return n;"
  ]
}