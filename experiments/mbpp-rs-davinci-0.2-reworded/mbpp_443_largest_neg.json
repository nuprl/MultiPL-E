{
  "name": "mbpp_443_largest_neg",
  "language": "rs",
  "prompt": "/// Write a rsthon function to find the largest negative number from the given vector.\nfn largest_neg(list1: Vec<isize>) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_443_largest_neg.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = largest_neg;\n    assert_eq!(candidate(vec![1, 2, 3, -4, -6]), -6);\n    assert_eq!(candidate(vec![1, 2, 3, -8, -9]), -9);\n    assert_eq!(candidate(vec![1, 2, 3, 4, -1]), -1);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut largest_neg = 0;\n    for i in list1 {\n        if i < 0 && i > largest_neg {\n            largest_neg = i;\n        }\n    }\n    largest_neg",
    "    let mut largest = list1[0];\n    for i in list1 {\n        if i < largest {\n            largest = i;\n        }\n    }\n    largest",
    "    let mut largest = list1[0];\n    for i in list1 {\n        if i < largest {\n            largest = i;\n        }\n    }\n    largest",
    "    let mut neg_list: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_list.push(i);\n        }\n    }\n    neg_list.sort();\n    neg_list[0]",
    "    let mut neg_list: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_list.push(i);\n        }\n    }\n    neg_list.sort();\n    neg_list[0]",
    "    let mut largest = 0;\n    for i in list1 {\n        if i < 0 && i > largest {\n            largest = i;\n        }\n    }\n    largest",
    "    let mut largest_neg = 0;\n    for i in list1 {\n        if i < 0 && i > largest_neg {\n            largest_neg = i;\n        }\n    }\n    largest_neg",
    "    let mut neg = 0;\n    for i in list1 {\n        if i < 0 {\n            if i > neg {\n                neg = i;\n            }\n        }\n    }\n    neg",
    "    let mut largest = list1[0];\n    for i in list1 {\n        if i < largest {\n            largest = i;\n        }\n    }\n    largest",
    "    let mut largest = 0;\n    for i in list1 {\n        if i < 0 && i > largest {\n            largest = i;\n        }\n    }\n    largest",
    "    let mut neg_max = 0;\n    for i in list1 {\n        if i < 0 && i > neg_max {\n            neg_max = i;\n        }\n    }\n    neg_max",
    "    let mut neg_list: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_list.push(i);\n        }\n    }\n    neg_list.sort();\n    neg_list[0]",
    "    let mut max = list1[0];\n    for i in list1 {\n        if i < max {\n            max = i;\n        }\n    }\n    max",
    "    let mut max = list1[0];\n    for i in list1 {\n        if i < max {\n            max = i;\n        }\n    }\n    max",
    "    let mut max: isize = 0;\n    for i in list1 {\n        if i < 0 && i > max {\n            max = i;\n        }\n    }\n    max",
    "    let mut largest_neg = 0;\n    for i in list1 {\n        if i < 0 && i > largest_neg {\n            largest_neg = i;\n        }\n    }\n    largest_neg",
    "    let mut neg_list: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_list.push(i);\n        }\n    }\n    let mut largest_neg = neg_list[0];\n    for i in neg_list {\n        if i > largest_neg {\n            largest_neg = i;\n        }\n    }\n    largest_neg",
    "    let mut neg_list = Vec::new();\n    for num in list1 {\n        if num < 0 {\n            neg_list.push(num);\n        }\n    }\n    neg_list.sort();\n    neg_list[0]",
    "    let mut largest_neg = 0;\n    for i in list1 {\n        if i < 0 && i > largest_neg {\n            largest_neg = i;\n        }\n    }\n    largest_neg",
    "    let mut max = list1[0];\n    for i in list1 {\n        if i < max {\n            max = i;\n        }\n    }\n    max"
  ]
}