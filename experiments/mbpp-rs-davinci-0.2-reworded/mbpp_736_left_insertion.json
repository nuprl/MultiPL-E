{
  "name": "mbpp_736_left_insertion",
  "language": "rs",
  "prompt": "/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rsthon-exercises/data-structures-and-algorithms/rsthon-data-structure-exercise-24.php\nfn left_insertion(a: Vec<isize>, x: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = left_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if x <= a[mid as usize] {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n    left",
    "    let mut low = 0;\n    let mut high = a.len() as isize - 1;\n    let mut mid;\n    while low <= high {\n        mid = (low + high) / 2;\n        if x < a[mid as usize] {\n            high = mid - 1;\n        } else if x > a[mid as usize] {\n            low = mid + 1;\n        } else {\n            return mid;\n        }\n    }\n    return low;",
    "    let mut low = 0;\n    let mut high = a.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = (low + high) / 2;\n        if a[mid] < x {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize",
    "    let mut low = 0;\n    let mut high = a.len() as isize - 1;\n    let mut mid = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        if a[mid as usize] == x {\n            if mid == 0 {\n                return mid;\n            } else if a[(mid - 1) as usize] != x {\n                return mid;\n            } else {\n                high = mid - 1;\n            }\n        } else if a[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return mid;",
    "    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left",
    "    let mut left = 0;\n    let mut right = a.len() - 1;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize",
    "    let mut left = 0;\n    let mut right = a.len() - 1;\n    let mut mid;\n\n    while left < right {\n        mid = (left + right) / 2;\n        if a[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize",
    "    let mut low = 0;\n    let mut high = a.len() as isize - 1;\n    let mut mid;\n\n    while low <= high {\n        mid = (low + high) / 2;\n        if x < a[mid as usize] {\n            high = mid - 1;\n        } else if x > a[mid as usize] {\n            low = mid + 1;\n        } else {\n            return mid;\n        }\n    }\n\n    low",
    "    let mut low = 0;\n    let mut high = a.len() as isize - 1;\n    let mut mid = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        if x > a[mid as usize] {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    low",
    "    let mut low = 0;\n    let mut high = a.len() as isize - 1;\n    let mut mid;\n    while low <= high {\n        mid = (low + high) / 2;\n        if x < a[mid as usize] {\n            high = mid - 1;\n        } else if x > a[mid as usize] {\n            low = mid + 1;\n        } else {\n            return mid;\n        }\n    }\n    return low;",
    "    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left",
    "    let mut low = 0;\n    let mut high = a.len() - 1;\n    let mut mid = 0;\n\n    while low <= high {\n        mid = (low + high) / 2;\n        if x < a[mid] {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    low as isize",
    "    let mut l = 0;\n    let mut r = a.len() as isize - 1;\n    let mut m = 0;\n    while l <= r {\n        m = (l + r) / 2;\n        if a[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    l",
    "    let mut low = 0;\n    let mut high = a.len() as isize - 1;\n    let mut mid = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        if a[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    low",
    "    let mut low = 0;\n    let mut high = a.len() as isize - 1;\n    let mut mid: isize;\n    while low <= high {\n        mid = (low + high) / 2;\n        if x < a[mid as usize] {\n            high = mid - 1;\n        } else if x > a[mid as usize] {\n            low = mid + 1;\n        } else {\n            return mid;\n        }\n    }\n    return low;",
    "    let mut left = 0;\n    let mut right = a.len() - 1;\n    let mut mid = 0;\n    while left < right {\n        mid = (left + right) / 2;\n        if a[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize",
    "    let mut left = 0;\n    let mut right = a.len() - 1;\n    while left <= right {\n        let mid = (left + right) / 2;\n        if a[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    left as isize",
    "    let mut low = 0;\n    let mut high = a.len() as isize - 1;\n    let mut mid = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        if a[mid as usize] == x {\n            return mid;\n        } else if a[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return mid;",
    "    let mut low = 0;\n    let mut high = a.len() - 1;\n    let mut mid;\n    while low <= high {\n        mid = (low + high) / 2;\n        if a[mid] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    low as isize",
    "    let mut low = 0;\n    let mut high = a.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        if x > a[mid] {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    low as isize"
  ]
}