{
  "name": "mbpp_606_radian_degree",
  "language": "rs",
  "prompt": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    let radian = degree as f64 * std::f64::consts::PI / 180.0;\n    radian\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    // TODO\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp6d3e6_2z.rs:4:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0425]: cannot find value `PI` in this scope\n --> /tmp/tmpgksh6eno.rs:3:23\n  |\n3 |     (degree as f64) * PI / 180.0\n  |                       ^^ not found in this scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::f32::consts::PI;\n  |\n1 | use std::f64::consts::PI;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * (std::f64::consts::PI / 180.0)\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1666123125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    let radian = degree as f64 * std::f64::consts::PI / 180.0;\n    radian\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * (std::f64::consts::PI / 180.0)\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1666123125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * (std::f64::consts::PI / 180.0)\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1666123125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * (std::f64::consts::PI / 180.0)\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1666123125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * (std::f64::consts::PI / 180.0)\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1666123125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    let radian = degree as f64 * std::f64::consts::PI / 180.0;\n    radian\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    let radian = degree as f64 * std::f64::consts::PI / 180.0;\n    radian\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    let radian = degree as f64 * std::f64::consts::PI / 180.0;\n    radian\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1666123125,
      "stdout": "",
      "stderr": "error[E0425]: cannot find value `PI` in this scope\n --> /tmp/tmpqe6j2oc4.rs:3:21\n  |\n3 |     degree as f64 * PI / 180.0\n  |                     ^^ not found in this scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::f32::consts::PI;\n  |\n1 | use std::f64::consts::PI;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * (std::f64::consts::PI / 180.0)\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1666123125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * (std::f64::consts::PI / 180.0)\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1666123125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    let pi = std::f64::consts::PI;\n    (degree as f64) * (pi / 180.0)\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1666123125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * (std::f64::consts::PI / 180.0)\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1666123125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    let radian = degree as f64 * std::f64::consts::PI / 180.0;\n    radian\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    let pi = std::f64::consts::PI;\n    (degree as f64) * (pi / 180.0)\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1666123125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    let radian = degree as f64 * std::f64::consts::PI / 180.0;\n    radian\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    let pi = std::f64::consts::PI;\n    degree as f64 * pi / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1666123125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * (std::f64::consts::PI / 180.0)\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1666123125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    let radian = degree as f64 * std::f64::consts::PI / 180.0;\n    radian\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    let pi: f64 = std::f64::consts::PI;\n    (degree as f64) * (pi / 180.0)\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1666123125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * (std::f64::consts::PI / 180.0)\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1666123125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * (std::f64::consts::PI / 180.0)\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1666123125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    let radian = degree as f64 * std::f64::consts::PI / 180.0;\n    radian\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * (std::f64::consts::PI / 180.0)\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1666123125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    degree as f64 * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    return degree as f64 * std::f64::consts::PI / 180.0;\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1666123125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    let radian = degree as f64 * std::f64::consts::PI / 180.0;\n    radian\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    (degree as f64) * std::f64::consts::PI / 180.0\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    let radian = degree as f64 * std::f64::consts::PI / 180.0;\n    radian\n}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}