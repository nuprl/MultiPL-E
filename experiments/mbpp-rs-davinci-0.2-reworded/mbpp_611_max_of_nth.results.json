{
  "name": "mbpp_611_max_of_nth",
  "language": "rs",
  "prompt": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for row in test_list.iter() {\n        if row[N as usize] > max {\n            max = row[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max_value = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max_value {\n            max_value = test_list[i][N as usize];\n        }\n    }\n    max_value\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max_value = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max_value {\n            max_value = i[N as usize];\n        }\n    }\n    max_value\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = isize::min_value();\n    for row in test_list {\n        if row[N as usize] > max {\n            max = row[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max_val = isize::min_value();\n    for i in test_list.iter() {\n        if i[N as usize] > max_val {\n            max_val = i[N as usize];\n        }\n    }\n    max_val\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = test_list[0][N as usize];\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for row in test_list {\n        if row[N as usize] > max {\n            max = row[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max_val = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max_val {\n            max_val = test_list[i][N as usize];\n        }\n    }\n    max_val\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = test_list[0][N as usize];\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    return max;\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for row in test_list {\n        if row[N as usize] > max {\n            max = row[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = isize::min_value();\n    for row in test_list {\n        if row[N as usize] > max {\n            max = row[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = isize::min_value();\n    for row in test_list {\n        if row[N as usize] > max {\n            max = row[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    return max;\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    return max;\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    return max;\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = test_list[0][N as usize];\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    return max;\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for v in test_list {\n        if v[N as usize] > max {\n            max = v[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for row in test_list {\n        if row[N as usize] > max {\n            max = row[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for row in test_list {\n        if row[N as usize] > max {\n            max = row[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max_value = isize::min_value();\n    for row in test_list.iter() {\n        if row[N as usize] > max_value {\n            max_value = row[N as usize];\n        }\n    }\n    max_value\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = isize::min_value();\n    for row in test_list {\n        if row[N as usize] > max {\n            max = row[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for row in test_list {\n        if row[N as usize] > max {\n            max = row[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    return max;\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = isize::min_value();\n    for row in test_list {\n        if row[N as usize] > max {\n            max = row[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max_value = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max_value {\n            max_value = test_list[i][N as usize];\n        }\n    }\n    max_value\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max_value = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max_value {\n            max_value = test_list[i][N as usize];\n        }\n    }\n    max_value\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max_value = isize::min_value();\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max_value {\n            max_value = test_list[i][N as usize];\n        }\n    }\n    max_value\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for row in test_list {\n        if row[N as usize] > max {\n            max = row[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for row in test_list {\n        if row[N as usize] > max {\n            max = row[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = test_list[0][N as usize];\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    return max;\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in test_list.iter() {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    return max;\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = test_list[0][N as usize];\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpb9ncwv25.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    return max;\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    return max;\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    return max;\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for row in test_list {\n        if row[N as usize] > max {\n            max = row[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max_value = isize::min_value();\n    for row in test_list {\n        if row[N as usize] > max_value {\n            max_value = row[N as usize];\n        }\n    }\n    max_value\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    return max;\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        let mut row = test_list[i].clone();\n        if row[N as usize] > max {\n            max = row[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list.iter() {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for row in test_list {\n        if row[N as usize] > max {\n            max = row[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max: isize = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = std::isize::MIN;\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in 1..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    return max;\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for row in test_list {\n        if row[N as usize] > max {\n            max = row[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = test_list[0][N as usize];\n    for i in test_list {\n        if i[N as usize] > max {\n            max = i[N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    let mut max = 0;\n    for i in 0..test_list.len() {\n        if test_list[i][N as usize] > max {\n            max = test_list[i][N as usize];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}