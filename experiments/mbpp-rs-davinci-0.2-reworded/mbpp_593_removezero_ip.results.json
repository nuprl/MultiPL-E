{
  "name": "mbpp_593_removezero_ip",
  "language": "rs",
  "prompt": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with(\"0\") {\n            j.remove(0);\n        }\n        ip_vec_new.push(j);\n    }\n    let mut ip_new = String::new();\n    for i in ip_vec_new {\n        ip_new.push_str(&i);\n        ip_new.push_str(\".\");\n    }\n    ip_new.pop();\n    ip_new\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|x| x.to_string()).collect();\n    for i in 0..4 {\n        if ip_vec[i].len() > 1 && ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = ip_vec[i][1..].to_string();\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmphuvdnk4k.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|x| x.to_string()).collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i].remove(0);\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..4 {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    format!(\"{}.{}.{}.{}\", ip_vec[0], ip_vec[1], ip_vec[2], ip_vec[3])\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmpa7nh_xwr.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut newip = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '0' && !flag {\n            continue;\n        }\n        flag = true;\n        newip.push(c);\n    }\n    newip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpgjuyvhuj.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|x| x.to_string()).collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = ip_vec[i].replacen(\"0\", \"\", 1);\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..4 {\n        let mut j = 0;\n        while ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = &ip_vec[i][1..];\n            j += 1;\n        }\n        if j > 1 {\n            ip_vec[i] = &ip_vec[i][1..];\n        }\n    }\n    let mut ip_str = String::new();\n    for i in 0..4 {\n        ip_str.push_str(ip_vec[i]);\n        ip_str.push_str(\".\");\n    }\n    ip_str.pop();\n    ip_str\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmpz5izhtn6.rs:6:15\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_str = String::new();\n    for i in 0..ip_vec.len() {\n        let mut num = ip_vec[i].to_string();\n        while num.starts_with(\"0\") {\n            num.remove(0);\n        }\n        ip_str.push_str(&num);\n        if i != ip_vec.len() - 1 {\n            ip_str.push_str(\".\");\n        }\n    }\n    ip_str\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..4 {\n        let mut j = 0;\n        while ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmph_d6zyx4.rs:6:15\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut zero_count = 0;\n    for c in ip.chars() {\n        if c == '0' {\n            zero_count += 1;\n        } else {\n            break;\n        }\n    }\n    for c in ip.chars().skip(zero_count) {\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp495ubs1y.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|x| x.to_string()).collect();\n    for i in 0..4 {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = ip_vec[i].chars().skip(j).collect();\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmp2yrt6xmw.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = &ip_vec[i][1..];\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut flag = false;\n    for i in ip.chars() {\n        if i == '0' && flag == false {\n            continue;\n        } else {\n            flag = true;\n            new_ip.push(i);\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpzwperc9e.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut flag = false;\n    for i in ip.chars() {\n        if i == '.' {\n            result.push(i);\n            flag = false;\n        } else if i != '0' {\n            result.push(i);\n            flag = true;\n        } else if flag {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut zero = 0;\n    for i in ip.chars() {\n        if i == '0' {\n            zero += 1;\n        } else {\n            break;\n        }\n    }\n    for i in (zero..ip.len()).rev() {\n        result.push(ip.chars().nth(i).unwrap());\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"691.490.80.612\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpitj06_or.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut first = true;\n    let mut zero_count = 0;\n    for c in ip.chars() {\n        if c == '.' {\n            if first {\n                first = false;\n                continue;\n            }\n            if zero_count > 0 {\n                new_ip.push_str(&zero_count.to_string());\n                zero_count = 0;\n            }\n            new_ip.push('.');\n        } else if c == '0' {\n            zero_count += 1;\n        } else {\n            if zero_count > 0 {\n                new_ip.push_str(&zero_count.to_string());\n                zero_count = 0;\n            }\n            new_ip.push(c);\n        }\n    }\n    if zero_count > 0 {\n        new_ip.push_str(&zero_count.to_string());\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"21618.194.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmphzc2_ahz.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            flag = false;\n        } else if c != '0' {\n            result.push(c);\n            flag = true;\n        } else if flag {\n            result.push(c);\n        }\n    }\n    if result.ends_with('.') {\n        result.pop();\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i] == \"0\" {\n            ip_vec.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp08iba159.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split('.').collect();\n    for i in 0..4 {\n        let mut ip_str = ip_vec[i];\n        while ip_str.starts_with('0') {\n            ip_str = &ip_str[1..];\n        }\n        ip_vec[i] = ip_str;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmppxaug7l_.rs:5:26\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_str = String::new();\n    for i in 0..ip_vec.len() {\n        let mut num = ip_vec[i].to_string();\n        while num.starts_with('0') {\n            num.remove(0);\n        }\n        ip_str.push_str(&num);\n        if i != ip_vec.len() - 1 {\n            ip_str.push('.');\n        }\n    }\n    ip_str\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '0' && count == 0 {\n            continue;\n        } else {\n            result.push(i);\n            count += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp5a3q3psq.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            result.push(i);\n            count = 0;\n        } else if i != '0' || count != 0 {\n            result.push(i);\n            count += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut prev = '.';\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            prev = c;\n            continue;\n        }\n        if c == '0' && prev == '.' {\n            continue;\n        }\n        result.push(c);\n        prev = c;\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split('.').map(|s| s.to_string()).collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].starts_with('0') {\n            ip_vec[i] = ip_vec[i].replacen('0', \"\", 1);\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut last_char = '.';\n    for c in ip.chars() {\n        if c == '0' && last_char == '.' {\n            continue;\n        }\n        result.push(c);\n        last_char = c;\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        ip_vec_new.push(i.trim_start_matches('0').to_string());\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with(\"0\") {\n            j = j.replace(\"0\", \"\");\n        }\n        ip_vec_new.push(j);\n    }\n    let mut ip_new = String::new();\n    for i in ip_vec_new {\n        ip_new.push_str(&i);\n        ip_new.push_str(\".\");\n    }\n    ip_new.pop();\n    ip_new\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut new_ip = String::new();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        if j == ip_vec[i].len() {\n            new_ip.push_str(\"0\");\n        } else {\n            new_ip.push_str(&ip_vec[i][j..]);\n        }\n        if i != ip_vec.len() - 1 {\n            new_ip.push_str(\".\");\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut is_zero = true;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            is_zero = true;\n        } else if is_zero && c == '0' {\n            continue;\n        } else {\n            result.push(c);\n            is_zero = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut first_zero = true;\n    for c in ip.chars() {\n        if c == '0' && first_zero {\n            continue;\n        } else {\n            first_zero = false;\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmprymxbs0j.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new = Vec::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_vec_new_temp = Vec::new();\n        for j in 0..ip_vec[i].len() {\n            if ip_vec[i].chars().nth(j).unwrap() != '0' {\n                ip_vec_new_temp.push(ip_vec[i].chars().nth(j).unwrap());\n            }\n        }\n        ip_vec_new.push(ip_vec_new_temp.iter().collect::<String>());\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '0' && count == 0 {\n            continue;\n        } else {\n            new_ip.push(i);\n            count += 1;\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpdwsnooat.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_str: String = String::new();\n    for i in 0..ip_vec.len() {\n        ip_vec[i] = ip_vec[i].trim_start_matches('0');\n        if ip_vec[i] == \"\" {\n            ip_vec[i] = \"0\";\n        }\n        ip_str.push_str(ip_vec[i]);\n        if i != ip_vec.len() - 1 {\n            ip_str.push_str(\".\");\n        }\n    }\n    ip_str\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '0' && count == 0 {\n            continue;\n        } else {\n            new_ip.push(i);\n            count += 1;\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpdwsnooat.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        ip_vec_new.push(i.trim_start_matches('0').to_string());\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            flag = false;\n        } else if c == '0' && !flag {\n            continue;\n        } else {\n            result.push(c);\n            flag = true;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut i = 0;\n    let mut count = 0;\n    let mut flag = false;\n    while i < ip.len() {\n        if ip.chars().nth(i).unwrap() == '.' {\n            if count == 0 {\n                result.push('0');\n            }\n            result.push('.');\n            count = 0;\n            flag = false;\n        } else {\n            if ip.chars().nth(i).unwrap() != '0' {\n                flag = true;\n            }\n            if flag {\n                result.push(ip.chars().nth(i).unwrap());\n                count += 1;\n            }\n        }\n        i += 1;\n    }\n    if count == 0 {\n        result.push('0');\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            count = 0;\n            result.push(i);\n        } else if i == '0' && count == 0 {\n            count += 1;\n        } else {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '0' && count == 0 {\n            continue;\n        } else {\n            new_ip.push(i);\n            count += 1;\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpdwsnooat.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut zero_flag = false;\n    for c in ip.chars() {\n        if c == '0' && !zero_flag {\n            continue;\n        } else {\n            zero_flag = true;\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp2xo3temp.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut zero_count = 0;\n    for i in ip.chars() {\n        if i == '0' {\n            zero_count += 1;\n        } else {\n            break;\n        }\n    }\n    for i in ip.chars().skip(zero_count) {\n        new_ip.push(i);\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp9k7ostsl.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i] == \"0\" {\n            ip_vec.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp08iba159.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut prev_zero = false;\n    for c in ip.chars() {\n        if c == '0' && !prev_zero {\n            prev_zero = true;\n            continue;\n        }\n        if c == '.' {\n            prev_zero = false;\n        }\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split('.').collect();\n    let mut new_ip = String::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_str = String::from(ip_vec[i]);\n        if ip_str.starts_with('0') {\n            ip_str.remove(0);\n        }\n        new_ip.push_str(&ip_str);\n        if i != ip_vec.len() - 1 {\n            new_ip.push('.');\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_str = String::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_part = ip_vec[i];\n        while ip_part.starts_with(\"0\") {\n            ip_part = &ip_part[1..];\n        }\n        ip_str.push_str(ip_part);\n        if i != ip_vec.len() - 1 {\n            ip_str.push_str(\".\");\n        }\n    }\n    ip_str\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|x| x.to_string()).collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i] == \"0\" {\n            ip_vec.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpgmj8fkry.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i != '0' {\n            result.push(i);\n            count += 1;\n        }\n        if count == 2 {\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"21\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpyvcuehr1.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split('.').collect();\n    let mut ip_vec_new: Vec<&str> = Vec::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_vec_new_temp = ip_vec[i].to_string();\n        while ip_vec_new_temp.starts_with('0') {\n            ip_vec_new_temp.remove(0);\n        }\n        ip_vec_new.push(ip_vec_new_temp.as_str());\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "warning: variable does not need to be mutable\n --> /tmp/tmp3a_djo9q.rs:3:9\n  |\n3 |     let mut ip_vec: Vec<&str> = ip.split('.').collect();\n  |         ----^^^^^^\n  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\nerror[E0597]: `ip_vec_new_temp` does not live long enough\n  --> /tmp/tmp3a_djo9q.rs:10:25\n   |\n10 |         ip_vec_new.push(ip_vec_new_temp.as_str());\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n11 |     }\n   |     - `ip_vec_new_temp` dropped here while still borrowed\n12 |     ip_vec_new.join(\".\")\n   |     -------------------- borrow later used here\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0597`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_str = String::new();\n    for i in 0..ip_vec.len() {\n        let mut temp = ip_vec[i].to_string();\n        while temp.starts_with(\"0\") {\n            temp.remove(0);\n        }\n        ip_str.push_str(&temp);\n        if i != ip_vec.len() - 1 {\n            ip_str.push_str(\".\");\n        }\n    }\n    ip_str\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|x| x.to_string()).collect();\n    for i in 0..ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = ip_vec[i].replace(\"0\", \"\");\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut prev_char = '.';\n    for c in ip.chars() {\n        if c == '0' && prev_char == '.' {\n            continue;\n        }\n        new_ip.push(c);\n        prev_char = c;\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    let mut flag = false;\n    for i in ip.chars() {\n        if i == '.' {\n            count = 0;\n            flag = false;\n            result.push(i);\n        } else if i == '0' && flag == false {\n            count += 1;\n        } else {\n            flag = true;\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_vec_new_str = String::new();\n        let mut ip_vec_new_str_vec: Vec<char> = ip_vec[i].chars().collect();\n        for j in 0..ip_vec_new_str_vec.len() {\n            if ip_vec_new_str_vec[j] != '0' {\n                ip_vec_new_str.push(ip_vec_new_str_vec[j]);\n            }\n        }\n        ip_vec_new.push(ip_vec_new_str);\n    }\n    let mut ip_new = String::new();\n    for i in 0..ip_vec_new.len() {\n        ip_new.push_str(&ip_vec_new[i]);\n        if i != ip_vec_new.len() - 1 {\n            ip_new.push_str(\".\");\n        }\n    }\n    ip_new\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut temp = ip_vec[i];\n        while temp.starts_with(\"0\") {\n            temp = &temp[1..];\n        }\n        ip_vec[i] = temp;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with(\"0\") {\n            j = j.replace(\"0\", \"\");\n        }\n        ip_vec_new.push(j);\n    }\n    let mut ip_new = String::new();\n    for i in ip_vec_new {\n        ip_new.push_str(&i);\n        ip_new.push('.');\n    }\n    ip_new.pop();\n    ip_new\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut res = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '0' && !flag {\n            continue;\n        } else {\n            flag = true;\n            res.push(c);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp1n7ghlax.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for c in ip.chars() {\n        if c == '0' {\n            count += 1;\n        } else {\n            break;\n        }\n    }\n    for c in ip.chars().skip(count) {\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpiluhs9m1.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut new_ip = String::new();\n    for i in 0..ip_vec.len() {\n        let mut temp = ip_vec[i].to_string();\n        while temp.starts_with('0') {\n            temp.remove(0);\n        }\n        new_ip.push_str(&temp);\n        if i != ip_vec.len() - 1 {\n            new_ip.push('.');\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].len() > 1 && ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = &ip_vec[i][1..];\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            result.push(i);\n            count = 0;\n        } else if i != '0' || count != 0 {\n            result.push(i);\n            count += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split('.').collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with('0') {\n            j = j.chars().skip(1).collect();\n        }\n        ip_vec_new.push(j);\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut i_vec: Vec<char> = i.chars().collect();\n        let mut i_vec_new: Vec<char> = Vec::new();\n        let mut flag = false;\n        for j in i_vec {\n            if j != '0' {\n                flag = true;\n            }\n            if flag {\n                i_vec_new.push(j);\n            }\n        }\n        ip_vec_new.push(i_vec_new.into_iter().collect());\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            count = 0;\n        } else if c != '0' || count > 0 {\n            result.push(c);\n            count += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '0' && !flag {\n            continue;\n        } else {\n            flag = true;\n            new_ip.push(c);\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp1270ujp8.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '0' && count == 0 {\n            continue;\n        } else {\n            new_ip.push(i);\n            count += 1;\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpdwsnooat.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut zero_count = 0;\n    for c in ip.chars() {\n        if c == '0' {\n            zero_count += 1;\n        } else {\n            break;\n        }\n    }\n    for c in ip.chars().skip(zero_count) {\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp495ubs1y.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|s| s.to_string()).collect();\n    for i in 0..4 {\n        if ip_vec[i].len() > 1 && ip_vec[i].starts_with('0') {\n            ip_vec[i] = ip_vec[i].chars().skip(1).collect();\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmp6n87g0tt.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|x| x.to_string()).collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = ip_vec[i].replace(\"0\", \"\");\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut count = 0;\n    for c in ip.chars() {\n        if c == '.' {\n            count = 0;\n            new_ip.push(c);\n        } else if c != '0' {\n            new_ip.push(c);\n            count += 1;\n        } else if count > 0 {\n            new_ip.push(c);\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            result.push(i);\n            count = 0;\n        } else if i != '0' || count != 0 {\n            result.push(i);\n            count += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut flag = false;\n    for i in ip.chars() {\n        if i == '0' && !flag {\n            continue;\n        } else {\n            flag = true;\n            new_ip.push(i);\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp8yudnwm8.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with(\"0\") {\n            j.remove(0);\n        }\n        ip_vec_new.push(j);\n    }\n    let mut ip_new = String::new();\n    for i in ip_vec_new {\n        ip_new.push_str(&i);\n        ip_new.push_str(\".\");\n    }\n    ip_new.pop();\n    ip_new\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '0' && !flag {\n            continue;\n        }\n        flag = true;\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpl4l7sw8y.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|s| s.to_string()).collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = ip_vec[i].replace(\"0\", \"\");\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut flag = false;\n    for i in ip.chars() {\n        if i == '.' {\n            if flag {\n                result.push(i);\n            }\n            flag = false;\n        } else if i == '0' && !flag {\n            continue;\n        } else {\n            flag = true;\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            result.push(i);\n            count = 0;\n        } else if i != '0' || count != 0 {\n            result.push(i);\n            count += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut prev_is_zero = false;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            prev_is_zero = false;\n        } else if c == '0' && prev_is_zero {\n            continue;\n        } else {\n            result.push(c);\n            prev_is_zero = c == '0';\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmptpo48e7r.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with(\"0\") {\n            j = j.replace(\"0\", \"\");\n        }\n        ip_vec_new.push(j);\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut res = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            res.push(i);\n            count = 0;\n        } else if i != '0' {\n            res.push(i);\n            count += 1;\n        } else if count > 0 {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split('.').collect();\n    let mut new_ip = String::new();\n    for i in 0..ip_vec.len() {\n        let mut num = ip_vec[i].to_string();\n        while num.starts_with('0') {\n            num.remove(0);\n        }\n        new_ip.push_str(&num);\n        if i != ip_vec.len() - 1 {\n            new_ip.push('.');\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = &ip_vec[i][1..];\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i] == \"0\" {\n            ip_vec.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp08iba159.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_vec_new_str = String::new();\n        let mut ip_vec_new_str_vec: Vec<char> = ip_vec[i].chars().collect();\n        for j in 0..ip_vec_new_str_vec.len() {\n            if ip_vec_new_str_vec[j] != '0' {\n                ip_vec_new_str.push_str(&ip_vec_new_str_vec[j..ip_vec_new_str_vec.len()].iter().collect::<String>());\n                break;\n            }\n        }\n        ip_vec_new.push(ip_vec_new_str);\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            result.push(i);\n            count = 0;\n        } else if i == '0' && count == 0 {\n            continue;\n        } else {\n            result.push(i);\n            count += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|x| x.to_string()).collect();\n    for i in 0..4 {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = ip_vec[i].replace(\"0\", \"\");\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmp0z9n4ayx.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split('.').collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].len() > 1 && ip_vec[i].starts_with('0') {\n            ip_vec[i] = &ip_vec[i][1..];\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut is_zero = true;\n    for c in ip.chars() {\n        if c == '.' {\n            new_ip.push(c);\n            is_zero = true;\n        } else if c == '0' && is_zero {\n            continue;\n        } else {\n            new_ip.push(c);\n            is_zero = false;\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = &ip_vec[i][1..];\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with('0') {\n            j.remove(0);\n        }\n        ip_vec_new.push(j);\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut new_ip = String::new();\n    for i in 0..ip_vec.len() {\n        let mut num = ip_vec[i].to_string();\n        while num.starts_with(\"0\") {\n            num = num.replacen(\"0\", \"\", 1);\n        }\n        new_ip.push_str(&num);\n        if i != ip_vec.len() - 1 {\n            new_ip.push_str(\".\");\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        ip_vec[i] = ip_vec[i].trim_start_matches('0');\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '0' && !flag {\n            continue;\n        } else {\n            new_ip.push(c);\n            flag = true;\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp_h05wpvi.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '0' && !flag {\n            continue;\n        } else {\n            flag = true;\n            new_ip.push(c);\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp1270ujp8.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<&str> = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with(\"0\") {\n            j = j.replace(\"0\", \"\");\n        }\n        ip_vec_new.push(j.as_str());\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "warning: variable does not need to be mutable\n --> /tmp/tmpsz3u6y14.rs:3:9\n  |\n3 |     let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n  |         ----^^^^^^\n  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\nerror[E0597]: `j` does not live long enough\n  --> /tmp/tmpsz3u6y14.rs:10:25\n   |\n10 |         ip_vec_new.push(j.as_str());\n   |                         ^^^^^^^^^^ borrowed value does not live long enough\n11 |     }\n   |     - `j` dropped here while still borrowed\n12 |     ip_vec_new.join(\".\")\n   |     -------------------- borrow later used here\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0597`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_str = String::new();\n    for i in 0..ip_vec.len() {\n        let mut num = ip_vec[i].parse::<i32>().unwrap();\n        while num > 0 && num % 10 == 0 {\n            num /= 10;\n        }\n        ip_str.push_str(&num.to_string());\n        if i != ip_vec.len() - 1 {\n            ip_str.push('.');\n        }\n    }\n    ip_str\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with(\"0\") {\n            j.remove(0);\n        }\n        ip_vec_new.push(j);\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut i = 0;\n    let mut count = 0;\n    let mut flag = false;\n    while i < ip.len() {\n        if ip.chars().nth(i).unwrap() == '.' {\n            if flag {\n                result.push('.');\n                flag = false;\n            }\n            count = 0;\n        } else {\n            if ip.chars().nth(i).unwrap() == '0' {\n                count += 1;\n            } else {\n                if count > 0 {\n                    for _ in 0..count {\n                        result.push('0');\n                    }\n                    count = 0;\n                }\n                result.push(ip.chars().nth(i).unwrap());\n                flag = true;\n            }\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp1umw92u1.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut new_ip = String::new();\n    for i in 0..ip_vec.len() {\n        let mut new_num = String::new();\n        let mut num = ip_vec[i].to_string();\n        let mut flag = false;\n        for j in 0..num.len() {\n            if num.chars().nth(j).unwrap() == '0' && !flag {\n                continue;\n            } else {\n                flag = true;\n                new_num.push(num.chars().nth(j).unwrap());\n            }\n        }\n        if new_ip.len() == 0 {\n            new_ip.push_str(&new_num);\n        } else {\n            new_ip.push_str(\".\");\n            new_ip.push_str(&new_num);\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with(\"0\") {\n            j.remove(0);\n        }\n        ip_vec_new.push(j);\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].as_bytes()[j] == b'0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_str = String::new();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_str.push_str(&ip_vec[i][j..]);\n        if i != ip_vec.len() - 1 {\n            ip_str.push('.');\n        }\n    }\n    ip_str\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '0' && !flag {\n            continue;\n        }\n        flag = true;\n        new_ip.push(c);\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp09ke6bbh.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '.' {\n            new_ip.push(c);\n            flag = false;\n        } else if c == '0' && !flag {\n            continue;\n        } else {\n            new_ip.push(c);\n            flag = true;\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<&str> = Vec::new();\n    for i in ip_vec {\n        let mut j = 0;\n        while i.chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec_new.push(&i[j..]);\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut zero_count = 0;\n    for c in ip.chars() {\n        if c == '0' {\n            zero_count += 1;\n        } else {\n            break;\n        }\n    }\n    for c in ip.chars().skip(zero_count) {\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp495ubs1y.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_str = String::from(ip_vec[i]);\n        while ip_str.starts_with(\"0\") {\n            ip_str.remove(0);\n        }\n        ip_vec_new.push(ip_str);\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut zero_count = 0;\n    for c in ip.chars() {\n        if c == '0' {\n            zero_count += 1;\n        } else {\n            break;\n        }\n    }\n    for c in ip.chars().skip(zero_count) {\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp495ubs1y.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '0' && !flag {\n            continue;\n        }\n        flag = true;\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpl4l7sw8y.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|x| x.to_string()).collect();\n    for i in 0..ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = ip_vec[i].chars().skip(1).collect();\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '.' {\n            new_ip.push(c);\n            flag = false;\n        } else if c != '0' {\n            new_ip.push(c);\n            flag = true;\n        } else if flag {\n            new_ip.push(c);\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut res = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            res.push('.');\n            count = 0;\n        } else if i != '0' || count > 0 {\n            res.push(i);\n            count += 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut flag = false;\n    let mut flag2 = false;\n    let mut flag3 = false;\n    let mut flag4 = false;\n    let mut flag5 = false;\n    let mut flag6 = false;\n    let mut flag7 = false;\n    let mut flag8 = false;\n    let mut flag9 = false;\n    let mut flag10 = false;\n    let mut flag11 = false;\n    let mut flag12 = false;\n    let mut flag13 = false;\n    let mut flag14 = false;\n    let mut flag15 = false;\n    let mut flag16 = false;\n    let mut flag17 = false;\n    let mut flag18 = false;\n    let mut flag19 = false;\n    let mut flag20 = false;\n    let mut flag21 = false;\n    let mut flag22 = false;\n    let mut flag23 = false;\n    let mut flag24 = false;\n    let mut flag25 = false;\n    let mut flag26 = false;\n    let mut flag27 = false;\n    let mut flag28 = false;\n    let mut flag29 = false;\n    let mut flag30 = false;\n    let mut flag31 = false;\n    let mut flag32 = false;\n    let mut flag33 = false;\n    let mut flag34 = false;\n    let mut flag35 = false;\n    let mut flag36 = false;\n    let mut flag37 = false;\n    let mut flag38 = false;\n    let mut flag39 = false;\n    let mut flag40 = false;\n    let mut flag41 = false;\n    let mut flag42 = false;\n    let mut flag43 = false;\n    let mut flag44 = false;\n    let mut flag45 = false;\n    let mut flag46 = false;\n    let mut flag47 = false;\n    let mut flag48 = false;\n    let mut flag49 = false;\n    let mut flag50 = false;\n    let mut flag51 = false;\n    let mut flag52 = false;\n    let mut flag53 = false;\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp1sdmxczr.rs:2:33\n  |\n2 | fn removezero_ip(ip: String) -> String {\n  |    -------------                ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_str = String::new();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        let mut ip_num = String::new();\n        while j < ip_vec[i].len() {\n            if ip_vec[i].chars().nth(j).unwrap() != '0' {\n                break;\n            }\n            j += 1;\n        }\n        ip_num.push_str(&ip_vec[i][j..]);\n        ip_str.push_str(&ip_num);\n        if i != ip_vec.len() - 1 {\n            ip_str.push('.');\n        }\n    }\n    ip_str\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut new_ip = String::new();\n    for i in 0..ip_vec.len() {\n        let mut temp = ip_vec[i].to_string();\n        while temp.starts_with(\"0\") {\n            temp.remove(0);\n        }\n        new_ip.push_str(&temp);\n        if i != ip_vec.len() - 1 {\n            new_ip.push_str(\".\");\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split('.').map(|s| s.to_string()).collect();\n    for i in 0..4 {\n        if ip_vec[i].starts_with('0') {\n            ip_vec[i] = ip_vec[i].trim_start_matches('0').to_string();\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmp7kjmvdyq.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_str = ip_vec[i].to_string();\n        while ip_str.starts_with(\"0\") {\n            ip_str.remove(0);\n        }\n        ip_vec_new.push(ip_str);\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut zero = true;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            zero = true;\n        } else if c != '0' || !zero {\n            result.push(c);\n            zero = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = &ip_vec[i][1..];\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_str = String::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_num = ip_vec[i].to_string();\n        while ip_num.starts_with('0') {\n            ip_num = ip_num.split_off(1);\n        }\n        ip_str.push_str(&ip_num);\n        if i != ip_vec.len() - 1 {\n            ip_str.push('.');\n        }\n    }\n    ip_str\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut new_ip = String::new();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        new_ip.push_str(&ip_vec[i][j..]);\n        if i != ip_vec.len() - 1 {\n            new_ip.push('.');\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_str = ip_vec[i].to_string();\n        while ip_str.starts_with(\"0\") {\n            ip_str.remove(0);\n        }\n        ip_vec_new.push(ip_str);\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < ip.len() {\n        if ip.chars().nth(i).unwrap() == '.' {\n            if zero_count > 0 {\n                result.push_str(&zero_count.to_string());\n            }\n            result.push('.');\n            zero_count = 0;\n        } else if ip.chars().nth(i).unwrap() == '0' {\n            zero_count += 1;\n        } else {\n            if zero_count > 0 {\n                result.push_str(&zero_count.to_string());\n            }\n            result.push(ip.chars().nth(i).unwrap());\n            zero_count = 0;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.18.194.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpz67ktdw5.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '0' && !flag {\n            continue;\n        } else {\n            flag = true;\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpmsgasy8w.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i] == \"0\" {\n            ip_vec.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp08iba159.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i] == \"0\" {\n            ip_vec.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp08iba159.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            result.push(i);\n            count = 0;\n        } else if i != '0' {\n            result.push(i);\n            count += 1;\n        } else if count > 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n    let mut ppp =\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n  --> /tmp/tmpfx88nb51.rs:64:1\n   |\n64 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..4 {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = &ip_vec[i][1..];\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmps1z72n9r.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            new_ip.push(i);\n            count = 0;\n        } else if i == '0' && count == 0 {\n            continue;\n        } else {\n            new_ip.push(i);\n            count += 1;\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut zero_flag = true;\n    for c in ip.chars() {\n        if c == '0' && zero_flag {\n            continue;\n        }\n        zero_flag = false;\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp126o7uky.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_str = String::from(ip_vec[i]);\n        while ip_str.starts_with(\"0\") {\n            ip_str.remove(0);\n        }\n        ip_vec_new.push(ip_str);\n    }\n    let mut ip_new = String::new();\n    for i in 0..ip_vec_new.len() {\n        if i == ip_vec_new.len() - 1 {\n            ip_new.push_str(&ip_vec_new[i]);\n        } else {\n            ip_new.push_str(&ip_vec_new[i]);\n            ip_new.push_str(\".\");\n        }\n    }\n    ip_new\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split('.').map(|s| s.to_string()).collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].starts_with('0') {\n            ip_vec[i] = ip_vec[i].replace(\"0\", \"\");\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            result.push(i);\n            count = 0;\n        } else if i != '0' {\n            result.push(i);\n            count += 1;\n        } else if count > 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split('.').collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut flag = false;\n    let mut flag2 = false;\n    let mut flag3 = false;\n    let mut flag4 = false;\n    let mut flag5 = false;\n    let mut flag6 = false;\n    let mut flag7 = false;\n    let mut flag8 = false;\n    let mut flag9 = false;\n    let mut flag10 = false;\n    let mut flag11 = false;\n    let mut flag12 = false;\n    let mut flag13 = false;\n    let mut flag14 = false;\n    let mut flag15 = false;\n    let mut flag16 = false;\n    let mut flag17 = false;\n    let mut flag18 = false;\n    let mut flag19 = false;\n    let mut flag20 = false;\n    let mut flag21 = false;\n    let mut flag22 = false;\n    let mut flag23 = false;\n    let mut flag24 = false;\n    let mut flag25 = false;\n    let mut flag26 = false;\n    let mut flag27 = false;\n    let mut flag28 = false;\n    let mut flag29 = false;\n    let mut flag30 = false;\n    let mut flag31 = false;\n    let mut flag32 = false;\n    let mut flag33 = false;\n    let mut flag34 = false;\n    let mut flag35 = false;\n    let mut flag36 = false;\n    let mut flag37 = false;\n    let mut flag38 = false;\n    let mut flag39 = false;\n    let mut flag40 = false;\n    let mut flag41 = false;\n    let mut flag42 = false;\n    let mut flag43 = false;\n    let mut flag44 = false;\n    let mut flag45 = false;\n    let mut flag46 = false;\n    let mut flag47 = false;\n    let mut flag48 = false;\n    let mut flag49 = false;\n    let mut flag50 = false;\n    let mut flag51 = false;\n    let mut flag52 = false;\n    let mut flag53 = false;\n   \n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpdzflvum2.rs:2:33\n  |\n2 | fn removezero_ip(ip: String) -> String {\n  |    -------------                ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            new_ip.push(i);\n            count = 0;\n        } else if i == '0' && count == 0 {\n            continue;\n        } else {\n            new_ip.push(i);\n            count += 1;\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '0' && count == 0 {\n            continue;\n        } else {\n            result.push(i);\n            count += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp5a3q3psq.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            flag = false;\n        } else if c != '0' {\n            result.push(c);\n            flag = true;\n        } else if flag {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut i_vec: Vec<char> = i.chars().collect();\n        let mut i_vec_new: Vec<char> = Vec::new();\n        let mut flag = false;\n        for j in i_vec {\n            if j == '0' && !flag {\n                continue;\n            } else {\n                flag = true;\n                i_vec_new.push(j);\n            }\n        }\n        ip_vec_new.push(i_vec_new.iter().collect());\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut new_ip = String::new();\n    for i in 0..ip_vec.len() {\n        let mut num = ip_vec[i].to_string();\n        while num.starts_with(\"0\") {\n            num.remove(0);\n        }\n        new_ip.push_str(&num);\n        if i != ip_vec.len() - 1 {\n            new_ip.push('.');\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i] == \"0\" {\n            ip_vec.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp08iba159.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            count = 0;\n        } else if c == '0' && count == 0 {\n            continue;\n        } else {\n            result.push(c);\n            count += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut prev_char = '.';\n    for ch in ip.chars() {\n        if ch != '0' || prev_char == '.' {\n            result.push(ch);\n        }\n        prev_char = ch;\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp0t772iou.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut count = 0;\n    let mut flag = false;\n    for i in ip.chars() {\n        if i == '.' {\n            count = 0;\n            new_ip.push(i);\n            continue;\n        }\n        if i == '0' && count == 0 {\n            count += 1;\n            flag = true;\n            continue;\n        }\n        if flag {\n            new_ip.push(i);\n            flag = false;\n        }\n        new_ip.push(i);\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.88.994.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpqa48kpji.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut flag = false;\n    for ch in ip.chars() {\n        if ch == '.' {\n            new_ip.push(ch);\n            flag = false;\n        } else if ch != '0' {\n            new_ip.push(ch);\n            flag = true;\n        } else if flag {\n            new_ip.push(ch);\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            flag = false;\n        } else if c != '0' {\n            result.push(c);\n            flag = true;\n        } else if flag {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut flag = false;\n    let mut ip_vec: Vec<char> = ip.chars().collect();\n    while i < ip_vec.len() {\n        if ip_vec[i] == '.' {\n            if flag {\n                result.push_str(&ip[j..i]);\n                result.push('.');\n                flag = false;\n            }\n            j = i + 1;\n            count = 0;\n        } else if ip_vec[i] == '0' {\n            count += 1;\n            if count > 1 {\n                flag = true;\n            }\n        } else {\n            count = 0;\n        }\n        i += 1;\n    }\n    if flag {\n        result.push_str(&ip[j..i]);\n    } else {\n        result.push_str(&ip);\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpi135wv6u.rs:38:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result: String = String::new();\n    let mut zero_flag: bool = false;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            zero_flag = false;\n        } else if c == '0' && !zero_flag {\n            zero_flag = true;\n        } else {\n            result.push(c);\n            zero_flag = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut zeroflag = true;\n    for i in ip.chars() {\n        if i == '.' {\n            result.push(i);\n            zeroflag = true;\n        } else if i == '0' && zeroflag {\n            continue;\n        } else {\n            result.push(i);\n            zeroflag = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_vec_new_str = String::new();\n        let mut ip_vec_new_str_vec: Vec<char> = ip_vec[i].chars().collect();\n        let mut ip_vec_new_str_vec_len = ip_vec_new_str_vec.len();\n        for j in 0..ip_vec_new_str_vec_len {\n            if ip_vec_new_str_vec[0] == '0' {\n                ip_vec_new_str_vec.remove(0);\n            } else {\n                break;\n            }\n        }\n        for j in 0..ip_vec_new_str_vec.len() {\n            ip_vec_new_str.push(ip_vec_new_str_vec[j]);\n        }\n        ip_vec_new.push(ip_vec_new_str);\n    }\n    let mut ip_new = String::new();\n    for i in 0..ip_vec_new.len() {\n        ip_new.push_str(&ip_vec_new[i]);\n        if i != ip_vec_new.len() - 1 {\n            ip_new.push_str(\".\");\n        }\n    }\n    ip_new\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split('.').map(|s| s.to_string()).collect();\n    for i in 0..4 {\n        if ip_vec[i].starts_with('0') {\n            ip_vec[i] = ip_vec[i].replace(\"0\", \"\");\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmpsn117r25.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            count = 0;\n            new_ip.push(i);\n        } else if i == '0' && count == 0 {\n            continue;\n        } else {\n            new_ip.push(i);\n            count += 1;\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut res = String::new();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        res.push_str(&ip_vec[i][j..]);\n        if i != ip_vec.len() - 1 {\n            res.push('.');\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '0' && count == 0 {\n            continue;\n        } else {\n            result.push(i);\n            count += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp5a3q3psq.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '0' {\n            count += 1;\n        } else {\n            break;\n        }\n    }\n    for i in ip.chars().skip(count) {\n        new_ip.push(i);\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpp8jwwnd8.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut flag = false;\n    for i in ip.chars() {\n        if i == '.' {\n            new_ip.push(i);\n            flag = false;\n        } else if i != '0' {\n            new_ip.push(i);\n            flag = true;\n        } else if flag {\n            new_ip.push(i);\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i] == \"0\" {\n            ip_vec.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp08iba159.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '.' {\n            new_ip.push(c);\n            flag = false;\n        } else if c != '0' {\n            new_ip.push(c);\n            flag = true;\n        } else if flag {\n            new_ip.push(c);\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<&str> = Vec::new();\n    for i in ip_vec {\n        if i.starts_with(\"0\") {\n            ip_vec_new.push(&i[1..]);\n        } else {\n            ip_vec_new.push(i);\n        }\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = Vec::new();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    let mut ip_new = String::new();\n    for i in ip.split(\".\") {\n        ip_vec.push(i.to_string());\n    }\n    for i in ip_vec {\n        if i.len() > 1 && i.starts_with(\"0\") {\n            ip_vec_new.push(i[1..].to_string());\n        } else {\n            ip_vec_new.push(i);\n        }\n    }\n    for i in ip_vec_new {\n        ip_new.push_str(&i);\n        ip_new.push_str(\".\");\n    }\n    ip_new.pop();\n    ip_new\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..4 {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmpgn202eqe.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for c in ip.chars() {\n        if c == '0' && count == 0 {\n            continue;\n        } else {\n            result.push(c);\n            count += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp1udbvo_s.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_str = String::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_num = ip_vec[i].parse::<u32>().unwrap();\n        while ip_num > 0 && ip_num % 10 == 0 {\n            ip_num /= 10;\n        }\n        ip_str.push_str(&ip_num.to_string());\n        if i != ip_vec.len() - 1 {\n            ip_str.push_str(\".\");\n        }\n    }\n    ip_str\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    let mut ip_str = String::new();\n    for i in 0..ip_vec.len() {\n        ip_str.push_str(ip_vec[i]);\n        if i != ip_vec.len() - 1 {\n            ip_str.push('.');\n        }\n    }\n    ip_str\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_clone = ip_vec.clone();\n\n    for i in 0..ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec_clone[i] = &ip_vec[i][1..];\n        }\n    }\n\n    ip_vec_clone.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|x| x.to_string()).collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = ip_vec[i][j..].to_string();\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut flag = false;\n    let mut temp = String::new();\n    let mut temp_ip = ip.clone();\n    while i < ip.len() {\n        if ip.chars().nth(i).unwrap() == '.' {\n            if flag == false {\n                temp = temp_ip.clone();\n                temp.truncate(i);\n                temp_ip.drain(0..i + 1);\n                result.push_str(&temp);\n                result.push('.');\n                i = 0;\n                flag = true;\n            } else {\n                result.push_str(&temp_ip.clone());\n                temp_ip.drain(0..i + 1);\n                result.push('.');\n                i = 0;\n            }\n        } else {\n            i += 1;\n        }\n    }\n    result.push_str(&temp_ip.clone());\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'range end index 4 out of range for slice of length 2', library/core/src/slice/index.rs:73:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '0' {\n            count += 1;\n        } else {\n            break;\n        }\n    }\n    for i in count..ip.len() {\n        result.push(ip.chars().nth(i).unwrap());\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpyq5g3xsp.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with(\"0\") {\n            j = j.chars().skip(1).collect();\n        }\n        ip_vec_new.push(j);\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut ip_str = ip_vec[i].to_string();\n        while ip_str.starts_with(\"0\") {\n            ip_str.remove(0);\n        }\n        ip_vec[i] = ip_str.as_str();\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "error[E0597]: `ip_str` does not live long enough\n  --> /tmp/tmp9j6uugk6.rs:9:21\n   |\n5  |         let mut ip_str = ip_vec[i].to_string();\n   |                          ------ borrow later used here\n...\n9  |         ip_vec[i] = ip_str.as_str();\n   |                     ^^^^^^^^^^^^^^^ borrowed value does not live long enough\n10 |     }\n   |     - `ip_str` dropped here while still borrowed\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0597`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..4 {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmpgn202eqe.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            count = 0;\n            result.push(i);\n        } else if i == '0' && count == 0 {\n            continue;\n        } else {\n            count += 1;\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut flag = false;\n    let mut flag2 = false;\n    let mut flag3 = false;\n    let mut flag4 = false;\n    let mut flag5 = false;\n    let mut flag6 = false;\n    let mut flag7 = false;\n    let mut flag8 = false;\n    let mut flag9 = false;\n    let mut flag10 = false;\n    let mut flag11 = false;\n    let mut flag12 = false;\n    let mut flag13 = false;\n    let mut flag14 = false;\n    let mut flag15 = false;\n    let mut flag16 = false;\n    let mut flag17 = false;\n    let mut flag18 = false;\n    let mut flag19 = false;\n    let mut flag20 = false;\n    let mut flag21 = false;\n    let mut flag22 = false;\n    let mut flag23 = false;\n    let mut flag24 = false;\n    let mut flag25 = false;\n    let mut flag26 = false;\n    let mut flag27 = false;\n    let mut flag28 = false;\n    let mut flag29 = false;\n    let mut flag30 = false;\n    let mut flag31 = false;\n    let mut flag32 = false;\n    let mut flag33 = false;\n    let mut flag34 = false;\n    let mut flag35 = false;\n    let mut flag36 = false;\n    let mut flag37 = false;\n    let mut flag38 = false;\n    let mut flag39 = false;\n    let mut flag40 = false;\n    let mut flag41 = false;\n    let mut flag42 = false;\n    let mut flag43 = false;\n    let mut flag44 = false;\n    let mut flag45 = false;\n    let mut flag46 = false;\n    let mut flag47 = false;\n    let mut flag48 = false;\n    let mut flag49 = false;\n    let mut flag50 = false;\n    let mut flag51 = false;\n    let mut flag52 = false;\n    let mut flag53 = false;\n   \n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpdzflvum2.rs:2:33\n  |\n2 | fn removezero_ip(ip: String) -> String {\n  |    -------------                ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '0' && !flag {\n            continue;\n        } else {\n            flag = true;\n            new_ip.push(c);\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp1270ujp8.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split('.').map(|x| x.to_string()).collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = ip_vec[i][j..].to_string();\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result: String = String::new();\n    let mut count: u32 = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            result.push(i);\n            count = 0;\n        } else if i == '0' && count == 0 {\n            continue;\n        } else {\n            result.push(i);\n            count += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        if i.starts_with(\"0\") {\n            ip_vec_new.push(i.trim_start_matches(\"0\").to_string());\n        } else {\n            ip_vec_new.push(i.to_string());\n        }\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with(\"0\") {\n            j = j.replace(\"0\", \"\");\n        }\n        ip_vec_new.push(j);\n    }\n    let mut ip_new = String::new();\n    for i in ip_vec_new {\n        ip_new.push_str(&i);\n        ip_new.push_str(\".\");\n    }\n    ip_new.pop();\n    ip_new\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for c in ip.chars() {\n        if c == '0' && count == 0 {\n            continue;\n        } else {\n            result.push(c);\n            count += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp1udbvo_s.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut is_zero = true;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            is_zero = true;\n        } else if c != '0' || !is_zero {\n            result.push(c);\n            is_zero = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '0' && !flag {\n            continue;\n        } else {\n            flag = true;\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpmsgasy8w.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|s| s.to_string()).collect();\n    for i in 0..ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = ip_vec[i].replace(\"0\", \"\");\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            count = 0;\n        } else if c == '0' && count == 0 {\n            continue;\n        } else {\n            result.push(c);\n            count += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<&str> = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with(\"0\") {\n            j.remove(0);\n        }\n        ip_vec_new.push(j.as_str());\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "warning: variable does not need to be mutable\n --> /tmp/tmpuqiwwqpl.rs:3:9\n  |\n3 |     let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n  |         ----^^^^^^\n  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\nerror[E0597]: `j` does not live long enough\n  --> /tmp/tmpuqiwwqpl.rs:10:25\n   |\n10 |         ip_vec_new.push(j.as_str());\n   |                         ^^^^^^^^^^ borrowed value does not live long enough\n11 |     }\n   |     - `j` dropped here while still borrowed\n12 |     ip_vec_new.join(\".\")\n   |     -------------------- borrow later used here\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0597`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i][j] == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "error[E0277]: the type `str` cannot be indexed by `usize`\n --> /tmp/tmpjgrgtwgi.rs:6:38\n  |\n6 |         while j < ip_vec[i].len() && ip_vec[i][j] == '0' {\n  |                                      ^^^^^^^^^^^^ string indices are ranges of `usize`\n  |\n  = help: the trait `SliceIndex<str>` is not implemented for `usize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<usize>` for `str`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|x| x.to_string()).collect();\n    for i in 0..ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = ip_vec[i].replace(\"0\", \"\");\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut new_ip = String::new();\n    for i in 0..ip_vec.len() {\n        let mut num = String::from(ip_vec[i]);\n        while num.starts_with(\"0\") {\n            num.remove(0);\n        }\n        new_ip.push_str(&num);\n        if i != ip_vec.len() - 1 {\n            new_ip.push_str(\".\");\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i] == \"0\" {\n            ip_vec.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp08iba159.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = &ip_vec[i][1..];\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}