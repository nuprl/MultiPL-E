{
  "name": "mbpp_756_text_match_zero_one",
  "language": "rs",
  "prompt": "/// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/rsthon-exercises/re/rsthon-re-exercise-3.php\nfn text_match_zero_one(text: String) -> bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_756_text_match_zero_one.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = text_match_zero_one;\n    assert_eq!(candidate(String::from(\"ac\")), false);\n    assert_eq!(candidate(String::from(\"dc\")), false);\n    assert_eq!(candidate(String::from(\"abbbba\")), true);\n    assert_eq!(candidate(String::from(\"dsabbbba\")), true);\n    assert_eq!(candidate(String::from(\"asbbbba\")), false);\n    assert_eq!(candidate(String::from(\"abaaa\")), true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let re = Regex::new(r\"^ab+$\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"^a(b|bb)*$\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"^a(b|bb)*$\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"^a(b)+$\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"^ab+$\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"^ab+$\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab?\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"^a(b|bb)*$\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"^a(b|bb)*$\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"^ab+$\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"^ab*$\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"^a(b+)?$\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab?\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"^a(b|bb)$\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab?\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab?\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab?\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"^a(b|bb)*$\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"^ab+$\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab?\").unwrap();\n    re.is_match(&text)"
  ]
}