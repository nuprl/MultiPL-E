{
  "name": "mbpp_643_text_match_wordz_middle",
  "language": "rs",
  "prompt": "/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfn text_match_wordz_middle(text: String) -> bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = text_match_wordz_middle;\n    assert_eq!(candidate(String::from(\"pythonzabc.\")), true);\n    assert_eq!(candidate(String::from(\"zxyabc.\")), false);\n    assert_eq!(candidate(String::from(\"  lang  .\")), false);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut result = false;\n    for (i, c) in text.chars().enumerate() {\n        if c == 'z' && i > 0 && i < text.len() - 1 {\n            result = true;\n        }\n    }\n    result",
    "    text.matches(\"z\").count() > 1",
    "    text.contains(\"z\") && !text.starts_with(\"z\") && !text.ends_with(\"z\")",
    "    text.contains(\"z\") && !text.starts_with(\"z\") && !text.ends_with(\"z\")",
    "    let mut result = false;\n    let mut first_z = false;\n    let mut last_z = false;\n    for c in text.chars() {\n        if c == 'z' && !first_z {\n            first_z = true;\n        } else if c == 'z' && first_z {\n            last_z = true;\n        }\n    }\n    if first_z && last_z {\n        result = true;\n    }\n    result",
    "    let mut result = false;\n    let mut index = 0;\n    let mut z_index = 0;\n    let mut z_count = 0;\n    for c in text.chars() {\n        if c == 'z' {\n            z_count += 1;\n            z_index = index;\n        }\n        index += 1;\n    }\n    if z_count == 1 {\n        if z_index > 0 && z_index < text.len() - 1 {\n            result = true;\n        }\n    }\n    result",
    "    let mut result = false;\n    let mut start = false;\n    let mut end = false;\n    for c in text.chars() {\n        if c == 'z' {\n            if start {\n                end = true;\n            } else {\n                start = true;\n            }\n        }\n    }\n    if start && end {\n        result = true;\n    }\n    result",
    "    let mut result = false;\n    let mut start_index = 0;\n    let mut end_index = text.len() - 1;\n    let mut i = 0;\n    while i < text.len() {\n        if text.chars().nth(i).unwrap() == 'z' {\n            if i != start_index && i != end_index {\n                result = true;\n                break;\n            }\n        }\n        i += 1;\n    }\n    result",
    "    let mut result = false;\n    let mut word_start = false;\n    let mut word_end = false;\n    for c in text.chars() {\n        if c == 'z' && !word_start && !word_end {\n            result = true;\n        }\n        if c == ' ' {\n            word_start = false;\n            word_end = false;\n        }\n        if !word_start {\n            word_start = true;\n        }\n        if word_start && !word_end {\n            word_end = true;\n        }\n    }\n    result",
    "    let mut result = false;\n    let mut text_iter = text.chars();\n    let mut prev_char = text_iter.next();\n    for c in text_iter {\n        if prev_char.unwrap() != 'z' && c != 'z' && c == 'z' {\n            result = true;\n        }\n        prev_char = Some(c);\n    }\n    result",
    "    let mut result = false;\n    let mut start = false;\n    let mut end = false;\n    for c in text.chars() {\n        if c == 'z' {\n            if start {\n                end = true;\n            } else {\n                start = true;\n            }\n        }\n    }\n    if start && end {\n        result = true;\n    }\n    result",
    "    let mut result = false;\n    let mut start = false;\n    let mut end = false;\n    for c in text.chars() {\n        if c == 'z' && !start && !end {\n            result = true;\n        }\n        if c == 'z' && start {\n            end = true;\n        }\n        if c != 'z' && !start {\n            start = true;\n        }\n    }\n    result",
    "    let mut result = false;\n    let mut start = false;\n    let mut end = false;\n\n    for c in text.chars() {\n        if c == 'z' {\n            if start {\n                end = true;\n            } else {\n                start = true;\n            }\n        }\n    }\n\n    if start && end {\n        result = true;\n    }\n\n    result",
    "    let mut result = false;\n    let mut first_char = true;\n    let mut last_char = false;\n    for c in text.chars() {\n        if first_char {\n            first_char = false;\n            continue;\n        }\n        if last_char {\n            break;\n        }\n        if c == 'z' {\n            result = true;\n        }\n        if c == ' ' {\n            last_char = true;\n        }\n    }\n    result",
    "    let re = Regex::new(r\"\\bz\\b\").unwrap();\n    re.is_match(&text)",
    "    let mut result = false;\n    let mut first_char = true;\n    let mut last_char = false;\n    for c in text.chars() {\n        if first_char {\n            first_char = false;\n            continue;\n        }\n        if last_char {\n            break;\n        }\n        if c == 'z' {\n            result = true;\n            last_char = true;\n        }\n    }\n    result",
    "    let mut result = false;\n    let mut counter = 0;\n    for c in text.chars() {\n        if c == 'z' {\n            if counter > 0 && counter < text.len() - 1 {\n                result = true;\n                break;\n            }\n        }\n        counter += 1;\n    }\n    result",
    "    text.contains(\"z\") && !text.starts_with(\"z\") && !text.ends_with(\"z\")",
    "    let mut result = false;\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    let mut last = chars.next_back();\n    for c in chars {\n        if c == 'z' && first != Some('z') && last != Some('z') {\n            result = true;\n            break;\n        }\n        first = last;\n        last = Some(c);\n    }\n    result",
    "    text.contains(\"z\") && !text.starts_with(\"z\") && !text.ends_with(\"z\")"
  ]
}