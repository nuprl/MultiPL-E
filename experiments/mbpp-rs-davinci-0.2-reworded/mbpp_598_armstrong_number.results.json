{
  "name": "mbpp_598_armstrong_number",
  "language": "rs",
  "prompt": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut number = number;\n    while number > 0 {\n        let digit = number % 10;\n        sum += digit * digit * digit;\n        number /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpo1lm1q9n.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().fold(0, |acc, x| acc + x.pow(digits.len() as u32));\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpe6h239im.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut digits = Vec::new();\n    let mut n = number;\n    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpi1lfdfn6.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut digits = Vec::new();\n    while num > 0 {\n        digits.push(num % 10);\n        num = num / 10;\n    }\n    let mut sum = 0;\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmpf7rt5qng.rs:11:26\n    |\n4   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut num = number;\n    let mut digits = 0;\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n    num = number;\n    while num > 0 {\n        let digit = num % 10;\n        sum += digit.pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut temp = number;\n    let digits = number.to_string().len() as isize;\n    while temp > 0 {\n        let digit = temp % 10;\n        sum += digit.pow(digits);\n        temp /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmppj8_ynfl.rs:8:26\n  |\n8 |         sum += digit.pow(digits);\n  |                          ^^^^^^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n8 |         sum += digit.pow(digits.try_into().unwrap());\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut temp = number;\n    let mut digits = 0;\n    while temp > 0 {\n        digits += 1;\n        temp /= 10;\n    }\n    temp = number;\n    while temp > 0 {\n        sum += (temp % 10).pow(digits);\n        temp /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().fold(0, |acc, &x| acc + x.pow(digits.len() as u32));\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmphfi4eyo9.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut digits = Vec::new();\n    while num != 0 {\n        digits.push(num % 10);\n        num /= 10;\n    }\n    let len = digits.len();\n    let sum = digits.iter().map(|x| x.pow(len as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n  --> /tmp/tmpqwi5u60t.rs:10:9\n   |\n10 |     let sum = digits.iter().map(|x| x.pow(len as u32)).sum();\n   |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|d| d.pow(digits.len() as u32)).sum::<isize>();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpsnez9ug3.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut temp = number;\n    let mut digits = 0;\n    while temp > 0 {\n        digits += 1;\n        temp /= 10;\n    }\n    temp = number;\n    while temp > 0 {\n        let digit = temp % 10;\n        sum += digit.pow(digits);\n        temp /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let n = digits.len() as isize;\n    let sum: isize = digits.iter().map(|x| x.pow(n)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpxq0jjpkb.rs:10:50\n   |\n10 |     let sum: isize = digits.iter().map(|x| x.pow(n)).sum();\n   |                                                  ^ expected `u32`, found `isize`\n   |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n   |\n10 |     let sum: isize = digits.iter().map(|x| x.pow(n.try_into().unwrap())).sum();\n   |                                                   ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut temp = number;\n    let mut digits = 0;\n    while temp > 0 {\n        digits += 1;\n        temp /= 10;\n    }\n    temp = number;\n    while temp > 0 {\n        sum += (temp % 10).pow(digits);\n        temp /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number = number / 10;\n    }\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmpaj73sdsx.rs:11:26\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().fold(0, |acc, x| acc + x.pow(digits.len() as u32));\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpe6h239im.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number_copy = number;\n    let mut digits = Vec::new();\n    while number_copy > 0 {\n        digits.push(number_copy % 10);\n        number_copy /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpgsakyhf7.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut n = number;\n    let mut sum = 0;\n    let mut digits = Vec::new();\n    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmptqan8mys.rs:11:26\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number = number / 10;\n    }\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmpaj73sdsx.rs:11:26\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpkapnoqjp.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut sum = 0;\n    let mut digits = 0;\n    while number > 0 {\n        digits += 1;\n        number /= 10;\n    }\n    number = number.abs();\n    while number > 0 {\n        sum += (number % 10).pow(digits);\n        number /= 10;\n    }\n    sum == number.abs()\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_es44r01.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digits = 0;\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n    num = number;\n    while num > 0 {\n        let digit = num % 10;\n        sum += digit.pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digits = Vec::new();\n    while num > 0 {\n        digits.push(num % 10);\n        num /= 10;\n    }\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmpgad3zxl9.rs:11:26\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let mut sum = 0;\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmp_l6d_e98.rs:11:26\n    |\n4   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().fold(0, |acc, &x| acc + x.pow(digits.len() as u32));\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmphfi4eyo9.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().fold(0, |acc, x| acc + x.pow(digits.len() as u32));\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpe6h239im.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut temp = number;\n    let length = number.to_string().len() as isize;\n\n    while temp > 0 {\n        let digit = temp % 10;\n        sum += digit.pow(length);\n        temp /= 10;\n    }\n\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp45tb0_68.rs:9:26\n  |\n9 |         sum += digit.pow(length);\n  |                          ^^^^^^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n9 |         sum += digit.pow(length.try_into().unwrap());\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut digits = Vec::new();\n    while num > 0 {\n        digits.push(num % 10);\n        num /= 10;\n    }\n    let len = digits.len() as isize;\n    let sum = digits.iter().map(|x| x.pow(len)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpax2agr91.rs:10:43\n   |\n10 |     let sum = digits.iter().map(|x| x.pow(len)).sum();\n   |                                           ^^^ expected `u32`, found `isize`\n   |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n   |\n10 |     let sum = digits.iter().map(|x| x.pow(len.try_into().unwrap())).sum();\n   |                                              ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum::<isize>();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmptgr23lw9.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut temp = number;\n    let mut digits = 0;\n    while temp > 0 {\n        digits += 1;\n        temp /= 10;\n    }\n    temp = number;\n    while temp > 0 {\n        sum += (temp % 10).pow(digits);\n        temp /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut temp = number;\n    let mut sum = 0;\n    let mut rem;\n    while temp > 0 {\n        rem = temp % 10;\n        sum = sum + rem * rem * rem;\n        temp = temp / 10;\n    }\n    if sum == number {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number_copy = number;\n    let mut digits = Vec::new();\n    while number_copy > 0 {\n        digits.push(number_copy % 10);\n        number_copy /= 10;\n    }\n    let mut sum = 0;\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmpre84ldkx.rs:11:26\n    |\n4   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digits = Vec::new();\n    while num > 0 {\n        digits.push(num % 10);\n        num /= 10;\n    }\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmpgad3zxl9.rs:11:26\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().fold(0, |acc, x| acc + x.pow(digits.len() as u32));\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpe6h239im.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut sum = 0;\n    let mut digits = 0;\n    while number > 0 {\n        digits += 1;\n        number /= 10;\n    }\n    number = number.abs();\n    while number > 0 {\n        sum += (number % 10).pow(digits);\n        number /= 10;\n    }\n    sum == number.abs()\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_es44r01.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|&x| x.pow(digits.len() as u32)).sum::<isize>();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpcim8h680.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpkapnoqjp.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digit = 0;\n    let mut digits = 0;\n    while num > 0 {\n        digit = num % 10;\n        digits += 1;\n        sum += digit.pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpg36trw14.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|d| d.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpyhz1ta0f.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|d| d.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|&d| d.pow(digits.len() as u32)).sum::<isize>();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpr34mij82.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum::<isize>();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmptgr23lw9.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum::<isize>();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmptgr23lw9.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut temp = number;\n    let mut digits = 0;\n    while temp > 0 {\n        digits += 1;\n        temp /= 10;\n    }\n    temp = number;\n    while temp > 0 {\n        sum += (temp % 10).pow(digits);\n        temp /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let mut sum = 0;\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmp_l6d_e98.rs:11:26\n    |\n4   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits: Vec<isize> = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let length = digits.len() as isize;\n    let sum = digits.iter().map(|x| x.pow(length)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpkvfhs8or.rs:10:43\n   |\n10 |     let sum = digits.iter().map(|x| x.pow(length)).sum();\n   |                                           ^^^^^^ expected `u32`, found `isize`\n   |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n   |\n10 |     let sum = digits.iter().map(|x| x.pow(length.try_into().unwrap())).sum();\n   |                                                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    let mut sum = 0;\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmp091x633p.rs:11:26\n    |\n4   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut digits = Vec::new();\n    let mut num = number;\n    while num > 0 {\n        digits.push(num % 10);\n        num /= 10;\n    }\n    let mut sum = 0;\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmpe504ea0f.rs:11:26\n    |\n3   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digits = 0;\n\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n\n    num = number;\n    while num > 0 {\n        sum += (num % 10).pow(digits);\n        num /= 10;\n    }\n\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpkapnoqjp.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum::<isize>();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmptgr23lw9.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digits = 0;\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n    num = number;\n    while num > 0 {\n        let digit = num % 10;\n        sum += digit.pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut n = number;\n    let mut sum = 0;\n    let mut digits = Vec::new();\n    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmptqan8mys.rs:11:26\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let len = digits.len();\n    digits.iter().fold(0, |acc, &x| acc + x.pow(len as u32)) == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpczriskwn.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut sum = 0;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmpszzaiirf.rs:11:26\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpkapnoqjp.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpkapnoqjp.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|d| d.pow(digits.len() as u32)).sum::<isize>();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpsnez9ug3.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let mut sum = 0;\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmp_l6d_e98.rs:11:26\n    |\n4   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digits = 0;\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n    num = number;\n    while num > 0 {\n        sum += (num % 10).pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().fold(0, |acc, &x| acc + x.pow(digits.len() as u32));\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmphfi4eyo9.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|&x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmppwyf2n1x.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|&x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut n = number;\n    let mut sum = 0;\n    let mut digits = Vec::new();\n\n    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmpnwjagrb8.rs:13:26\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n12  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n13  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n12  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmp8j2k5xti.rs:11:26\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpkapnoqjp.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut n = number;\n    let mut digits = 0;\n    while n > 0 {\n        digits += 1;\n        n /= 10;\n    }\n    n = number;\n    while n > 0 {\n        sum += (n % 10).pow(digits);\n        n /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum::<isize>();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmptgr23lw9.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let mut sum = 0;\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmp_l6d_e98.rs:11:26\n    |\n4   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n\n    let sum = digits.iter().map(|d| d.pow(digits.len() as u32)).sum();\n\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n  --> /tmp/tmp1mn46fpg.rs:11:9\n   |\n11 |     let sum = digits.iter().map(|d| d.pow(digits.len() as u32)).sum();\n   |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digit = 0;\n    let mut digits = 0;\n    while num != 0 {\n        digits += 1;\n        num /= 10;\n    }\n    num = number;\n    while num != 0 {\n        digit = num % 10;\n        sum += digit.pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpkapnoqjp.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpkapnoqjp.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number_copy = number;\n    let mut digits = Vec::new();\n    while number_copy > 0 {\n        digits.push(number_copy % 10);\n        number_copy /= 10;\n    }\n    let sum = digits.iter().fold(0, |acc, &x| acc + x.pow(digits.len() as u32));\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut sum = 0;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    for i in digits {\n        sum += i.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmp_fb0b3dv.rs:11:22\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for i in digits {\n    |              ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += i.pow(digits.len() as u32);\n    |                      ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for i in &digits {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let len = digits.len() as isize;\n    digits.iter().fold(0, |acc, x| acc + x.pow(len)) == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbee4hs49.rs:10:48\n   |\n10 |     digits.iter().fold(0, |acc, x| acc + x.pow(len)) == number\n   |                                                ^^^ expected `u32`, found `isize`\n   |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n   |\n10 |     digits.iter().fold(0, |acc, x| acc + x.pow(len.try_into().unwrap())) == number\n   |                                                   ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n\n    let sum = digits.iter().fold(0, |acc, &digit| acc + digit.pow(digits.len() as u32));\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpw7eqmmsx.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut n = number;\n    let mut sum = 0;\n    let mut digits = Vec::new();\n    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n    for d in digits {\n        sum += d.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmpajvg13ss.rs:11:22\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for d in digits {\n    |              ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += d.pow(digits.len() as u32);\n    |                      ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for d in &digits {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut sum = 0;\n    let mut digits = Vec::new();\n\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmp4d34w97t.rs:13:26\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n12  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n13  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n12  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digit = 0;\n    let mut digits = 0;\n\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n\n    num = number;\n\n    while num > 0 {\n        digit = num % 10;\n        sum += digit.pow(digits);\n        num /= 10;\n    }\n\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpkapnoqjp.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digit = 0;\n    let mut digits = 0;\n    while num > 0 {\n        digit = num % 10;\n        digits += 1;\n        sum += digit.pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpg36trw14.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut n = number;\n    let mut sum = 0;\n    let mut digits = Vec::new();\n    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmptqan8mys.rs:11:26\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut num = number;\n    let mut digits = 0;\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n    num = number;\n    while num > 0 {\n        sum += (num % 10).pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpkapnoqjp.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let length = digits.len() as isize;\n    digits.iter().fold(0, |acc, &x| acc + x.pow(length)) == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmptn8enxhl.rs:10:49\n   |\n10 |     digits.iter().fold(0, |acc, &x| acc + x.pow(length)) == number\n   |                                                 ^^^^^^ expected `u32`, found `isize`\n   |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n   |\n10 |     digits.iter().fold(0, |acc, &x| acc + x.pow(length.try_into().unwrap())) == number\n   |                                                       ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digits = 0;\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n    num = number;\n    while num > 0 {\n        sum += (num % 10).pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let len = digits.len();\n    let sum: isize = digits.iter().map(|x| x.pow(len as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp7ss2pcm0.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut temp = number;\n    let digits = number.to_string().len();\n\n    while temp > 0 {\n        sum += (temp % 10).pow(digits as u32);\n        temp /= 10;\n    }\n\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digit = 0;\n    let mut digits = 0;\n    while num > 0 {\n        digit = num % 10;\n        digits += 1;\n        sum += digit.pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpg36trw14.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut temp = number;\n    let mut digits = 0;\n    while temp > 0 {\n        digits += 1;\n        temp /= 10;\n    }\n    temp = number;\n    while temp > 0 {\n        let digit = temp % 10;\n        sum += digit.pow(digits);\n        temp /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut num = number;\n    let mut digits = 0;\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n    num = number;\n    while num > 0 {\n        let digit = num % 10;\n        sum += digit.pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut n = number;\n    let mut sum = 0;\n    let mut digits = Vec::new();\n    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmptqan8mys.rs:11:26\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpkapnoqjp.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut number = number;\n    while number > 0 {\n        let digit = number % 10;\n        sum += digit * digit * digit;\n        number /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpo1lm1q9n.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let mut sum = 0;\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmp_l6d_e98.rs:11:26\n    |\n4   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digit = 0;\n    let mut digits = 0;\n    while num > 0 {\n        digit = num % 10;\n        digits += 1;\n        sum += digit.pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpg36trw14.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut temp = number;\n    let mut sum = 0;\n    let mut r;\n    while temp > 0 {\n        r = temp % 10;\n        sum = sum + r * r * r;\n        temp = temp / 10;\n    }\n    if sum == number {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let mut sum = 0;\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmp_l6d_e98.rs:11:26\n    |\n4   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut n = number;\n    let mut digits = Vec::new();\n\n    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmpjjt2mmr6.rs:13:26\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n12  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n13  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n12  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|d| d.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpyhz1ta0f.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|d| d.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum::<isize>();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmptgr23lw9.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpkapnoqjp.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digits = 0;\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n    num = number;\n    while num > 0 {\n        sum += (num % 10).pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digits = Vec::new();\n    while num > 0 {\n        digits.push(num % 10);\n        num /= 10;\n    }\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmpgad3zxl9.rs:11:26\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut sum = 0;\n    let mut digits = 0;\n    while number > 0 {\n        digits += 1;\n        number /= 10;\n    }\n    number = number.abs();\n    while number > 0 {\n        sum += (number % 10).pow(digits);\n        number /= 10;\n    }\n    sum == number.abs()\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_es44r01.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let len = digits.len() as isize;\n    let sum = digits.iter().map(|&x| x.pow(len)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpt_y2j9s1.rs:10:44\n   |\n10 |     let sum = digits.iter().map(|&x| x.pow(len)).sum();\n   |                                            ^^^ expected `u32`, found `isize`\n   |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n   |\n10 |     let sum = digits.iter().map(|&x| x.pow(len.try_into().unwrap())).sum();\n   |                                               ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut digits = Vec::new();\n    let mut n = number;\n    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpi1lfdfn6.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digit = 0;\n    let mut digits = 0;\n\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n\n    num = number;\n\n    while num > 0 {\n        digit = num % 10;\n        sum += digit.pow(digits);\n        num /= 10;\n    }\n\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut n = number;\n    let mut sum = 0;\n    let mut digits = 0;\n    while n > 0 {\n        digits += 1;\n        n /= 10;\n    }\n    n = number;\n    while n > 0 {\n        let digit = n % 10;\n        sum += digit.pow(digits);\n        n /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpkapnoqjp.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut num = number;\n    let mut digits = 0;\n    while num != 0 {\n        digits += 1;\n        num /= 10;\n    }\n    num = number;\n    while num != 0 {\n        let digit = num % 10;\n        sum += digit.pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum::<isize>();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmptgr23lw9.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let len = digits.len();\n    let sum: isize = digits.iter().map(|&x| x.pow(len as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp367byqj7.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    let mut sum = 0;\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmp091x633p.rs:11:26\n    |\n4   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut num = number;\n    let mut digits = 0;\n    let mut temp = number;\n\n    while temp > 0 {\n        digits += 1;\n        temp /= 10;\n    }\n\n    while num > 0 {\n        let rem = num % 10;\n        sum += rem.pow(digits);\n        num /= 10;\n    }\n\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|d| d.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpyhz1ta0f.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|d| d.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpkapnoqjp.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let n = digits.len();\n    let sum: isize = digits.iter().map(|x| x.pow(n as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpwy5f6jow.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|d| d.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpyhz1ta0f.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|d| d.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut num = number;\n    let mut digits = 0;\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n    num = number;\n    while num > 0 {\n        sum += (num % 10).pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut n = number;\n    let mut sum = 0;\n    let mut digits = Vec::new();\n    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n    for d in digits {\n        sum += d.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmpajvg13ss.rs:11:22\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for d in digits {\n    |              ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += d.pow(digits.len() as u32);\n    |                      ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for d in &digits {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut digits = Vec::new();\n    while num > 0 {\n        digits.push(num % 10);\n        num = num / 10;\n    }\n    let mut sum = 0;\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmpf7rt5qng.rs:11:26\n    |\n4   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|d| d.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpyhz1ta0f.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|d| d.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let n = digits.len();\n    digits.iter().fold(0, |acc, &x| acc + x.pow(n as u32)) == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpcq1ab19o.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let length = digits.len();\n    let sum = digits.iter().map(|x| x.pow(length as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n  --> /tmp/tmpzon98k2t.rs:10:9\n   |\n10 |     let sum = digits.iter().map(|x| x.pow(length as u32)).sum();\n   |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpkapnoqjp.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpkapnoqjp.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digits = 0;\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n    num = number;\n    while num > 0 {\n        sum += (num % 10).pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpkapnoqjp.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let length = digits.len() as isize;\n    let sum: isize = digits.iter().map(|x| x.pow(length)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp5phuyiss.rs:10:50\n   |\n10 |     let sum: isize = digits.iter().map(|x| x.pow(length)).sum();\n   |                                                  ^^^^^^ expected `u32`, found `isize`\n   |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n   |\n10 |     let sum: isize = digits.iter().map(|x| x.pow(length.try_into().unwrap())).sum();\n   |                                                        ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut digits = Vec::new();\n    let mut n = number;\n    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n    let len = digits.len();\n    let sum = digits.iter().map(|d| d.pow(len as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n  --> /tmp/tmpprk_bht7.rs:10:9\n   |\n10 |     let sum = digits.iter().map(|d| d.pow(len as u32)).sum();\n   |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    let mut sum = 0;\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmp091x633p.rs:11:26\n    |\n4   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number_copy = number;\n    let mut digits = Vec::new();\n    while number_copy > 0 {\n        digits.push(number_copy % 10);\n        number_copy /= 10;\n    }\n    let mut sum = 0;\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmpre84ldkx.rs:11:26\n    |\n4   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpkapnoqjp.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digit = 0;\n    let mut digits = 0;\n\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n\n    num = number;\n    while num > 0 {\n        digit = num % 10;\n        sum += digit.pow(digits);\n        num /= 10;\n    }\n\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut temp = number;\n    let mut count = 0;\n    while temp > 0 {\n        temp /= 10;\n        count += 1;\n    }\n    temp = number;\n    while temp > 0 {\n        let digit = temp % 10;\n        sum += digit.pow(count);\n        temp /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digits = 0;\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n    num = number;\n    while num > 0 {\n        let digit = num % 10;\n        sum += digit.pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut temp = number;\n    let mut sum = 0;\n    let mut rem = 0;\n    while temp > 0 {\n        rem = temp % 10;\n        sum = sum + rem * rem * rem;\n        temp = temp / 10;\n    }\n    if sum == number {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum::<isize>();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmptgr23lw9.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut sum = 0;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmpszzaiirf.rs:11:26\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut n = number;\n    let mut sum = 0;\n    let mut digits = 0;\n    while n > 0 {\n        digits += 1;\n        n /= 10;\n    }\n    n = number;\n    while n > 0 {\n        let digit = n % 10;\n        sum += digit.pow(digits);\n        n /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let len = digits.len() as isize;\n    let sum = digits.iter().map(|x| x.pow(len)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpafors635.rs:10:43\n   |\n10 |     let sum = digits.iter().map(|x| x.pow(len)).sum();\n   |                                           ^^^ expected `u32`, found `isize`\n   |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n   |\n10 |     let sum = digits.iter().map(|x| x.pow(len.try_into().unwrap())).sum();\n   |                                              ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let mut sum = 0;\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmp_l6d_e98.rs:11:26\n    |\n4   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digits = 0;\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n    num = number;\n    while num > 0 {\n        sum += (num % 10).pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut n = number;\n    let mut sum = 0;\n    let mut digits = 0;\n    while n > 0 {\n        digits += 1;\n        n /= 10;\n    }\n    n = number;\n    while n > 0 {\n        sum += (n % 10).pow(digits);\n        n /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let digits = num.to_string().len() as isize;\n    while num > 0 {\n        let digit = num % 10;\n        sum += digit.pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpj9osaroq.rs:8:26\n  |\n8 |         sum += digit.pow(digits);\n  |                          ^^^^^^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n8 |         sum += digit.pow(digits.try_into().unwrap());\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digits = 0;\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n    num = number;\n    while num > 0 {\n        sum += (num % 10).pow(digits);\n        num /= 10;\n    }\n    number == sum\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let mut sum = 0;\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmp_l6d_e98.rs:11:26\n    |\n4   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut n = 0;\n    while num > 0 {\n        n += 1;\n        num /= 10;\n    }\n    num = number;\n    while num > 0 {\n        sum += (num % 10).pow(n);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|d| d.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpyhz1ta0f.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|d| d.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|d| d.pow(digits.len() as u32)).sum::<isize>();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpsnez9ug3.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut num = number;\n    let digits = number.to_string().len() as isize;\n    while num > 0 {\n        sum += (num % 10).pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpf58uqx83.rs:7:31\n  |\n7 |         sum += (num % 10).pow(digits);\n  |                               ^^^^^^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n7 |         sum += (num % 10).pow(digits.try_into().unwrap());\n  |                                     ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpkapnoqjp.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut temp = 0;\n    while num > 0 {\n        temp = num % 10;\n        sum += temp * temp * temp;\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|d| d.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpyhz1ta0f.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|d| d.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let length = digits.len() as isize;\n    let sum = digits.iter().map(|x| x.pow(length)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzxy2vodf.rs:10:43\n   |\n10 |     let sum = digits.iter().map(|x| x.pow(length)).sum();\n   |                                           ^^^^^^ expected `u32`, found `isize`\n   |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n   |\n10 |     let sum = digits.iter().map(|x| x.pow(length.try_into().unwrap())).sum();\n   |                                                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digits = 0;\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n    num = number;\n    while num > 0 {\n        let digit = num % 10;\n        sum += digit.pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    let mut sum = 0;\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmp091x633p.rs:11:26\n    |\n4   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut n = number;\n    let mut digits = Vec::new();\n    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n    let length = digits.len() as isize;\n    digits.iter().fold(0, |acc, &x| acc + x.pow(length)) == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmphxafhymq.rs:10:49\n   |\n10 |     digits.iter().fold(0, |acc, &x| acc + x.pow(length)) == number\n   |                                                 ^^^^^^ expected `u32`, found `isize`\n   |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n   |\n10 |     digits.iter().fold(0, |acc, &x| acc + x.pow(length.try_into().unwrap())) == number\n   |                                                       ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number_copy = number;\n    let mut digits = Vec::new();\n    while number_copy > 0 {\n        digits.push(number_copy % 10);\n        number_copy /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum::<isize>();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digits = 0;\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n    num = number;\n    while num > 0 {\n        let digit = num % 10;\n        sum += digit.pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut digits = Vec::new();\n    let mut n = number;\n    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n    let mut sum = 0;\n    for d in digits {\n        sum += d.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmpfqa3hjxw.rs:11:22\n    |\n3   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for d in digits {\n    |              ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += d.pow(digits.len() as u32);\n    |                      ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for d in &digits {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut n = number;\n    let mut sum = 0;\n    let mut digits = Vec::new();\n\n    while n > 0 {\n        let digit = n % 10;\n        digits.push(digit);\n        n = n / 10;\n    }\n\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmp8q8l6p3x.rs:14:26\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n13  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n14  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n13  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digits = 0;\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n    num = number;\n    while num > 0 {\n        sum += (num % 10).pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number_copy = number;\n    let mut digits = Vec::new();\n    while number_copy > 0 {\n        digits.push(number_copy % 10);\n        number_copy /= 10;\n    }\n    let sum = digits.iter().fold(0, |acc, &x| acc + x.pow(digits.len() as u32));\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digits = Vec::new();\n    while num > 0 {\n        digits.push(num % 10);\n        num /= 10;\n    }\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmpgad3zxl9.rs:11:26\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let length = digits.len();\n    let sum = digits.iter().fold(0, |acc, &x| acc + x.pow(length as u32));\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp2hycdmfm.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut temp = number;\n    let mut sum = 0;\n    let mut rem = 0;\n    while temp != 0 {\n        rem = temp % 10;\n        sum = sum + rem * rem * rem;\n        temp = temp / 10;\n    }\n    if sum == number {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digits = 0;\n\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n\n    num = number;\n    while num > 0 {\n        sum += (num % 10).pow(digits);\n        num /= 10;\n    }\n\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digits = 0;\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n    num = number;\n    while num > 0 {\n        let digit = num % 10;\n        sum += digit.pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut n = number;\n    let mut sum = 0;\n    let mut temp = 0;\n    while n > 0 {\n        temp = n % 10;\n        sum += temp * temp * temp;\n        n /= 10;\n    }\n    return sum == number;\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut temp = number;\n    let mut digits = 0;\n    while temp > 0 {\n        digits += 1;\n        temp /= 10;\n    }\n    temp = number;\n    while temp > 0 {\n        sum += (temp % 10).pow(digits);\n        temp /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().fold(0, |acc, &x| acc + x.pow(digits.len() as u32));\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmphfi4eyo9.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut digits = Vec::new();\n    let mut num = number;\n    while num > 0 {\n        digits.push(num % 10);\n        num /= 10;\n    }\n    let mut sum = 0;\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmpe504ea0f.rs:11:26\n    |\n3   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digit = 0;\n    let mut digits = 0;\n    while num > 0 {\n        digit = num % 10;\n        sum += digit * digit * digit;\n        num /= 10;\n        digits += 1;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().fold(0, |acc, &x| acc + x.pow(digits.len() as u32));\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmphfi4eyo9.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digits = 0;\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n    num = number;\n    while num > 0 {\n        sum += (num % 10).pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut n = number;\n    let mut digits = Vec::new();\n    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n    for i in digits {\n        sum += i.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmpzfefijzr.rs:11:22\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for i in digits {\n    |              ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += i.pow(digits.len() as u32);\n    |                      ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for i in &digits {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().fold(0, |acc, &x| acc + x.pow(digits.len() as u32));\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmphfi4eyo9.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let len = digits.len() as isize;\n    let sum = digits.iter().map(|x| x.pow(len)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpafors635.rs:10:43\n   |\n10 |     let sum = digits.iter().map(|x| x.pow(len)).sum();\n   |                                           ^^^ expected `u32`, found `isize`\n   |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n   |\n10 |     let sum = digits.iter().map(|x| x.pow(len.try_into().unwrap())).sum();\n   |                                              ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number_copy = number;\n    let mut digits = Vec::new();\n    while number_copy > 0 {\n        digits.push(number_copy % 10);\n        number_copy /= 10;\n    }\n    let sum = digits.iter().fold(0, |acc, x| acc + x.pow(digits.len() as u32));\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut n = number;\n    let mut digits = Vec::new();\n    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n    let len = digits.len();\n    let sum = digits.iter().map(|x| x.pow(len as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n  --> /tmp/tmpzc0iseh4.rs:10:9\n   |\n10 |     let sum = digits.iter().map(|x| x.pow(len as u32)).sum();\n   |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number = number / 10;\n    }\n    let sum = digits.iter().fold(0, |acc, x| acc + x.pow(digits.len() as u32));\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp1nkf09i8.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut temp = number;\n    let mut sum = 0;\n    let mut rem = 0;\n    while temp > 0 {\n        rem = temp % 10;\n        sum = sum + rem * rem * rem;\n        temp = temp / 10;\n    }\n    if sum == number {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut temp = number;\n    let mut sum = 0;\n    let mut rem = 0;\n    let mut count = 0;\n    let mut num = number;\n    while num != 0 {\n        count += 1;\n        num /= 10;\n    }\n    while temp != 0 {\n        rem = temp % 10;\n        sum += rem.pow(count);\n        temp /= 10;\n    }\n    if sum == number {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut n = number;\n    let mut sum = 0;\n    let mut digits = Vec::new();\n    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n    for i in digits {\n        sum += i.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmpphlagcu5.rs:11:22\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for i in digits {\n    |              ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += i.pow(digits.len() as u32);\n    |                      ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for i in &digits {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut n = number;\n    let mut sum = 0;\n    let mut digits = Vec::new();\n    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmptqan8mys.rs:11:26\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpkapnoqjp.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digits = 0;\n\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n\n    num = number;\n    while num > 0 {\n        sum += (num % 10).pow(digits);\n        num /= 10;\n    }\n\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digits = 0;\n    while num > 0 {\n        digits += 1;\n        num /= 10;\n    }\n    num = number;\n    while num > 0 {\n        sum += (num % 10).pow(digits);\n        num /= 10;\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().fold(0, |acc, &x| acc + x.pow(digits.len() as u32));\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmphfi4eyo9.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().fold(0, |acc, &digit| acc + digit.pow(digits.len() as u32));\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpvpjhbu9e.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let n = digits.len() as isize;\n    digits.iter().fold(0, |acc, x| acc + x.pow(n)) == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpm6223of8.rs:10:48\n   |\n10 |     digits.iter().fold(0, |acc, x| acc + x.pow(n)) == number\n   |                                                ^ expected `u32`, found `isize`\n   |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n   |\n10 |     digits.iter().fold(0, |acc, x| acc + x.pow(n.try_into().unwrap())) == number\n   |                                                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut n = number;\n    let mut sum = 0;\n    let mut digits = Vec::new();\n    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmptqan8mys.rs:11:26\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut num = number;\n    let mut sum = 0;\n    let mut digit = 0;\n    let mut count = 0;\n    while num > 0 {\n        digit = num % 10;\n        count += 1;\n        num = num / 10;\n    }\n    num = number;\n    while num > 0 {\n        digit = num % 10;\n        sum += digit.pow(count);\n        num = num / 10;\n    }\n    if sum == number {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut temp = number;\n    let mut sum = 0;\n    let mut r = 0;\n    let mut digits = 0;\n\n    while temp != 0 {\n        digits += 1;\n        temp /= 10;\n    }\n\n    temp = number;\n\n    while temp != 0 {\n        r = temp % 10;\n        sum = sum + r.pow(digits as u32);\n        temp /= 10;\n    }\n\n    number == sum\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut digits = Vec::new();\n    let mut num = number;\n    while num > 0 {\n        digits.push(num % 10);\n        num /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmp7a3ytqdx.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let mut sum = 0;\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmp_l6d_e98.rs:11:26\n    |\n4   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpkapnoqjp.rs:9:9\n  |\n9 |     let sum = digits.iter().map(|x| x.pow(digits.len() as u32)).sum();\n  |         ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut n = number;\n    let mut sum = 0;\n    let mut digits = Vec::new();\n    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n    for i in digits {\n        sum += i.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmpphlagcu5.rs:11:22\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for i in digits {\n    |              ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += i.pow(digits.len() as u32);\n    |                      ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for i in &digits {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmp8j2k5xti.rs:11:26\n    |\n5   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut number = number;\n    let mut digits = Vec::new();\n    while number > 0 {\n        digits.push(number % 10);\n        number /= 10;\n    }\n    let mut sum = 0;\n    for digit in digits {\n        sum += digit.pow(digits.len() as u32);\n    }\n    sum == number\n}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmp_l6d_e98.rs:11:26\n    |\n4   |     let mut digits = Vec::new();\n    |         ---------- move occurs because `digits` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for digit in digits {\n    |                  ------ `digits` moved due to this implicit call to `.into_iter()`\n11  |         sum += digit.pow(digits.len() as u32);\n    |                          ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `digits`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |     for digit in &digits {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}