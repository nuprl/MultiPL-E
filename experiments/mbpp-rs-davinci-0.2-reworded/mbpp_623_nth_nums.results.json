{
  "name": "mbpp_623_nth_nums",
  "language": "rs",
  "prompt": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.into_iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.into_iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.into_iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.into_iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.into_iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.into_iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.into_iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.into_iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.into_iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.into_iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.into_iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnatk9hsf.rs:3:36\n  |\n3 |     nums.into_iter().map(|x| x.pow(n)).collect()\n  |                                    ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.into_iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                     ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.into_iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.into_iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in nums {\n        result.push(num.pow(n));\n    }\n    result\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp4iyvir1c.rs:5:29\n  |\n5 |         result.push(num.pow(n));\n  |                             ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n5 |         result.push(num.pow(n.try_into().unwrap()));\n  |                              ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.into_iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnatk9hsf.rs:3:36\n  |\n3 |     nums.into_iter().map(|x| x.pow(n)).collect()\n  |                                    ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.into_iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                     ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.into_iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.into_iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in nums {\n        result.push(num.pow(n));\n    }\n    result\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp4iyvir1c.rs:5:29\n  |\n5 |         result.push(num.pow(n));\n  |                             ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n5 |         result.push(num.pow(n.try_into().unwrap()));\n  |                              ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.into_iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.into_iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.into_iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnatk9hsf.rs:3:36\n  |\n3 |     nums.into_iter().map(|x| x.pow(n)).collect()\n  |                                    ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.into_iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                     ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.into_iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnatk9hsf.rs:3:36\n  |\n3 |     nums.into_iter().map(|x| x.pow(n)).collect()\n  |                                    ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.into_iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                     ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.into_iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.into_iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.into_iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9g9ov_8w.rs:3:31\n  |\n3 |     nums.iter().map(|x| x.pow(n)).collect()\n  |                               ^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n3 |     nums.iter().map(|x| x.pow(n.try_into().unwrap())).collect()\n  |                                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(n as u32)).collect()\n}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}