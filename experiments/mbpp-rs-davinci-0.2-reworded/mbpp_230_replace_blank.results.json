{
  "name": "mbpp_230_replace_blank",
  "language": "rs",
  "prompt": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_230_replace_blank.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    str1.replace(\" \", &char)\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            str2.push_str(&char);\n        } else {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1666123757,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str: String = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1666123757,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            str2.push_str(&char);\n        } else {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1666123757,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str: String = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1666123757,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            str2.push_str(&char);\n        } else {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1666123757,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    str1.replace(\" \", &char)\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut str_vec: Vec<char> = str1.chars().collect();\n    let char_vec: Vec<char> = char.chars().collect();\n    let mut new_str = String::new();\n    for i in 0..str_vec.len() {\n        if str_vec[i] == ' ' {\n            new_str.push(char_vec[0]);\n        } else {\n            new_str.push(str_vec[i]);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1666123757,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    str1.replace(\" \", &char)\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    str1.replace(\" \", &char)\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    str1.replace(\" \", &char)\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(char.as_str());\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1666123757,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    str1.replace(\" \", &char)\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for i in str1.chars() {\n        if i == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(i);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1666123757,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = str1.clone();\n    for c in new_str.chars_mut() {\n        if c == ' ' {\n            *c = char.chars().next().unwrap();\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "error[E0599]: no method named `chars_mut` found for struct `String` in the current scope\n --> /tmp/tmpwq7w743c.rs:4:22\n  |\n4 |     for c in new_str.chars_mut() {\n  |                      ^^^^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    str1.replace(\" \", &char)\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for i in str1.chars() {\n        if i == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(i);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1666123757,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    str1.replace(\" \", &char)\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    str1.replace(\" \", &char)\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    let mut count = 0;\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n            count += 1;\n        } else {\n            new_str.push(c);\n        }\n    }\n    println!(\"{} blank spaces replaced\", count);\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1666123757,
      "stdout": "1 blank spaces replaced\n2 blank spaces replaced\n1 blank spaces replaced\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    str1.replace(\" \", &char)\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    str1.replace(\" \", &char)\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    str1.replace(\" \", &char)\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}