{
  "name": "mbpp_113_check_integer",
  "language": "rs",
  "prompt": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true",
    "    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    return true;",
    "    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') || first == Some('+') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    while let Some(c) = first {\n        if !c.is_digit(10) {\n            return false;\n        }\n        first = chars.next();\n    }\n    true",
    "    text.parse::<i32>().is_ok()",
    "    text.parse::<i32>().is_ok()",
    "    text.parse::<i32>().is_ok()",
    "    let mut chars = text.chars();\n    if chars.next().unwrap() == '-' {\n        chars.next();\n    }\n    chars.all(|c| c.is_digit(10))",
    "    text.parse::<i32>().is_ok()",
    "    let mut chars = text.chars();\n    let mut first = true;\n    let mut has_digit = false;\n    while let Some(c) = chars.next() {\n        if c == '-' {\n            if first {\n                first = false;\n            } else {\n                return false;\n            }\n        } else if c.is_digit(10) {\n            has_digit = true;\n        } else {\n            return false;\n        }\n    }\n    has_digit",
    "    text.parse::<i32>().is_ok()",
    "    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    return true;",
    "    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_negative = false;\n    let mut is_positive = false;\n    let mut is_zero = false;\n    let mut is_first_digit = true;\n\n    while let Some(c) = chars.next() {\n        match c {\n            '0' => {\n                if is_first_digit {\n                    is_zero = true;\n                    is_first_digit = false;\n                } else {\n                    is_integer = false;\n                }\n            }\n            '1'..='9' => {\n                is_first_digit = false;\n            }\n            '-' => {\n                if is_first_digit {\n                    is_negative = true;\n                    is_first_digit = false;\n                } else {\n                    is_integer = false;\n                }\n            }\n            '+' => {\n                if is_first_digit {\n                    is_positive = true;\n                    is_first_digit = false;\n                } else {\n                    is_integer = false;\n                }\n            }\n            _ => {\n                is_integer = false;\n            }\n        }\n    }\n\n    if is_zero && (is_negative || is_positive) {\n        is_integer = false;\n    }\n\n    is_integer",
    "    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    match first {\n        Some(c) if c.is_digit(10) => {\n            chars.all(|c| c.is_digit(10))\n        },\n        _ => false,\n    }",
    "    let mut chars = text.chars();\n    let mut first = chars.next();\n\n    if first == Some('-') {\n        first = chars.next();\n    }\n\n    if first == None {\n        return false;\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n\n    return true;",
    "    let mut chars = text.chars();\n    let mut has_sign = false;\n    let mut has_digit = false;\n\n    if let Some(c) = chars.next() {\n        if c == '-' || c == '+' {\n            has_sign = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else {\n            has_digit = true;\n        }\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n        has_digit = true;\n    }\n\n    has_sign || has_digit",
    "    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_negative = false;\n\n    if chars.next() == Some('-') {\n        is_negative = true;\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n\n    if is_negative && text.len() == 1 {\n        is_integer = false;\n    }\n\n    is_integer",
    "    let mut chars = text.chars();\n    if chars.next().unwrap() == '-' {\n        chars.next();\n    }\n    chars.all(|c| c.is_digit(10))",
    "    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true",
    "    let mut chars = text.chars();\n    let mut first = true;\n    let mut has_sign = false;\n    let mut has_digit = false;\n    while let Some(c) = chars.next() {\n        if first {\n            if c == '-' || c == '+' {\n                has_sign = true;\n            } else if c.is_digit(10) {\n                has_digit = true;\n            } else {\n                return false;\n            }\n            first = false;\n        } else {\n            if !c.is_digit(10) {\n                return false;\n            }\n            has_digit = true;\n        }\n    }\n    has_digit",
    "    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_first_char = true;\n    while let Some(c) = chars.next() {\n        if is_first_char {\n            if c == '+' || c == '-' {\n                is_first_char = false;\n            } else if !c.is_digit(10) {\n                is_integer = false;\n                break;\n            }\n        } else if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n    is_integer"
  ]
}