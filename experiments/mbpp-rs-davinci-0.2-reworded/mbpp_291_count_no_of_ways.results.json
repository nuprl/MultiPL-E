{
  "name": "mbpp_291_count_no_of_ways",
  "language": "rs",
  "prompt": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _i in 3..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmph1bcix1o.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    if n == 2 {\n        return k * k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    let mut total = same + diff;\n    for _ in 3..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpm3_265sv.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    if n == 2 {\n        return k * k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    if n == 2 {\n        return k * k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    let mut total = same + diff;\n    for _ in 3..=n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 0..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `60`,\n right: `16`', /tmp/tmp1bufrum1.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 2..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `16`', /tmp/tmprhlqgt4h.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 2..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 2..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `16`', /tmp/tmprhlqgt4h.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 2..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `16`', /tmp/tmprhlqgt4h.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    if n == 2 {\n        return k * k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 2..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `16`', /tmp/tmp48uotap_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 2..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `16`', /tmp/tmp48uotap_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 2..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    let mut total = same + diff;\n    for _ in 3..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpm3_265sv.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    if n == 2 {\n        return k * k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 2..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `16`', /tmp/tmprhlqgt4h.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 2..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    if n == 2 {\n        return k * k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 2..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 2..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `16`', /tmp/tmp48uotap_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 2..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 2..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `16`', /tmp/tmp48uotap_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = diff + same;\n    }\n\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    let mut total = same + diff;\n    for _ in 3..n + 1 {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 2..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `16`', /tmp/tmprhlqgt4h.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 2..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 0..n-1 {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 2..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `16`', /tmp/tmprhlqgt4h.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 2..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `16`', /tmp/tmprhlqgt4h.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 2..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 2..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `16`', /tmp/tmp48uotap_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 2..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `16`', /tmp/tmp48uotap_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let t = diff;\n        diff = (same + diff) * (k - 1);\n        same = t;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for i in 2..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `16`', /tmp/tmpzaqhkypd.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    if n == 2 {\n        return k * k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    if n == 2 {\n        return k * k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 2..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `16`', /tmp/tmp48uotap_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let tmp = diff;\n        diff = (same + diff) * (k - 1);\n        same = tmp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 2..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `16`', /tmp/tmprhlqgt4h.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 2..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    if n == 2 {\n        return k * k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    let mut total = same + diff;\n    for _ in 3..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpm3_265sv.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 2..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `16`', /tmp/tmprhlqgt4h.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 1 {\n        return k;\n    }\n    if n == 2 {\n        return k * k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 2..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    if n == 2 {\n        return k * k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 0..n-1 {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 2..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `16`', /tmp/tmpzcxt_jqs.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    if n == 2 {\n        return k * k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 0..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `60`,\n right: `16`', /tmp/tmp1bufrum1.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    let mut total = same + diff;\n    for _ in 3..n + 1 {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 2..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `16`', /tmp/tmp48uotap_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 2..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `16`', /tmp/tmpzcxt_jqs.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 0..n-1 {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 2..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let tmp = diff;\n        diff = (same + diff) * (k - 1);\n        same = tmp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 2..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    if n == 2 {\n        return k * k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut total = k;\n    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
      "timestamp": 1665510181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}