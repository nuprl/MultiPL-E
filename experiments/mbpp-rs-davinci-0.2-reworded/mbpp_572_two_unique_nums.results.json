{
  "name": "mbpp_572_two_unique_nums",
  "language": "rs",
  "prompt": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp8z5os5tf.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums_set = HashSet::new();\n    for num in nums {\n        nums_set.insert(num);\n    }\n    nums_set.into_iter().collect()\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp3lj4xs7u.rs:3:24\n  |\n3 |     let mut nums_set = HashSet::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n\n    for num in nums {\n        if seen.contains(&num) {\n            continue;\n        }\n\n        seen.insert(num);\n        result.push(num);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpk5z1hcm6.rs:4:20\n  |\n4 |     let mut seen = HashSet::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        result.push(nums[i]);\n        while i < nums.len() - 1 && nums[i] == nums[i + 1] {\n            i += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpwbb84_si.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums_set = HashSet::new();\n    for num in nums {\n        nums_set.insert(num);\n    }\n    nums_set.into_iter().collect()\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp3lj4xs7u.rs:3:24\n  |\n3 |     let mut nums_set = HashSet::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp8z5os5tf.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp8z5os5tf.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for n in nums {\n        if !unique_nums.contains(&n) {\n            unique_nums.push(n);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpvadu211v.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp8z5os5tf.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut res = Vec::new();\n    for i in 0..nums.len() {\n        if i == 0 {\n            res.push(nums[i]);\n        } else if nums[i] != nums[i - 1] {\n            res.push(nums[i]);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpvaetohzp.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        if i == 0 || nums[i] != nums[i - 1] {\n            result.push(nums[i]);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpgh0y4wtb.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in nums {\n        if !result.contains(&num) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp2_ir_0pz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    for i in 0..nums.len() {\n        if i == 0 {\n            result.push(nums[i]);\n        } else if nums[i] != nums[i - 1] {\n            result.push(nums[i]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmps48j3cih.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in nums {\n        if !result.contains(&num) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp2_ir_0pz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        if i == 0 || nums[i] != nums[i - 1] {\n            result.push(nums[i]);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpgh0y4wtb.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for num in nums {\n        if !result.contains(&num) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmy2pzidg.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = vec![];\n    let mut i = 0;\n    while i < nums.len() {\n        if i + 1 < nums.len() && nums[i] == nums[i + 1] {\n            i += 2;\n        } else {\n            result.push(nums[i]);\n            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums_set = HashSet::new();\n    for num in nums {\n        nums_set.insert(num);\n    }\n    nums_set.into_iter().collect()\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp3lj4xs7u.rs:3:24\n  |\n3 |     let mut nums_set = HashSet::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp8z5os5tf.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in nums {\n        if !result.contains(&i) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp4f98_ujf.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in nums {\n        if !result.contains(&num) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp2_ir_0pz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in nums {\n        if !result.contains(&i) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpvkceiczm.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in nums {\n        if !result.contains(&num) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp2_ir_0pz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for num in nums {\n        if !res.contains(&num) {\n            res.push(num);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpxloyiigu.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        if i == 0 || nums[i] != nums[i - 1] {\n            result.push(nums[i]);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpgh0y4wtb.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n    for num in nums {\n        if !result.contains(&num) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppqo9prwj.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut i = 0;\n    let mut j = 1;\n    while j < nums.len() {\n        if nums[i] != nums[j] {\n            i += 1;\n            nums[i] = nums[j];\n        }\n        j += 1;\n    }\n    nums.truncate(i + 1);\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpvca2rakx.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        if i == 0 {\n            result.push(nums[i]);\n        } else if nums[i] != nums[i - 1] {\n            result.push(nums[i]);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpxcq_3y5t.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        if i == 0 || nums[i] != nums[i - 1] {\n            result.push(nums[i]);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpgh0y4wtb.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums_set = HashSet::new();\n    for num in nums {\n        nums_set.insert(num);\n    }\n    nums_set.into_iter().collect()\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp3lj4xs7u.rs:3:24\n  |\n3 |     let mut nums_set = HashSet::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    for i in 0..nums.len() {\n        if i == 0 {\n            result.push(nums[i]);\n        } else if i == nums.len() - 1 {\n            if nums[i] != nums[i - 1] {\n                result.push(nums[i]);\n            }\n        } else if nums[i] != nums[i - 1] && nums[i] != nums[i + 1] {\n            result.push(nums[i]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut i = 0;\n    let mut j = 1;\n    while j < nums.len() {\n        if nums[i] == nums[j] {\n            j += 1;\n        } else {\n            i += 1;\n            nums[i] = nums[j];\n            j += 1;\n        }\n    }\n    nums.truncate(i + 1);\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpjwojjz39.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        if i == 0 || nums[i] != nums[i - 1] {\n            result.push(nums[i]);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpgh0y4wtb.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut i = 0;\n    while i < nums.len() - 1 {\n        if nums[i] == nums[i + 1] {\n            nums.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpo3kte986.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for num in nums {\n        if !result.contains(&num) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmy2pzidg.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = vec![];\n    for i in 0..nums.len() {\n        if i == 0 {\n            result.push(nums[i]);\n        } else {\n            if nums[i] != nums[i - 1] {\n                result.push(nums[i]);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpm6gy64lj.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    for i in 0..nums.len() {\n        if i == 0 {\n            result.push(nums[i]);\n        } else if nums[i] != nums[i - 1] {\n            result.push(nums[i]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmps48j3cih.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut i = 0;\n    let mut j = 1;\n    while j < nums.len() {\n        if nums[i] != nums[j] {\n            i += 1;\n            nums[i] = nums[j];\n        }\n        j += 1;\n    }\n    nums.truncate(i + 1);\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpvca2rakx.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n    for num in nums {\n        if !seen.contains(&num) {\n            result.push(num);\n            seen.insert(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpvhou41mu.rs:4:20\n  |\n4 |     let mut seen = HashSet::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut res = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        if i == 0 || nums[i] != nums[i - 1] {\n            res.push(nums[i]);\n        }\n        i += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpx6hctccz.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        if i == 0 || nums[i] != nums[i - 1] {\n            result.push(nums[i]);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpgh0y4wtb.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n    for num in nums {\n        if !seen.contains(&num) {\n            result.push(num);\n            seen.insert(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpvhou41mu.rs:4:20\n  |\n4 |     let mut seen = HashSet::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in nums {\n        if !result.contains(&num) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp2_ir_0pz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut i = 0;\n    let mut j = 1;\n    while j < nums.len() {\n        if nums[i] != nums[j] {\n            i += 1;\n            nums[i] = nums[j];\n        }\n        j += 1;\n    }\n    nums.truncate(i + 1);\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpvca2rakx.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp8z5os5tf.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp8z5os5tf.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = vec![];\n    let mut i = 0;\n    while i < nums.len() {\n        if i == 0 || nums[i] != nums[i - 1] {\n            result.push(nums[i]);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp_z_hfc2o.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in nums {\n        if !result.contains(&num) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp2_ir_0pz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        if i == 0 || nums[i] != nums[i - 1] {\n            result.push(nums[i]);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpgh0y4wtb.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut last = None;\n    for num in nums {\n        if last != Some(num) {\n            result.push(num);\n            last = Some(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp8ium37mq.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    for i in 0..nums.len() {\n        if i == 0 {\n            result.push(nums[i]);\n        } else if nums[i] != nums[i - 1] {\n            result.push(nums[i]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmps48j3cih.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in nums {\n        if !result.contains(&num) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp2_ir_0pz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums_set = HashSet::new();\n    for num in nums {\n        nums_set.insert(num);\n    }\n    nums_set.into_iter().collect()\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp3lj4xs7u.rs:3:24\n  |\n3 |     let mut nums_set = HashSet::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp8z5os5tf.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in nums {\n        if !result.contains(&num) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp2_ir_0pz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp8z5os5tf.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp8z5os5tf.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        if i == 0 || nums[i] != nums[i - 1] {\n            result.push(nums[i]);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpgh0y4wtb.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in nums {\n        if !result.contains(&num) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp2_ir_0pz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut last = nums[0];\n    let mut result = vec![nums[0]];\n    for num in nums.iter().skip(1) {\n        if *num != last {\n            result.push(*num);\n            last = *num;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1r2rda_v.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut res = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        if i == 0 || nums[i] != nums[i - 1] {\n            res.push(nums[i]);\n        }\n        i += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpx6hctccz.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in nums {\n        if !result.contains(&num) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp2_ir_0pz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp8z5os5tf.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut unique_nums = Vec::new();\n    let mut last_num = None;\n    for num in nums {\n        if last_num.is_none() || last_num.unwrap() != num {\n            unique_nums.push(num);\n        }\n        last_num = Some(num);\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpgudj3ztr.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        result.push(nums[i]);\n        while i < nums.len() - 1 && nums[i] == nums[i + 1] {\n            i += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpwbb84_si.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = vec![];\n    for i in 0..nums.len() {\n        if i == 0 {\n            result.push(nums[i]);\n        } else if i == nums.len() - 1 {\n            if nums[i] != nums[i - 1] {\n                result.push(nums[i]);\n            }\n        } else {\n            if nums[i] != nums[i - 1] && nums[i] != nums[i + 1] {\n                result.push(nums[i]);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for num in nums {\n        if !res.contains(&num) {\n            res.push(num);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpxloyiigu.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut i = 0;\n    let mut j = 1;\n    while j < nums.len() {\n        if nums[i] == nums[j] {\n            j += 1;\n        } else {\n            i += 1;\n            nums[i] = nums[j];\n            j += 1;\n        }\n    }\n    nums.truncate(i + 1);\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpjwojjz39.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = vec![];\n    let mut i = 0;\n    while i < nums.len() {\n        if i == nums.len() - 1 || nums[i] != nums[i + 1] {\n            result.push(nums[i]);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpiaeekk2l.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut i = 0;\n    let mut j = 1;\n    while j < nums.len() {\n        if nums[i] != nums[j] {\n            i += 1;\n            nums[i] = nums[j];\n        }\n        j += 1;\n    }\n    nums.truncate(i + 1);\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpvca2rakx.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in nums {\n        if !result.contains(&num) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp2_ir_0pz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut i = 0;\n    let mut j = 1;\n    while j < nums.len() {\n        if nums[i] != nums[j] {\n            i += 1;\n            nums[i] = nums[j];\n        }\n        j += 1;\n    }\n    nums.truncate(i + 1);\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpvca2rakx.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    for i in 0..nums.len() {\n        if i == 0 {\n            result.push(nums[i]);\n        } else if nums[i] != nums[i - 1] {\n            result.push(nums[i]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmps48j3cih.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut i = 0;\n    while i < nums.len() - 1 {\n        if nums[i] == nums[i + 1] {\n            nums.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpo3kte986.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in nums {\n        if !result.contains(&i) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpvkceiczm.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut i = 0;\n    let mut j = 1;\n    while j < nums.len() {\n        if nums[i] == nums[j] {\n            j += 1;\n        } else {\n            i += 1;\n            nums[i] = nums[j];\n            j += 1;\n        }\n    }\n    nums.truncate(i + 1);\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpjwojjz39.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut i = 0;\n    let mut j = 1;\n    while j < nums.len() {\n        if nums[i] == nums[j] {\n            j += 1;\n        } else {\n            i += 1;\n            nums[i] = nums[j];\n            j += 1;\n        }\n    }\n    nums.truncate(i + 1);\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpjwojjz39.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for i in nums {\n        if !unique_nums.contains(&i) {\n            unique_nums.push(i);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpg7yvr4g3.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp8z5os5tf.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp8z5os5tf.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut i = 0;\n    let mut j = 1;\n    while j < nums.len() {\n        if nums[i] != nums[j] {\n            i += 1;\n            nums[i] = nums[j];\n        }\n        j += 1;\n    }\n    nums.truncate(i + 1);\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpvca2rakx.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = vec![];\n    let mut i = 0;\n    while i < nums.len() {\n        if i == nums.len() - 1 || nums[i] != nums[i + 1] {\n            result.push(nums[i]);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpiaeekk2l.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = vec![];\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1ffgpesq.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in nums {\n        if !result.contains(&num) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp2_ir_0pz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums_set = HashSet::new();\n    for num in nums {\n        nums_set.insert(num);\n    }\n    nums_set.into_iter().collect()\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp3lj4xs7u.rs:3:24\n  |\n3 |     let mut nums_set = HashSet::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut i = 0;\n    while i < nums.len() - 1 {\n        if nums[i] == nums[i + 1] {\n            nums.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpo3kte986.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp8z5os5tf.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        if i == 0 || nums[i] != nums[i - 1] {\n            result.push(nums[i]);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpgh0y4wtb.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in nums {\n        if !result.contains(&num) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp2_ir_0pz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut unique_nums = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        if i == 0 {\n            unique_nums.push(nums[i]);\n        } else if nums[i] != nums[i - 1] {\n            unique_nums.push(nums[i]);\n        }\n        i += 1;\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp_ax_ktum.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut new_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !new_nums.contains(&num) {\n            new_nums.push(num);\n        }\n    }\n    new_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpgm455iy1.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    for i in 0..nums.len() {\n        if i == 0 {\n            result.push(nums[i]);\n        } else if nums[i] != nums[i - 1] {\n            result.push(nums[i]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmps48j3cih.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        if i == 0 || nums[i] != nums[i - 1] {\n            result.push(nums[i]);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpgh0y4wtb.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppg7f58lx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        if i == nums.len() - 1 || nums[i] != nums[i + 1] {\n            result.push(nums[i]);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpji655d2d.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n    for num in nums {\n        if !seen.contains(&num) {\n            result.push(num);\n            seen.insert(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpvhou41mu.rs:4:20\n  |\n4 |     let mut seen = HashSet::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp8z5os5tf.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp8z5os5tf.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut set = HashSet::new();\n\n    for num in nums {\n        if !set.contains(&num) {\n            set.insert(num);\n            result.push(num);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpw4m4h1yp.rs:4:19\n  |\n4 |     let mut set = HashSet::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        if i == 0 || nums[i] != nums[i - 1] {\n            result.push(nums[i]);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpgh0y4wtb.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        result.push(nums[i]);\n        while i < nums.len() - 1 && nums[i] == nums[i + 1] {\n            i += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpwbb84_si.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut seen = HashSet::new();\n    let mut result = Vec::new();\n\n    for num in nums {\n        if !seen.contains(&num) {\n            seen.insert(num);\n            result.push(num);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpj7y7db9r.rs:3:20\n  |\n3 |     let mut seen = HashSet::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkwho0rl7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}