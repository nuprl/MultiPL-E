{
  "name": "mbpp_757_count_reverse_pairs",
  "language": "rs",
  "prompt": "/// Write a function to count the pairs of reverse strings in the given string vector. https://www.geeksforgeeks.org/rsthon-program-to-count-the-pairs-of-reverse-strings/\nfn count_reverse_pairs(test_list: Vec<String>) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = count_reverse_pairs;\n    assert_eq!(candidate(vec![String::from(\"julia\"), String::from(\"best\"), String::from(\"tseb\"), String::from(\"for\"), String::from(\"ailuj\")]), 2);\n    assert_eq!(candidate(vec![String::from(\"geeks\"), String::from(\"best\"), String::from(\"for\"), String::from(\"skeeg\")]), 1);\n    assert_eq!(candidate(vec![String::from(\"makes\"), String::from(\"best\"), String::from(\"sekam\"), String::from(\"for\"), String::from(\"rof\")]), 2);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut count = 0;\n    for i in 0..test_list.len() {\n        for j in i + 1..test_list.len() {\n            if test_list[i] == test_list[j].chars().rev().collect::<String>() {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..test_list.len() {\n        for j in i + 1..test_list.len() {\n            if test_list[i] == test_list[j].chars().rev().collect::<String>() {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..test_list.len() {\n        for j in i + 1..test_list.len() {\n            if test_list[i] == test_list[j].chars().rev().collect::<String>() {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count: isize = 0;\n    for i in 0..test_list.len() {\n        for j in i + 1..test_list.len() {\n            if test_list[i] == test_list[j].chars().rev().collect::<String>() {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..test_list.len() {\n        for j in i + 1..test_list.len() {\n            if test_list[i] == test_list[j].chars().rev().collect::<String>() {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..test_list.len() {\n        for j in i + 1..test_list.len() {\n            if test_list[i] == test_list[j].chars().rev().collect::<String>() {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count: isize = 0;\n    for i in 0..test_list.len() {\n        for j in i + 1..test_list.len() {\n            if test_list[i] == test_list[j].chars().rev().collect::<String>() {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count: isize = 0;\n    for i in 0..test_list.len() {\n        for j in i + 1..test_list.len() {\n            if test_list[i] == test_list[j].chars().rev().collect::<String>() {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count: isize = 0;\n    for i in 0..test_list.len() {\n        for j in i + 1..test_list.len() {\n            if test_list[i] == test_list[j].chars().rev().collect::<String>() {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..test_list.len() {\n        for j in i + 1..test_list.len() {\n            if test_list[i] == test_list[j].chars().rev().collect::<String>() {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count: isize = 0;\n    for i in 0..test_list.len() {\n        for j in i + 1..test_list.len() {\n            if test_list[i].chars().rev().collect::<String>() == test_list[j] {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..test_list.len() {\n        for j in i + 1..test_list.len() {\n            if test_list[i] == test_list[j].chars().rev().collect::<String>() {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..test_list.len() {\n        for j in i + 1..test_list.len() {\n            if test_list[i] == test_list[j].chars().rev().collect::<String>() {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n\n    for i in 0..test_list.len() {\n        for j in i + 1..test_list.len() {\n            if test_list[i] == test_list[j].chars().rev().collect::<String>() {\n                count += 1;\n            }\n        }\n    }\n\n    count",
    "    let mut count = 0;\n    for i in 0..test_list.len() {\n        for j in i + 1..test_list.len() {\n            if test_list[i] == test_list[j].chars().rev().collect::<String>() {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count: isize = 0;\n    for i in 0..test_list.len() {\n        for j in i + 1..test_list.len() {\n            if test_list[i] == test_list[j].chars().rev().collect::<String>() {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..test_list.len() {\n        for j in i + 1..test_list.len() {\n            if test_list[i] == test_list[j].chars().rev().collect::<String>() {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..test_list.len() {\n        for j in i + 1..test_list.len() {\n            if test_list[i] == test_list[j].chars().rev().collect::<String>() {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..test_list.len() {\n        for j in i + 1..test_list.len() {\n            if test_list[i] == test_list[j].chars().rev().collect::<String>() {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..test_list.len() {\n        for j in i + 1..test_list.len() {\n            if test_list[i] == test_list[j].chars().rev().collect::<String>() {\n                count += 1;\n            }\n        }\n    }\n    count"
  ]
}