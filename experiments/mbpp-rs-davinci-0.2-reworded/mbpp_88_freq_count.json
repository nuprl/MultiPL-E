{
  "name": "mbpp_88_freq_count",
  "language": "rs",
  "prompt": "use std::collections::HashMap;\n\n/// Write a function to get the frequency of all the elements in a vector, returned as a HashMap.\nfn freq_count(list1: Vec<isize>) -> HashMap<isize, isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = freq_count;\n    assert_eq!(candidate(vec![10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]), HashMap::from([(10, 4), (20, 4), (40, 2), (50, 2), (30, 1)]));\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]), HashMap::from([(1, 3), (2, 2), (3, 3), (4, 3)]));\n    assert_eq!(candidate(vec![5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]), HashMap::from([(10, 1), (5, 3), (6, 2), (7, 2), (4, 2), (9, 2)]));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut freq_map: HashMap<isize, isize> = HashMap::new();\n    for i in list1 {\n        let count = freq_map.entry(i).or_insert(0);\n        *count += 1;\n    }\n    freq_map",
    "    let mut freq_map: HashMap<isize, isize> = HashMap::new();\n    for item in list1 {\n        let count = freq_map.entry(item).or_insert(0);\n        *count += 1;\n    }\n    freq_map",
    "    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in list1 {\n        let count = map.entry(i).or_insert(0);\n        *count += 1;\n    }\n    map",
    "    let mut freq_map = HashMap::new();\n    for i in list1 {\n        let count = freq_map.entry(i).or_insert(0);\n        *count += 1;\n    }\n    freq_map",
    "    let mut freq_map: HashMap<isize, isize> = HashMap::new();\n    for item in list1 {\n        let count = freq_map.entry(item).or_insert(0);\n        *count += 1;\n    }\n    freq_map",
    "    let mut freq_map: HashMap<isize, isize> = HashMap::new();\n    for i in list1 {\n        let count = freq_map.entry(i).or_insert(0);\n        *count += 1;\n    }\n    freq_map",
    "    let mut freq_map: HashMap<isize, isize> = HashMap::new();\n    for i in list1 {\n        let count = freq_map.entry(i).or_insert(0);\n        *count += 1;\n    }\n    freq_map",
    "    let mut freq_map: HashMap<isize, isize> = HashMap::new();\n\n    for i in list1 {\n        let count = freq_map.entry(i).or_insert(0);\n        *count += 1;\n    }\n\n    freq_map",
    "    let mut freq_map = HashMap::new();\n    for i in list1 {\n        let count = freq_map.entry(i).or_insert(0);\n        *count += 1;\n    }\n    freq_map",
    "    let mut freq = HashMap::new();\n    for i in list1 {\n        let count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n    freq",
    "    let mut hm = HashMap::new();\n    for i in list1 {\n        let count = hm.entry(i).or_insert(0);\n        *count += 1;\n    }\n    hm",
    "    let mut freq_map = HashMap::new();\n    for item in list1 {\n        let count = freq_map.entry(item).or_insert(0);\n        *count += 1;\n    }\n    freq_map",
    "    let mut freq_map = HashMap::new();\n    for i in list1 {\n        let count = freq_map.entry(i).or_insert(0);\n        *count += 1;\n    }\n    freq_map",
    "    let mut map = HashMap::new();\n    for i in list1 {\n        let count = map.entry(i).or_insert(0);\n        *count += 1;\n    }\n    map",
    "    let mut map = HashMap::new();\n    for i in list1 {\n        let count = map.entry(i).or_insert(0);\n        *count += 1;\n    }\n    map",
    "    let mut hm = HashMap::new();\n    for i in list1 {\n        let count = hm.entry(i).or_insert(0);\n        *count += 1;\n    }\n    hm",
    "    let mut freq_map: HashMap<isize, isize> = HashMap::new();\n    for i in list1 {\n        let count = freq_map.entry(i).or_insert(0);\n        *count += 1;\n    }\n    freq_map",
    "    let mut freq = HashMap::new();\n    for i in list1 {\n        let count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n    freq",
    "    let mut freq_map = HashMap::new();\n    for x in list1 {\n        let count = freq_map.entry(x).or_insert(0);\n        *count += 1;\n    }\n    freq_map",
    "    let mut freq_map: HashMap<isize, isize> = HashMap::new();\n    for i in list1 {\n        let count = freq_map.entry(i).or_insert(0);\n        *count += 1;\n    }\n    freq_map"
  ]
}