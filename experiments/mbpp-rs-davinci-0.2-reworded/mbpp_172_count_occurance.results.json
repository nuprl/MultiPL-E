{
  "name": "mbpp_172_count_occurance",
  "language": "rs",
  "prompt": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..].starts_with(\"std\") {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() - 2 {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n            i += 2;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpho6xwzr4.rs:5:15\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..].starts_with(\"std\") {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmpkts20ill.rs:6:22\n  |\n6 |         if s[i..i+3] == \"std\" {\n  |                      ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count: isize = 0;\n    let mut i: usize = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() - 2 {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp6nntcsaj.rs:5:15\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count: isize = 0;\n    let mut i: usize = 0;\n    while i < s.len() - 2 {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpdmew9qv8.rs:5:15\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s.as_bytes()[i] == 's' as u8 {\n            if i + 1 < s.len() && s.as_bytes()[i + 1] == 't' as u8 {\n                if i + 2 < s.len() && s.as_bytes()[i + 2] == 'd' as u8 {\n                    count += 1;\n                }\n            }\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmpkts20ill.rs:6:22\n  |\n6 |         if s[i..i+3] == \"std\" {\n  |                      ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        if s[i..i+3] == \"std\" {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmp4tvupmzi.rs:5:22\n  |\n5 |         if s[i..i+3] == \"std\" {\n  |                      ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s.as_bytes()[i] == 's' as u8 {\n            if s.as_bytes()[i + 1] == 't' as u8 {\n                if s.as_bytes()[i + 2] == 'd' as u8 {\n                    count += 1;\n                }\n            }\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp8459mc5c.rs:7:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count: isize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut k: usize = 0;\n    let mut l: usize = 0;\n    let mut m: usize = 0;\n    let mut n: usize = 0;\n    let mut o: usize = 0;\n    let mut p: usize = 0;\n    let mut q: usize = 0;\n    let mut r: usize = 0;\n    let mut s: usize = 0;\n    let mut t: usize = 0;\n    let mut u: usize = 0;\n    let mut v: usize = 0;\n    let mut w: usize = 0;\n    let mut x: usize = 0;\n    let mut y: usize = 0;\n    let mut z: usize = 0;\n    let mut a: usize = 0;\n    let mut b: usize = 0;\n    let mut c: usize = 0;\n    let mut d: usize = 0;\n    let mut e: usize = 0;\n    let mut f: usize = 0;\n    let mut g: usize = 0;\n    let mut h: usize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut k: usize = 0;\n    let mut l: usize = 0;\n    let mut m: usize = 0;\n    let mut n: usize = 0;\n    let mut o: usize = 0;\n    let mut p: usize = 0;\n    let mut q: usize = 0;\n    let mut r: usize = 0;\n    let mut s: usize = 0;\n    let mut t: usize = 0;\n    let mut u: usize = 0;\n    let mut v: usize = 0;\n    let mut w: usize = 0;\n    let mut x: usize = 0;\n    let mut y: usize = 0;\n    let mut z: usize = 0;\n    let mut a: usize = 0;\n    let mut b:\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "error: expected type, found `}`\n  --> /tmp/tmpmp35kvjb.rs:50:1\n   |\n49 |     let mut b:\n   |         ----- while parsing the type for `mut b`\n50 | }\n   | ^ expected type\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut index = 0;\n    while index < s.len() {\n        if s.get(index..index + 3) == Some(\"std\") {\n            count += 1;\n            index += 3;\n        } else {\n            index += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n    let mut ppp = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp2f6kxszp.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..].starts_with(\"std\") {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s.as_str()[i..i + 3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmpcj42jms2.rs:6:33\n  |\n6 |         if s.as_str()[i..i + 3] == \"std\" {\n  |                                 ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    for c in s.chars() {\n        match c {\n            'a' => i += 1,\n            'b' => j += 1,\n            'c' => k += 1,\n            'd' => l += 1,\n            'e' => m += 1,\n            'f' => n += 1,\n            'g' => o += 1,\n            'h' => p += 1,\n            'i' => q += 1,\n            'j' => r += 1,\n            'k' => s += 1,\n            'l' => t += 1,\n            'm' => u += 1,\n            'n' => v += 1,\n            'o' => w += 1,\n            'p' => x += 1,\n            'q' => y += 1,\n            'r' => z += 1,\n            _ => {},\n        }\n    }\n    count += i * j * k;\n    count += l * m * n * o;\n    count += p * q * r * s * t;\n    count += u * v * w * x * y * z;\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0599]: no method named `chars` found for type `{integer}` in the current scope\n  --> /tmp/tmpnbs3i97o.rs:22:16\n   |\n22 |     for c in s.chars() {\n   |                ^^^^^ method not found in `{integer}`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    for c in s.chars() {\n        match c {\n            'a' => i += 1,\n            'b' => j += 1,\n            'c' => k += 1,\n            'd' => l += 1,\n            'e' => m += 1,\n            'f' => n += 1,\n            'g' => o += 1,\n            'h' => p += 1,\n            'i' => q += 1,\n            'j' => r += 1,\n            'k' => s += 1,\n            'l' => t += 1,\n            'm' => u += 1,\n            'n' => v += 1,\n            'o' => w += 1,\n            'p' => x += 1,\n            'q' => y += 1,\n            'r' => z += 1,\n            _ => (),\n        }\n    }\n    count += i * j * k;\n    count += l * m * n * o;\n    count += p * q * r * s * t;\n    count += u * v * w * x * y * z;\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0599]: no method named `chars` found for type `{integer}` in the current scope\n  --> /tmp/tmpe2447xa7.rs:22:16\n   |\n22 |     for c in s.chars() {\n   |                ^^^^^ method not found in `{integer}`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnzkyxrrl.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s.get(i..i+3) == Some(\"std\") {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 19 is out of bounds of `letstdlenstdporstd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() - 2 {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmplpr85a1y.rs:5:15\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        if s.chars().nth(i) == Some('s') {\n            if s.chars().nth(i + 1) == Some('t') {\n                if s.chars().nth(i + 2) == Some('d') {\n                    count += 1;\n                }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() - 2 {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp6xeeayqz.rs:5:15\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() - 2 {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp7zlmbv4p.rs:4:17\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..].starts_with(\"std\") {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmpkts20ill.rs:6:22\n  |\n6 |         if s[i..i+3] == \"std\" {\n  |                      ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmpr_84nymo.rs:6:22\n  |\n6 |         if s[i..i+3] == \"std\" {\n  |                      ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    for c in s.chars() {\n        match c {\n            'a' => i += 1,\n            'b' => j += 1,\n            'c' => k += 1,\n            'd' => l += 1,\n            'e' => m += 1,\n            'f' => n += 1,\n            'g' => o += 1,\n            'h' => p += 1,\n            'i' => q += 1,\n            'j' => r += 1,\n            'k' => s += 1,\n            'l' => t += 1,\n            'm' => u += 1,\n            'n' => v += 1,\n            'o' => w += 1,\n            'p' => x += 1,\n            'q' => y += 1,\n            'r' => z += 1,\n            _ => (),\n        }\n    }\n    count = i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z;\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0599]: no method named `chars` found for type `{integer}` in the current scope\n  --> /tmp/tmprrd3g8m3.rs:22:16\n   |\n22 |     for c in s.chars() {\n   |                ^^^^^ method not found in `{integer}`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    for c in s.chars() {\n        if c == 'a' {\n            i += 1;\n        }\n        if c == 'b' {\n            j += 1;\n        }\n        if c == 'c' {\n            k += 1;\n        }\n        if c == 'd' {\n            l += 1;\n        }\n        if c == 'e' {\n            m += 1;\n        }\n        if c == 'f' {\n            n += 1;\n        }\n        if c == 'g' {\n            o += 1;\n        }\n        if c == 'h' {\n            p += 1;\n        }\n        if c == 'i' {\n            q += 1;\n        }\n        if c == 'j' {\n            r += 1;\n        }\n        if c == 'k' {\n            s += 1;\n        }\n        if c == 'l' {\n            t += 1;\n        }\n        if c == 'm' {\n            u += 1;\n        }\n        if c == 'n' {\n            v += 1;\n        }\n        if c == 'o' {\n            w += 1;\n        }\n        if c == 'p' {\n            x += 1;\n        }\n        if c == 'q' {\n            y += 1;\n        }\n        if c == 'r' {\n            z += 1;\n        }\n    }\n    count = i + j + k + l + m + n + o + p + q +\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n  --> /tmp/tmp_hqszulb.rs:79:1\n   |\n79 | }\n   | ^ expected expression\n\nerror[E0599]: no method named `chars` found for type `{integer}` in the current scope\n  --> /tmp/tmp_hqszulb.rs:22:16\n   |\n22 |     for c in s.chars() {\n   |                ^^^^^ method not found in `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s.chars().nth(i) == Some('s') {\n            if s.chars().nth(i + 1) == Some('t') {\n                if s.chars().nth(i + 2) == Some('d') {\n                    count += 1;\n                }\n            }\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnzkyxrrl.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmpr_84nymo.rs:6:22\n  |\n6 |         if s[i..i+3] == \"std\" {\n  |                      ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() - 2 {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpsihv8uqp.rs:5:15\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmpr_84nymo.rs:6:22\n  |\n6 |         if s[i..i+3] == \"std\" {\n  |                      ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..].starts_with(\"std\") {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() - 2 {\n        if s.as_bytes()[i] == 's' as u8 && s.as_bytes()[i + 1] == 't' as u8 && s.as_bytes()[i + 2] == 'd' as u8 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpd9m2cn32.rs:4:17\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n    let mut ppp = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp2f6kxszp.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n    let mut ppp = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp2f6kxszp.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmpr_84nymo.rs:6:22\n  |\n6 |         if s[i..i+3] == \"std\" {\n  |                      ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmpkts20ill.rs:6:22\n  |\n6 |         if s[i..i+3] == \"std\" {\n  |                      ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnzkyxrrl.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmpkts20ill.rs:6:22\n  |\n6 |         if s[i..i+3] == \"std\" {\n  |                      ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 19 is out of bounds of `letstdlenstdporstd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 19 is out of bounds of `letstdlenstdporstd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n    let mut ppp = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp2f6kxszp.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnzkyxrrl.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnzkyxrrl.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n    let mut ppp = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp2f6kxszp.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 19 is out of bounds of `letstdlenstdporstd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n    let mut ppp = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp2f6kxszp.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s.chars().nth(i) == Some('s') {\n            if s.chars().nth(i + 1) == Some('t') {\n                if s.chars().nth(i + 2) == Some('d') {\n                    count += 1;\n                }\n            }\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s.chars().nth(i) == Some('s') {\n            if s.chars().nth(i + 1) == Some('t') {\n                if s.chars().nth(i + 2) == Some('d') {\n                    count += 1;\n                }\n            }\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..].starts_with(\"std\") {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() - 2 {\n        if s[i..i + 3] == \"std\" {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmpdhk83xok.rs:5:24\n  |\n5 |         if s[i..i + 3] == \"std\" {\n  |                        ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 19 is out of bounds of `letstdlenstdporstd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 19 is out of bounds of `letstdlenstdporstd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 19 is out of bounds of `letstdlenstdporstd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnzkyxrrl.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnzkyxrrl.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s.as_bytes()[i] == 's' as u8 {\n            if i + 1 < s.len() && s.as_bytes()[i + 1] == 't' as u8 {\n                if i + 2 < s.len() && s.as_bytes()[i + 2] == 'd' as u8 {\n                    count += 1;\n                    i += 2;\n                }\n            }\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 19 is out of bounds of `letstdlenstdporstd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n    let mut ppp = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp2f6kxszp.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..].starts_with(\"std\") {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 19 is out of bounds of `letstdlenstdporstd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnzkyxrrl.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnzkyxrrl.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..i + 3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmp9acn6z9d.rs:6:24\n  |\n6 |         if s[i..i + 3] == \"std\" {\n  |                        ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    for word in s.split_whitespace() {\n        if word == \"std\" {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `3`', /tmp/tmp7n1pwz9q.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        if s[i..i+3] == \"std\" {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmp4tvupmzi.rs:5:22\n  |\n5 |         if s[i..i+3] == \"std\" {\n  |                      ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n    let mut ppp = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp2f6kxszp.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 19 is out of bounds of `letstdlenstdporstd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 19 is out of bounds of `letstdlenstdporstd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s.as_bytes()[i] == 's' as u8 {\n            if s.as_bytes()[i + 1] == 't' as u8 {\n                if s.as_bytes()[i + 2] == 'd' as u8 {\n                    count += 1;\n                }\n            }\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp8459mc5c.rs:7:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 19 is out of bounds of `letstdlenstdporstd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len()-2 {\n        if s.as_bytes()[i] == 's' as u8 && s.as_bytes()[i+1] == 't' as u8 && s.as_bytes()[i+2] == 'd' as u8 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpz7zospl6.rs:4:17\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n    let mut ppp = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp2f6kxszp.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s.chars().nth(i) == Some('s') {\n            if s.chars().nth(i + 1) == Some('t') {\n                if s.chars().nth(i + 2) == Some('d') {\n                    count += 1;\n                }\n            }\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnzkyxrrl.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() - 2 {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp7zlmbv4p.rs:4:17\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count: isize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut k: usize = 0;\n    let mut l: usize = 0;\n    let mut m: usize = 0;\n    let mut n: usize = 0;\n    let mut o: usize = 0;\n    let mut p: usize = 0;\n    let mut q: usize = 0;\n    let mut r: usize = 0;\n    let mut s: usize = 0;\n    let mut t: usize = 0;\n    let mut u: usize = 0;\n    let mut v: usize = 0;\n    let mut w: usize = 0;\n    let mut x: usize = 0;\n    let mut y: usize = 0;\n    let mut z: usize = 0;\n    let mut a: usize = 0;\n    let mut b: usize = 0;\n    let mut c: usize = 0;\n    let mut d: usize = 0;\n    let mut e: usize = 0;\n    let mut f: usize = 0;\n    let mut g: usize = 0;\n    let mut h: usize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut k: usize = 0;\n    let mut l: usize = 0;\n    let mut m: usize = 0;\n    let mut n: usize = 0;\n    let mut o: usize = 0;\n    let mut p: usize = 0;\n    let mut q: usize = 0;\n    let mut r: usize = 0;\n    let mut s: usize = 0;\n    let mut t: usize = 0;\n    let mut u: usize = 0;\n    let mut v: usize = 0;\n    let mut w: usize = 0;\n    let mut x: usize = 0;\n    let mut y: usize = 0;\n    let mut z: usize = 0;\n    let mut a: usize = 0;\n    let mut b:\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "error: expected type, found `}`\n  --> /tmp/tmpmp35kvjb.rs:50:1\n   |\n49 |     let mut b:\n   |         ----- while parsing the type for `mut b`\n50 | }\n   | ^ expected type\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..i + 3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmp9acn6z9d.rs:6:24\n  |\n6 |         if s[i..i + 3] == \"std\" {\n  |                        ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 19 is out of bounds of `letstdlenstdporstd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() - 2 {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpsihv8uqp.rs:5:15\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 19 is out of bounds of `letstdlenstdporstd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n    let mut ppp = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp2f6kxszp.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 19 is out of bounds of `letstdlenstdporstd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmpr_84nymo.rs:6:22\n  |\n6 |         if s[i..i+3] == \"std\" {\n  |                      ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmpr_84nymo.rs:6:22\n  |\n6 |         if s[i..i+3] == \"std\" {\n  |                      ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n    let mut ppp = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp2f6kxszp.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    for c in s.chars() {\n        match c {\n            'a' => i += 1,\n            'b' => j += 1,\n            'c' => k += 1,\n            'd' => l += 1,\n            'e' => m += 1,\n            'f' => n += 1,\n            'g' => o += 1,\n            'h' => p += 1,\n            'i' => q += 1,\n            'j' => r += 1,\n            'k' => s += 1,\n            'l' => t += 1,\n            'm' => u += 1,\n            'n' => v += 1,\n            'o' => w += 1,\n            'p' => x += 1,\n            'q' => y += 1,\n            'r' => z += 1,\n            _ => (),\n        }\n    }\n    if i > 0 && j > 0 && k > 0 {\n        count += 1;\n    }\n    if l > 0 && m > 0 && n > 0 {\n        count += 1;\n    }\n    if o > 0 && p > 0 && q > 0 {\n        count += 1;\n    }\n    if r > 0 && s > 0 && t > 0 {\n        count += 1;\n    }\n    if u > 0 && v > 0 && w > 0 {\n        count += 1;\n    }\n    if x > 0 && y > 0 && z > 0 {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0599]: no method named `chars` found for type `{integer}` in the current scope\n  --> /tmp/tmpvza4r0ij.rs:22:16\n   |\n22 |     for c in s.chars() {\n   |                ^^^^^ method not found in `{integer}`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..].starts_with(\"std\") {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 19 is out of bounds of `letstdlenstdporstd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..].starts_with(\"std\") {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnzkyxrrl.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmpkts20ill.rs:6:22\n  |\n6 |         if s[i..i+3] == \"std\" {\n  |                      ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count: isize = 0;\n    let mut i: isize = 0;\n    let mut j: isize = 0;\n    let mut k: isize = 0;\n    let mut l: isize = 0;\n    let mut m: isize = 0;\n    let mut n: isize = 0;\n    let mut o: isize = 0;\n    let mut p: isize = 0;\n    let mut q: isize = 0;\n    let mut r: isize = 0;\n    let mut s: isize = 0;\n    let mut t: isize = 0;\n    let mut u: isize = 0;\n    let mut v: isize = 0;\n    let mut w: isize = 0;\n    let mut x: isize = 0;\n    let mut y: isize = 0;\n    let mut z: isize = 0;\n    let mut a: isize = 0;\n    let mut b: isize = 0;\n    let mut c: isize = 0;\n    let mut d: isize = 0;\n    let mut e: isize = 0;\n    let mut f: isize = 0;\n    let mut g: isize = 0;\n    let mut h: isize = 0;\n    let mut i: isize = 0;\n    let mut j: isize = 0;\n    let mut k: isize = 0;\n    let mut l: isize = 0;\n    let mut m: isize = 0;\n    let mut n: isize = 0;\n    let mut o: isize = 0;\n    let mut p: isize = 0;\n    let mut q: isize = 0;\n    let mut r: isize = 0;\n    let mut s: isize = 0;\n    let mut t: isize = 0;\n    let mut u: isize = 0;\n    let mut v: isize = 0;\n    let mut w: isize = 0;\n    let mut x: isize = 0;\n    let mut y: isize = 0;\n    let mut z: isize = 0;\n    let mut a: isize = 0;\n    let mut b:\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error: expected type, found `}`\n  --> /tmp/tmpmmfv5i25.rs:50:1\n   |\n49 |     let mut b:\n   |         ----- while parsing the type for `mut b`\n50 | }\n   | ^ expected type\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 19 is out of bounds of `letstdlenstdporstd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut index = 0;\n    let mut found = false;\n    let mut last_index = 0;\n    let mut chars = s.chars();\n    while let Some(c) = chars.next() {\n        if c == 's' {\n            found = true;\n            last_index = index;\n        } else if found {\n            if c == 't' {\n                if let Some(c) = chars.next() {\n                    if c == 'd' {\n                        count += 1;\n                        found = false;\n                    } else {\n                        index = last_index;\n                        found = false;\n                    }\n                }\n            } else {\n                index = last_index;\n                found = false;\n            }\n        }\n        index += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `1`', /tmp/tmp5gyndhzk.rs:36:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s.chars().nth(i) == Some('s') && s.chars().nth(i + 1) == Some('t') && s.chars().nth(i + 2) == Some('d') {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnzkyxrrl.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 19 is out of bounds of `letstdlenstdporstd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmpr_84nymo.rs:6:22\n  |\n6 |         if s[i..i+3] == \"std\" {\n  |                      ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 19 is out of bounds of `letstdlenstdporstd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 19 is out of bounds of `letstdlenstdporstd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut iter = s.chars();\n    loop {\n        let c = iter.next();\n        if c.is_none() {\n            break;\n        }\n        let c = c.unwrap();\n        if c == 's' {\n            let c = iter.next();\n            if c.is_none() {\n                break;\n            }\n            let c = c.unwrap();\n            if c == 't' {\n                let c = iter.next();\n                if c.is_none() {\n                    break;\n                }\n                let c = c.unwrap();\n                if c == 'd' {\n                    count += 1;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `1`', /tmp/tmpu_1piqno.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnzkyxrrl.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..].starts_with(\"std\") {\n            count += 1;\n            i += 2;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmpr_84nymo.rs:6:22\n  |\n6 |         if s[i..i+3] == \"std\" {\n  |                      ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmpkts20ill.rs:6:22\n  |\n6 |         if s[i..i+3] == \"std\" {\n  |                      ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() - 2 {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmplpr85a1y.rs:5:15\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnzkyxrrl.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() - 2 {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp7zlmbv4p.rs:4:17\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() - 2 {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpsihv8uqp.rs:5:15\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnzkyxrrl.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..].starts_with(\"std\") {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..i + 3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmp9acn6z9d.rs:6:24\n  |\n6 |         if s[i..i + 3] == \"std\" {\n  |                        ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s.as_bytes()[i] == 's' as u8 {\n            if i + 1 < s.len() && s.as_bytes()[i + 1] == 't' as u8 {\n                if i + 2 < s.len() && s.as_bytes()[i + 2] == 'd' as u8 {\n                    count += 1;\n                }\n            }\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnzkyxrrl.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() - 2 {\n        if s.as_bytes()[i] == 's' as u8 && s.as_bytes()[i + 1] == 't' as u8 && s.as_bytes()[i + 2] == 'd' as u8 {\n            count += 1;\n            i += 2;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpzu8dg534.rs:5:15\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() - 2 {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp7zlmbv4p.rs:4:17\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmpkts20ill.rs:6:22\n  |\n6 |         if s[i..i+3] == \"std\" {\n  |                      ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() - 2 {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp7zlmbv4p.rs:4:17\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n    let mut ppp = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp2f6kxszp.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnzkyxrrl.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 19 is out of bounds of `letstdlenstdporstd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    for c in s.chars() {\n        match c {\n            'a' => i += 1,\n            'b' => j += 1,\n            'c' => k += 1,\n            'd' => l += 1,\n            'e' => m += 1,\n            'f' => n += 1,\n            'g' => o += 1,\n            'h' => p += 1,\n            'i' => q += 1,\n            'j' => r += 1,\n            'k' => s += 1,\n            'l' => t += 1,\n            'm' => u += 1,\n            'n' => v += 1,\n            'o' => w += 1,\n            'p' => x += 1,\n            'q' => y += 1,\n            'r' => z += 1,\n            _ => (),\n        }\n    }\n    let mut count = 0;\n    if i > 0 {\n        count += 1;\n    }\n    if j > 0 {\n        count += 1;\n    }\n    if k > 0 {\n        count += 1;\n    }\n    if l > 0 {\n        count += 1;\n    }\n    if m > 0 {\n        count += 1;\n    }\n    if n > 0 {\n        count += 1;\n    }\n    if o > 0 {\n        count += 1;\n    }\n    if p > 0 {\n        count += 1;\n    }\n    if q > 0 {\n        count += 1;\n    }\n\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0599]: no method named `chars` found for type `{integer}` in the current scope\n  --> /tmp/tmp7wp4i120.rs:22:16\n   |\n22 |     for c in s.chars() {\n   |                ^^^^^ method not found in `{integer}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7wp4i120.rs:70:14\n   |\n70 |       if q > 0 {\n   |  ______________^\n71 | |         count += 1;\n72 | |     }\n   | |_____^ expected `isize`, found `()`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s.as_bytes()[i] == 's' as u8 {\n            if s.as_bytes()[i + 1] == 't' as u8 {\n                if s.as_bytes()[i + 2] == 'd' as u8 {\n                    count += 1;\n                }\n            }\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp8459mc5c.rs:7:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n\n    for c in s.chars() {\n        if i == 0 && c == 's' {\n            i = 1;\n        } else if i == 1 && c == 't' {\n            i = 2;\n        } else if i == 2 && c == 'd' {\n            count += 1;\n            i = 0;\n        } else {\n            i = 0;\n        }\n\n        if j == 0 && c == 's' {\n            j = 1;\n        } else if j == 1 && c == 't' {\n            j = 2;\n        } else if j == 2 && c == 'd' {\n            count += 1;\n            j = 0;\n        } else {\n            j = 0;\n        }\n\n        if k == 0 && c == 's' {\n            k = 1;\n        } else if k == 1 && c == 't' {\n            k = 2;\n        } else if k == 2 && c == 'd' {\n            count += 1;\n            k = 0;\n        } else {\n            k = 0;\n        }\n\n        if l == 0 && c == 's' {\n            l = 1;\n        } else if l == 1 && c == 't' {\n            l = 2;\n        } else if l == 2 && c == 'd' {\n            count += 1;\n            l = 0;\n        } else {\n            l = 0;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `12`,\n right: `3`', /tmp/tmp0mc5tpl5.rs:59:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnzkyxrrl.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        if i + 2 < s.len() && &s[i..i + 3] == \"std\" {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnzkyxrrl.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnzkyxrrl.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..].starts_with(\"std\") {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() - 2 {\n        if s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmp2qte7cez.rs:6:22\n  |\n6 |         if s[i..i+3] == \"std\" {\n  |                      ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut len = s.len();\n    let mut s = s.as_bytes();\n    while i < len {\n        if s[i] == 's' as u8 {\n            j = i + 1;\n            if j < len && s[j] == 't' as u8 {\n                j = j + 1;\n                if j < len && s[j] == 'd' as u8 {\n                    count = count + 1;\n                }\n            }\n        }\n        i = i + 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 19 is out of bounds of `letstdlenstdporstd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() - 2 {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp6nntcsaj.rs:5:15\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnzkyxrrl.rs:2:34\n  |\n2 | fn count_occurance(s: String) -> isize {\n  |    ---------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 19 is out of bounds of `letstdlenstdporstd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() - 2 {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp7zlmbv4p.rs:4:17\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if &s[i..i + 3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'byte index 20 is out of bounds of `truststdsolensporsd`', library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i..i+3] == \"std\" {\n            count += 1;\n            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmpkts20ill.rs:6:22\n  |\n6 |         if s[i..i+3] == \"std\" {\n  |                      ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}