{
  "name": "mbpp_282_sub_list",
  "language": "rs",
  "prompt": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in 0..nums1.len() {\n        v.push(nums1[i] - nums2[i]);\n    }\n    v\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in 0..nums1.len() {\n        res.push(nums1[i] - nums2[i]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (x, y) in nums1.iter().zip(nums2.iter()) {\n        result.push(x - y);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut nums = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        nums.push(i - j);\n    }\n    nums\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut nums3 = Vec::new();\n    for i in 0..nums1.len() {\n        nums3.push(nums1[i] - nums2[i]);\n    }\n    nums3\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut nums3 = Vec::new();\n    for i in 0..nums1.len() {\n        nums3.push(nums1[i] - nums2[i]);\n    }\n    nums3\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(n1 - n2);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        res.push(i - j);\n    }\n    res\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in 0..nums1.len() {\n        res.push(nums1[i] - nums2[i]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in 0..nums1.len() {\n        res.push(nums1[i] - nums2[i]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in 0..nums1.len() {\n        res.push(nums1[i] - nums2[i]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for (a, b) in nums1.iter().zip(nums2.iter()) {\n        res.push(a - b);\n    }\n    res\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.into_iter().zip(nums2.into_iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        res.push(i - j);\n    }\n    res\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (a, b) in nums1.iter().zip(nums2.iter()) {\n        result.push(a - b);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut ret = Vec::new();\n    for i in 0..nums1.len() {\n        ret.push(nums1[i] - nums2[i]);\n    }\n    ret\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.into_iter().zip(nums2).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        res.push(i - j);\n    }\n    res\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (a, b) in nums1.iter().zip(nums2.iter()) {\n        result.push(a - b);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}