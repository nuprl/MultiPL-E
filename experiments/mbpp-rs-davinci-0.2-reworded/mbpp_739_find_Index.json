{
  "name": "mbpp_739_find_Index",
  "language": "rs",
  "prompt": "/// Write a rsthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfn find_Index(n: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = find_Index;\n    assert_eq!(candidate(2), 4);\n    assert_eq!(candidate(3), 14);\n    assert_eq!(candidate(4), 45);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut low = 0;\n    let mut high = n;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        let t = (mid * (mid + 1)) / 2;\n        if t < n {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri = 1;\n    while tri < n {\n        low = mid + 1;\n        high = 2 * low;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    return mid;",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut mid = 0;\n    let mut ans = 0;\n\n    while low <= high {\n        mid = (low + high) / 2;\n        if mid * (mid + 1) / 2 < n * (n + 1) / 2 {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri = 1;\n    while tri < n {\n        low = mid + 1;\n        high = 2 * low - 1;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    mid",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let mut x = m * (m + 1) / 2;\n        let mut digits = 0;\n        while x > 0 {\n            digits += 1;\n            x /= 10;\n        }\n        if digits == n {\n            ans = m;\n            r = m - 1;\n        } else if digits < n {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    ans",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut ans = 0;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        let mut x = mid * (mid + 1) / 2;\n\n        if x % 10 == 0 {\n            x = x / 10;\n        }\n\n        let mut count = 0;\n        while x > 0 {\n            count += 1;\n            x = x / 10;\n        }\n\n        if count == n {\n            ans = mid;\n            high = mid - 1;\n        } else if count < n {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    ans",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri < n {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    i - 2",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        low = high;\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let mut temp = mid * (mid + 1) / 2;\n        if temp < n {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        j += 1;\n        i = (j * (j + 1)) / 2;\n    }\n    j",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if is_triangular(m) {\n            ans = m;\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    return ans;",
    "    let mut i = 1;\n    let mut j = 1;\n    let mut count = 0;\n    while count < n {\n        j = j + 1;\n        i = i + j;\n        count = i.to_string().len() as isize;\n    }\n    return j;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri_num = 1;\n    while tri_num.to_string().len() < n as usize {\n        low = mid + 1;\n        high = 2 * low;\n        mid = (low + high) / 2;\n        tri_num = (mid * (mid + 1)) / 2;\n    }\n    mid",
    "    let mut low = 0;\n    let mut high = n;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        if (mid * (mid + 1)) / 2 < n {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low: isize = 1;\n    let mut high: isize = 1;\n    let mut mid: isize = 1;\n    let mut ans: isize = 1;\n    while high * (high + 1) / 2 < n {\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let mut temp: isize = mid * (mid + 1) / 2;\n        if temp < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri_num = 0;\n    while tri_num < n {\n        mid = (low + high) / 2;\n        tri_num = mid * (mid + 1) / 2;\n        if tri_num < n {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri = 0;\n    while tri < n {\n        mid = (low + high) / 2;\n        tri = (mid * (mid + 1)) / 2;\n        if tri < n {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut mid = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        let mut tri = mid * (mid + 1) / 2;\n        if tri < n {\n            low = mid + 1;\n        } else if tri > n {\n            high = mid - 1;\n        } else {\n            return mid;\n        }\n    }\n    return mid;",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut ans = 0;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        let t = (mid * (mid + 1)) / 2;\n        if t < 10.pow(n as u32) {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 0;\n    let mut high = n;\n    let mut ans = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        let num = (mid * (mid + 1)) / 2;\n        if num.to_string().len() == n as usize {\n            ans = mid as isize;\n            high = mid - 1;\n        } else if num.to_string().len() < n as usize {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans"
  ]
}