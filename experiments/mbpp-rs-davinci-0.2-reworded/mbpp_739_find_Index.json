{
  "name": "mbpp_739_find_Index",
  "language": "rs",
  "prompt": "/// Write a rsthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfn find_Index(n: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = find_Index;\n    assert_eq!(candidate(2), 4);\n    assert_eq!(candidate(3), 14);\n    assert_eq!(candidate(4), 45);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut low = 0;\n    let mut high = n;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        let t = (mid * (mid + 1)) / 2;\n        if t < n {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri = 1;\n    while tri < n {\n        low = mid + 1;\n        high = 2 * low;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    return mid;",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut mid = 0;\n    let mut ans = 0;\n\n    while low <= high {\n        mid = (low + high) / 2;\n        if mid * (mid + 1) / 2 < n * (n + 1) / 2 {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri = 1;\n    while tri < n {\n        low = mid + 1;\n        high = 2 * low - 1;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    mid",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let mut x = m * (m + 1) / 2;\n        let mut digits = 0;\n        while x > 0 {\n            digits += 1;\n            x /= 10;\n        }\n        if digits == n {\n            ans = m;\n            r = m - 1;\n        } else if digits < n {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    ans",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut ans = 0;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        let mut x = mid * (mid + 1) / 2;\n\n        if x % 10 == 0 {\n            x = x / 10;\n        }\n\n        let mut count = 0;\n        while x > 0 {\n            count += 1;\n            x = x / 10;\n        }\n\n        if count == n {\n            ans = mid;\n            high = mid - 1;\n        } else if count < n {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    ans",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri < n {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    i - 2",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        low = high;\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let mut temp = mid * (mid + 1) / 2;\n        if temp < n {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        j += 1;\n        i = (j * (j + 1)) / 2;\n    }\n    j",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if is_triangular(m) {\n            ans = m;\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    return ans;",
    "    let mut i = 1;\n    let mut j = 1;\n    let mut count = 0;\n    while count < n {\n        j = j + 1;\n        i = i + j;\n        count = i.to_string().len() as isize;\n    }\n    return j;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri_num = 1;\n    while tri_num.to_string().len() < n as usize {\n        low = mid + 1;\n        high = 2 * low;\n        mid = (low + high) / 2;\n        tri_num = (mid * (mid + 1)) / 2;\n    }\n    mid",
    "    let mut low = 0;\n    let mut high = n;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        if (mid * (mid + 1)) / 2 < n {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low: isize = 1;\n    let mut high: isize = 1;\n    let mut mid: isize = 1;\n    let mut ans: isize = 1;\n    while high * (high + 1) / 2 < n {\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let mut temp: isize = mid * (mid + 1) / 2;\n        if temp < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri_num = 0;\n    while tri_num < n {\n        mid = (low + high) / 2;\n        tri_num = mid * (mid + 1) / 2;\n        if tri_num < n {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri = 0;\n    while tri < n {\n        mid = (low + high) / 2;\n        tri = (mid * (mid + 1)) / 2;\n        if tri < n {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut mid = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        let mut tri = mid * (mid + 1) / 2;\n        if tri < n {\n            low = mid + 1;\n        } else if tri > n {\n            high = mid - 1;\n        } else {\n            return mid;\n        }\n    }\n    return mid;",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut ans = 0;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        let t = (mid * (mid + 1)) / 2;\n        if t < 10.pow(n as u32) {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 0;\n    let mut high = n;\n    let mut ans = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        let num = (mid * (mid + 1)) / 2;\n        if num.to_string().len() == n as usize {\n            ans = mid as isize;\n            high = mid - 1;\n        } else if num.to_string().len() < n as usize {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri_num = 0;\n    while tri_num < n {\n        mid = (low + high) / 2;\n        tri_num = (mid * (mid + 1)) / 2;\n        if tri_num < n {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri_num = 0;\n    while tri_num < n {\n        mid = (low + high) / 2;\n        tri_num = (mid * (mid + 1)) / 2;\n        if tri_num < n {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    let mut i = 1;\n    let mut triangle = 0;\n    while n > triangle.to_string().len() as isize {\n        triangle = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    i - 1",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut ans = 0;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        let mut temp = mid * (mid + 1) / 2;\n        if temp < 10 {\n            low = mid + 1;\n        } else {\n            let mut digits = 0;\n            let mut x = temp;\n            while x != 0 {\n                x = x / 10;\n                digits += 1;\n            }\n            if digits == n {\n                ans = mid;\n                break;\n            } else if digits < n {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri = 1;\n    while tri < n {\n        low = mid + 1;\n        high = 2 * low - 1;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    return mid;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri_num = 1;\n    while tri_num.to_string().len() < n as usize {\n        low = mid + 1;\n        high = 2 * low;\n        mid = (low + high) / 2;\n        tri_num = mid * (mid + 1) / 2;\n    }\n    mid",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let triangle = mid * (mid + 1) / 2;\n        if triangle < n {\n            ans = mid;\n            low = mid + 1;\n        } else if triangle > n {\n            high = mid - 1;\n        } else {\n            return mid;\n        }\n    }\n    return ans;",
    "    let mut low = 0;\n    let mut high = n;\n    let mut ans = 0;\n    while low <= high {\n        let mid = (low + high) / 2;\n        let mut val = (mid * (mid + 1)) / 2;\n        if val * 10 > 9 * mid {\n            ans = mid;\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri = 1;\n    while tri < n {\n        low = mid + 1;\n        high = 2 * low - 1;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    return mid;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        low = high;\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let mut curr = mid * (mid + 1) / 2;\n        if curr < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low: isize = 1;\n    let mut high: isize = 1;\n    let mut mid: isize = 1;\n    let mut ans: isize = 1;\n    while high * (high + 1) / 2 < n {\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let tri_num = mid * (mid + 1) / 2;\n        if tri_num < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri = 1;\n    while tri < n {\n        low = mid + 1;\n        high = 2 * low;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    return mid;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid;\n    let mut ans = 0;\n    let mut triangle;\n    while high * (high + 1) / 2 < n {\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        triangle = mid * (mid + 1) / 2;\n        if triangle < n {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri = 1;\n    while tri < n {\n        low = mid + 1;\n        high = 2 * low - 1;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    mid",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri_num = 1;\n    while tri_num.to_string().len() < n as usize {\n        low = mid + 1;\n        high = 2 * low;\n        mid = (low + high) / 2;\n        tri_num = mid * (mid + 1) / 2;\n    }\n    return mid;",
    "    let mut low: isize = 1;\n    let mut high: isize = 1;\n    let mut mid: isize = 1;\n    let mut tri: isize = 1;\n    let mut prev_tri: isize = 0;\n\n    while tri < n {\n        low = mid + 1;\n        prev_tri = tri;\n        mid = (low + high) / 2;\n        tri = (mid * (mid + 1)) / 2;\n    }\n\n    if tri == n {\n        return mid;\n    } else {\n        return prev_tri;\n    }",
    "    let mut i = 1;\n    let mut sum = 0;\n    while sum <= n {\n        sum = sum + i;\n        i = i + 1;\n    }\n    return i - 2;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 0;\n    let mut tri = 0;\n    while tri < n {\n        mid = (low + high) / 2;\n        tri = (mid * (mid + 1)) / 2;\n        if tri < n {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid;\n    let mut ans = 1;\n    while high * (high + 1) / 2 <= n {\n        low = high;\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let temp = mid * (mid + 1) / 2;\n        if temp < n {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut mid: isize;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        if mid * (mid + 1) / 2 < n * (n + 1) / 2 {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri_number = 1;\n    let mut index = 1;\n    while tri_number < n {\n        low = index;\n        index = index + 1;\n        tri_number = tri_number + index;\n    }\n    if tri_number == n {\n        return low;\n    }\n    return -1;",
    "    let mut low = 0;\n    let mut high = n;\n    let mut ans = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        let mut triangular = (mid * (mid + 1)) / 2;\n        if triangular % 10 == 0 {\n            triangular = triangular / 10;\n        }\n        let mut digits = 0;\n        while triangular > 0 {\n            triangular = triangular / 10;\n            digits += 1;\n        }\n        if digits == n {\n            ans = mid;\n            high = mid - 1;\n        } else if digits > n {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    ans",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        if mid * (mid + 1) / 2 < n * (n + 1) / 2 {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low: isize = 1;\n    let mut high: isize = 1;\n    let mut mid: isize;\n    let mut ans: isize = 1;\n    while high * (high + 1) / 2 < n {\n        low = high;\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let mut curr = mid * (mid + 1) / 2;\n        if curr < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri_num = 1;\n\n    while tri_num.to_string().len() < n as usize {\n        low = mid + 1;\n        high = 2 * low;\n        mid = (low + high) / 2;\n        tri_num = mid * (mid + 1) / 2;\n    }\n\n    mid",
    "    let mut low = 0;\n    let mut high = n;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        let tri = (mid * (mid + 1)) / 2;\n        if tri < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri = 1;\n    while tri < n {\n        low = mid + 1;\n        high = 2 * low;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    mid",
    "    let mut l = 1;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let mid = (l + r) / 2;\n        let val = (mid * (mid + 1)) / 2;\n        if val > 10.pow(n as u32) {\n            r = mid - 1;\n        } else {\n            ans = mid;\n            l = mid + 1;\n        }\n    }\n    return ans;",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri < n {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    i - 1",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        if mid * (mid + 1) / 2 < n * (n + 1) / 2 {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans as isize",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        j += 1;\n        i = j * (j + 1) / 2;\n    }\n    j",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        low = high;\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let curr = mid * (mid + 1) / 2;\n        if curr < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri_num = 1;\n    let mut index = 1;\n\n    while tri_num.to_string().len() < n as usize {\n        low = mid + 1;\n        high = 2 * low - 1;\n        mid = (low + high) / 2;\n        index = mid;\n        tri_num = (mid * (mid + 1)) / 2;\n    }\n\n    index",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        low = mid + 1;\n        mid = (low + high) / 2;\n        high = mid * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let curr = mid * (mid + 1) / 2;\n        if curr < n {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        j += 1;\n        i = j * (j + 1) / 2;\n    }\n    j",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        low = high;\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let curr = mid * (mid + 1) / 2;\n        if curr < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low: isize = 1;\n    let mut high: isize = 1;\n    let mut mid: isize = 1;\n    let mut ans: isize = 1;\n    let mut tri_num: isize = 1;\n    let mut len: isize = 1;\n\n    while len < n {\n        low = mid + 1;\n        high = 2 * low - 1;\n        while low < high {\n            mid = (low + high) / 2;\n            tri_num = (mid * (mid + 1)) / 2;\n            len = tri_num.to_string().len() as isize;\n            if len < n {\n                low = mid + 1;\n            } else if len >= n {\n                ans = tri_num;\n                high = mid - 1;\n            }\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let t = mid * (mid + 1) / 2;\n        if t < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut l = 0;\n    let mut r = n * n;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let x = m * (m + 1) / 2;\n        if x % 10 == 0 {\n            ans = m;\n            r = m - 1;\n        } else if x % 10 < n {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return ans;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 0;\n    let mut tri = 0;\n    let mut prev_tri = 0;\n    while tri < n {\n        mid = (low + high) / 2;\n        prev_tri = tri;\n        tri = (mid * (mid + 1)) / 2;\n        if tri < n {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    if prev_tri == n {\n        mid - 1\n    } else {\n        mid\n    }",
    "    let mut low: isize = 1;\n    let mut high: isize = 1;\n    let mut mid: isize = 1;\n    let mut ans: isize = 0;\n    let mut triangle_number: isize = 0;\n    let mut digits: isize = 0;\n\n    while digits < n {\n        mid = (low + high) / 2;\n        triangle_number = (mid * (mid + 1)) / 2;\n        digits = triangle_number.to_string().len() as isize;\n        if digits < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut low: isize = 1;\n    let mut high: isize = 1;\n    let mut mid: isize = 1;\n    let mut ans: isize = 1;\n    while low <= high {\n        mid = (low + high) / 2;\n        let t = (mid * (mid + 1)) / 2;\n        let digits = (t as f64).log10() as isize + 1;\n        if digits == n {\n            ans = mid;\n            high = mid - 1;\n        } else if digits < n {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        if mid * (mid + 1) / 2 < n * (n + 1) / 2 {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    let mut low = 0;\n    let mut high = n;\n    let mut ans = 0;\n    while low <= high {\n        let mid = (low + high) / 2;\n        let num = ((mid * (mid + 1)) / 2) as f64;\n        let digits = (num.log10() + 1.0) as isize;\n        if digits == n {\n            ans = mid;\n            high = mid - 1;\n        } else if digits < n {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let t = (m * (m + 1)) / 2;\n        if t < 10.pow(n as u32 - 1) {\n            l = m + 1;\n        } else if t > 10.pow(n as u32) {\n            r = m - 1;\n        } else {\n            ans = m;\n            r = m - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut ans = 1;\n    let mut tri = 1;\n    while tri < n {\n        low = mid + 1;\n        high = 2 * mid;\n        while low <= high {\n            mid = (low + high) / 2;\n            tri = mid * (mid + 1) / 2;\n            if tri < n {\n                low = mid + 1;\n                ans = mid;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    ans",
    "    let mut l = 0;\n    let mut r = n * n;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let x = m * (m + 1) / 2;\n        if x > 10.pow(n as u32) {\n            r = m - 1;\n        } else {\n            ans = m;\n            l = m + 1;\n        }\n    }\n    ans",
    "    let mut low: isize = 1;\n    let mut high: isize = 1;\n    let mut mid: isize = 1;\n    let mut ans: isize = 1;\n    while high * (high + 1) / 2 < n {\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let tn = mid * (mid + 1) / 2;\n        if tn < n {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if is_triangular(m) {\n            ans = m;\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    return ans;",
    "    let mut low = 0;\n    let mut high = n;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        let tri_num = (mid * (mid + 1)) / 2;\n\n        if tri_num < 10.pow(n as u32 - 1) {\n            low = mid + 1;\n        } else if tri_num > 10.pow(n as u32) {\n            high = mid - 1;\n        } else {\n            return mid;\n        }\n    }\n    return -1;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let curr = mid * (mid + 1) / 2;\n        if curr < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut result = 1;\n    while (triangular_number(high) as f64).log10() as isize < n {\n        low = high;\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        if (triangular_number(mid) as f64).log10() as isize == n {\n            result = mid;\n            break;\n        } else if (triangular_number(mid) as f64).log10() as isize < n {\n            result = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri_num = 1;\n    while tri_num.to_string().len() < n as usize {\n        low = mid + 1;\n        high = 2 * low;\n        mid = (low + high) / 2;\n        tri_num = mid * (mid + 1) / 2;\n    }\n    return mid;",
    "    let mut low: isize = 1;\n    let mut high: isize = 1;\n    let mut mid: isize = 1;\n    let mut ans: isize = 1;\n    while (high * (high + 1) / 2) < n {\n        low = high;\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        if (mid * (mid + 1) / 2) < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    let mut low = 0;\n    let mut high = n;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        let mut tri = (mid * (mid + 1)) / 2;\n        if tri < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    let mut low = 0;\n    let mut high = n;\n    let mut ans = 0;\n    while low <= high {\n        let mid = (low + high) / 2;\n        let mut t = mid * (mid + 1) / 2;\n        if t * (t + 1) / 2 <= n {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low: isize = 1;\n    let mut high: isize = 1;\n    let mut mid: isize = 1;\n    let mut ans: isize = 1;\n    while high * (high + 1) / 2 < n {\n        high = high * 2;\n    }\n    while low <= high {\n        mid = low + (high - low) / 2;\n        let mut tri = mid * (mid + 1) / 2;\n        if tri < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid;\n    let mut tri_num;\n    let mut index = 1;\n\n    while high * (high + 1) / 2 < n {\n        low = high;\n        high = high * 2;\n    }\n\n    while low <= high {\n        mid = (low + high) / 2;\n        tri_num = mid * (mid + 1) / 2;\n\n        if tri_num < n {\n            index = mid;\n            low = mid + 1;\n        } else if tri_num > n {\n            high = mid - 1;\n        } else {\n            return mid;\n        }\n    }\n\n    index",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let curr = mid * (mid + 1) / 2;\n        if curr < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        if mid * (mid + 1) / 2 < n * (n + 1) / 2 {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri = 1;\n    while tri < n {\n        low = mid + 1;\n        high = 2 * low;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    mid",
    "    let mut low = 0;\n    let mut high = n;\n    let mut ans = 0;\n\n    while low <= high {\n        let mid = (low + high) / 2;\n        let mut triangular_number = mid * (mid + 1) / 2;\n        let mut digits = 0;\n\n        while triangular_number > 0 {\n            triangular_number /= 10;\n            digits += 1;\n        }\n\n        if digits == n {\n            ans = mid;\n            high = mid - 1;\n        } else if digits > n {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = n;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        let mut x = (mid * (mid + 1)) / 2;\n        let mut digits = 0;\n        while x > 0 {\n            x = x / 10;\n            digits += 1;\n        }\n        if digits == n {\n            ans = mid;\n            high = mid - 1;\n        } else if digits < n {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        low = mid + 1;\n        mid = (low + high) / 2;\n        high = mid * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let curr = mid * (mid + 1) / 2;\n        if curr < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low: isize = 1;\n    let mut high: isize = 1;\n    let mut mid: isize = 1;\n    let mut tri: isize = 1;\n    let mut prev_tri: isize = 0;\n    while tri < n {\n        low = mid + 1;\n        prev_tri = tri;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    if prev_tri == n {\n        return low - 1;\n    }\n    return low;",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let t = (m * (m + 1)) / 2;\n        let d = (t as f64).log10() as isize + 1;\n        if d == n {\n            ans = m;\n            r = m - 1;\n        } else if d < n {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    ans",
    "    let mut low = 0;\n    let mut high = n;\n    let mut ans = 0;\n    while low <= high {\n        let mid = (low + high) / 2;\n        let mut tri = (mid * (mid + 1)) / 2;\n        if tri.to_string().len() as isize == n {\n            ans = mid;\n            high = mid - 1;\n        } else if tri.to_string().len() as isize < n {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        if count_digits(mid * (mid + 1) / 2) >= n {\n            ans = mid;\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    ans",
    "    let mut low = 0;\n    let mut high = n;\n    let mut ans = 0;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        let t = (mid * (mid + 1)) / 2;\n        if t.to_string().len() as isize == n {\n            ans = mid;\n            high = mid - 1;\n        } else if t.to_string().len() as isize < n {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        j += 1;\n        i = j * (j + 1) / 2;\n    }\n    j",
    "    let mut low = 0;\n    let mut high = n;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        let t = (mid * (mid + 1)) / 2;\n        if t < n {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid;\n    let mut tri_num;\n\n    while tri_num(high) < n {\n        low = high;\n        high = high * 2;\n    }\n\n    while low <= high {\n        mid = (low + high) / 2;\n        tri_num = tri_num(mid);\n\n        if tri_num > n {\n            high = mid - 1;\n        } else if tri_num < n {\n            low = mid + 1;\n        } else {\n            return mid;\n        }\n    }\n\n    return high;",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut mid = 0;\n    let mut ans = 0;\n\n    while low <= high {\n        mid = (low + high) / 2;\n\n        if mid * (mid + 1) / 2 < n * (n + 1) / 2 {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        low = high;\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        if mid * (mid + 1) / 2 < n {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        low = high;\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let tn = mid * (mid + 1) / 2;\n        if tn < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 0;\n    let mut high = n;\n    let mut ans = 0;\n    while low <= high {\n        let mid = (low + high) / 2;\n        let tri = mid * (mid + 1) / 2;\n        let digits = (tri as f64).log10() as isize + 1;\n        if digits == n {\n            ans = mid;\n            high = mid - 1;\n        } else if digits < n {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low: isize = 1;\n    let mut high: isize = 1;\n    let mut mid: isize = 1;\n    let mut ans: isize = 1;\n    let mut tri: isize = 1;\n    while tri < n {\n        low = mid + 1;\n        high = low * 2;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    ans = mid;\n    ans",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        let count = count_digits(mid);\n        if count <= n {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    let mut low = 1;\n    let mut high = n * n + 1;\n    let mut ans = 0;\n    while low <= high {\n        let mid = (low + high) / 2;\n        let mut temp = mid * (mid + 1) / 2;\n        if temp.to_string().len() as isize == n {\n            ans = mid;\n            high = mid - 1;\n        } else if temp.to_string().len() as isize < n {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        low = high;\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let curr = mid * (mid + 1) / 2;\n        if curr < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 0;\n    let mut high = n;\n    let mut ans = 0;\n    while low <= high {\n        let mid = (low + high) / 2;\n        let tri = (mid * (mid + 1)) / 2;\n        if tri < 10.pow(n as u32 - 1) {\n            low = mid + 1;\n        } else if tri > 10.pow(n as u32) {\n            high = mid - 1;\n        } else {\n            ans = mid;\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri = 1;\n    let mut prev_tri = 0;\n    while tri < n {\n        low = mid + 1;\n        prev_tri = tri;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    if prev_tri == n {\n        return mid - 1;\n    }\n    mid",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let triangle = m * (m + 1) / 2;\n        if triangle.to_string().len() == n as usize {\n            ans = m;\n            r = m - 1;\n        } else if triangle.to_string().len() < n as usize {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    ans",
    "    let mut i = 1;\n    let mut j = 1;\n    let mut count = 1;\n    while count < n {\n        i = i + 1;\n        j = j + i;\n        count = count + 1;\n    }\n    return i;",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if is_triangular(m) {\n            ans = m;\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    ans",
    "    let mut i = 1;\n    let mut j = 1;\n    let mut count = 1;\n    while count < n {\n        j = j + 1;\n        i = i + j;\n        count = count + 1;\n    }\n    return i;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri_num = 0;\n    let mut index = 1;\n\n    while tri_num < n {\n        mid = (low + high) / 2;\n        tri_num = mid * (mid + 1) / 2;\n\n        if tri_num < n {\n            low = mid + 1;\n            index = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    index",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut ans = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        let x = (mid * (mid + 1)) / 2;\n\n        if x.to_string().len() == n as usize {\n            ans = mid;\n            high = mid - 1;\n        } else if x.to_string().len() < n as usize {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        low = high;\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let curr = mid * (mid + 1) / 2;\n        if curr < n {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri_number = 1;\n    while tri_number.to_string().len() < n as usize {\n        low = mid + 1;\n        high = 2 * low;\n        mid = (low + high) / 2;\n        tri_number = mid * (mid + 1) / 2;\n    }\n    return mid;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri = 1;\n    let mut prev_tri = 0;\n    while tri < n {\n        low = mid + 1;\n        prev_tri = tri;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    if prev_tri == n {\n        return low - 1;\n    }\n    return low;",
    "    let mut low = 0;\n    let mut high = n;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        let mut tri = mid * (mid + 1) / 2;\n        let mut num = tri.to_string().len() as isize;\n        if num == n {\n            ans = mid;\n            high = mid - 1;\n        } else if num < n {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 0;\n    let mut high = n;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        let t = (mid * (mid + 1)) / 2;\n        if t < 10.pow(n as u32 - 1) {\n            low = mid + 1;\n        } else if t > 10.pow(n as u32) {\n            high = mid - 1;\n        } else {\n            ans = mid;\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri = 1;\n\n    while tri < n {\n        low = mid + 1;\n        high = low * 2;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n\n    return mid;",
    "    let mut low: isize = 1;\n    let mut high: isize = 1;\n    let mut mid: isize = 1;\n    let mut tri: isize = 1;\n    while tri < n {\n        low = mid + 1;\n        high = 2 * low;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    return mid;",
    "    let mut low = 0;\n    let mut high = n;\n    let mut ans = 0;\n    while low <= high {\n        let mid = (low + high) / 2;\n        let t = (mid * (mid + 1)) / 2;\n        if t < 10.pow(n as u32 - 1) {\n            low = mid + 1;\n        } else if t > 10.pow(n as u32) {\n            high = mid - 1;\n        } else {\n            ans = mid;\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri_num = 0;\n    while tri_num < n {\n        mid = (low + high) / 2;\n        tri_num = (mid * (mid + 1)) / 2;\n        if tri_num < n {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return mid;",
    "    let mut low: isize = 1;\n    let mut high: isize = 1;\n    let mut mid: isize = 1;\n    let mut tri: isize = 1;\n    let mut prev_tri: isize = 0;\n\n    while tri < n {\n        low = mid + 1;\n        prev_tri = tri;\n        mid = (low + high) / 2;\n        tri = (mid * (mid + 1)) / 2;\n    }\n\n    if prev_tri == n {\n        return mid - 1;\n    }\n\n    return mid;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri = 1;\n    let mut prev_tri = 0;\n\n    while tri < n {\n        low = mid + 1;\n        prev_tri = tri;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n\n    if tri == n {\n        return mid;\n    } else {\n        return prev_tri;\n    }",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut mid: isize;\n    let mut ans: isize;\n    while low <= high {\n        mid = (low + high) / 2;\n        if mid * (mid + 1) / 2 < n * (n + 1) / 2 {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        if mid * (mid + 1) / 2 < n * (n + 1) / 2 {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri = 1;\n    while tri < n {\n        low = mid + 1;\n        high = 2 * low - 1;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    return mid;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid;\n    let mut tri_number;\n    while tri_number(high) < n {\n        low = high;\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        tri_number = tri_number(mid);\n        if tri_number == n {\n            return mid;\n        } else if tri_number < n {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return -1;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid;\n    let mut tri_number;\n    let mut index = 1;\n\n    while high * (high + 1) / 2 < n {\n        low = high;\n        high = high * 2;\n    }\n\n    while low <= high {\n        mid = (low + high) / 2;\n        tri_number = mid * (mid + 1) / 2;\n\n        if tri_number < n {\n            index = mid;\n            low = mid + 1;\n        } else if tri_number > n {\n            high = mid - 1;\n        } else {\n            return mid;\n        }\n    }\n\n    index",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri = 1;\n    while tri < n {\n        low = mid + 1;\n        high = 2 * low - 1;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    mid",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut mid = 0;\n    let mut ans = 0;\n\n    while low <= high {\n        mid = (low + high) / 2;\n\n        if mid * (mid + 1) / 2 < n * (n + 1) / 2 {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid;\n    let mut tri_num;\n    let mut index = 1;\n    while high * (high + 1) / 2 < n {\n        low = high;\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        tri_num = mid * (mid + 1) / 2;\n        if tri_num < n {\n            index = mid;\n            low = mid + 1;\n        } else if tri_num > n {\n            high = mid - 1;\n        } else {\n            return mid;\n        }\n    }\n    return index;",
    "    let mut i = 1;\n    while i * (i + 1) / 2 < 10.pow(n - 1) {\n        i += 1;\n    }\n    i",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if is_triangular(m) {\n            ans = m;\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    ans",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut low: isize = 1;\n    let mut high: isize = 1;\n    let mut mid: isize = 1;\n    let mut ans: isize = 1;\n    let mut triangle_number: isize = 1;\n    while triangle_number < n {\n        low = mid + 1;\n        high = low * 2;\n        mid = (low + high) / 2;\n        triangle_number = mid * (mid + 1) / 2;\n    }\n    ans = mid;\n    ans",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        if count_digits(mid) >= n {\n            ans = mid;\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return ans;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri_num = 1;\n    let mut index = 1;\n    while tri_num < n {\n        low = mid + 1;\n        high = 2 * mid;\n        index = binary_search(low, high, n);\n        mid = index;\n        tri_num = (index * (index + 1)) / 2;\n    }\n    return index;",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = (l + r) / 2;\n        let x = (m * (m + 1)) / 2;\n        if x.to_string().len() as isize >= n {\n            ans = m;\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    ans",
    "    let mut low: isize = 1;\n    let mut high: isize = 1;\n    let mut mid: isize = 1;\n    let mut tri: isize = 1;\n    let mut prev_tri: isize = 0;\n    while tri < n {\n        low = mid + 1;\n        prev_tri = tri;\n        mid = (low + high) / 2;\n        tri = (mid * (mid + 1)) / 2;\n    }\n    if prev_tri == n {\n        return mid - 1;\n    }\n    return mid;",
    "    let mut low = 0;\n    let mut high = n;\n    let mut mid = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        let mut num = (mid * (mid + 1)) / 2;\n        if num * (10 as f64).powi(n as i32 - 1) < 1.0 {\n            low = mid + 1;\n        } else if num * (10 as f64).powi(n as i32 - 1) > 1.0 {\n            high = mid - 1;\n        } else {\n            return mid;\n        }\n    }\n    return mid;",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let x = (m * (m + 1)) / 2;\n        if x > 10_isize.pow(n as u32 - 1) && x < 10_isize.pow(n as u32) {\n            ans = m;\n            r = m - 1;\n        } else if x < 10_isize.pow(n as u32 - 1) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    ans",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        if mid * (mid + 1) / 2 < n * (n + 1) / 2 {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    let mut low = 0;\n    let mut high = n;\n    let mut ans = 0;\n    while low <= high {\n        let mid = (low + high) / 2;\n        let mut val = (mid * (mid + 1)) / 2;\n        if val.to_string().len() as isize == n {\n            ans = mid;\n            high = mid - 1;\n        } else if val.to_string().len() as isize < n {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        low = high;\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let mut curr = mid * (mid + 1) / 2;\n        if curr < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut l = 1;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let x = (m * (m + 1)) / 2;\n        if x > 10.pow(n as u32) {\n            r = m - 1;\n        } else {\n            ans = m;\n            l = m + 1;\n        }\n    }\n    ans",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut ans = 0;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        let mut temp = mid * (mid + 1) / 2;\n        if temp % 10 == 0 {\n            ans = mid;\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return ans;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        low = high;\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let mut curr = mid * (mid + 1) / 2;\n        if curr < n {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let t = (m * (m + 1)) / 2;\n        if t < 10.pow(n as u32 - 1) {\n            l = m + 1;\n        } else if t > 10.pow(n as u32) {\n            r = m - 1;\n        } else {\n            ans = m;\n            r = m - 1;\n        }\n    }\n    ans",
    "    let mut l = 0;\n    let mut r = n * n;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let t = (m * (m + 1)) / 2;\n        if t < 10.pow(n as u32 - 1) {\n            l = m + 1;\n        } else if t > 10.pow(n as u32) {\n            r = m - 1;\n        } else {\n            ans = m;\n            r = m - 1;\n        }\n    }\n    return ans;",
    "    let mut i = 1;\n    let mut t = 1;\n    while t.to_string().len() < n as usize {\n        i += 1;\n        t = i * (i + 1) / 2;\n    }\n    i",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid;\n    let mut tri_num;\n    while tri_num < n {\n        mid = (low + high) / 2;\n        tri_num = (mid * (mid + 1)) / 2;\n        if tri_num < n {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    let mut low = 0;\n    let mut high = n;\n    let mut ans = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        let mut t = (mid * (mid + 1)) / 2;\n        if t < 10 {\n            low = mid + 1;\n        } else {\n            let mut digits = 0;\n            while t > 0 {\n                t /= 10;\n                digits += 1;\n            }\n            if digits == n {\n                ans = mid;\n                high = mid - 1;\n            } else if digits < n {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    ans",
    "    let mut low: isize = 1;\n    let mut high: isize = 1;\n    let mut mid: isize = 1;\n    let mut ans: isize = 1;\n    let mut triangle_number: isize = 0;\n    let mut number_of_digits: isize = 0;\n    while number_of_digits < n {\n        mid = (low + high) / 2;\n        triangle_number = (mid * (mid + 1)) / 2;\n        number_of_digits = (triangle_number as f64).log10().floor() as isize + 1;\n        if number_of_digits < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        if (mid * (mid + 1)) / 2 < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        low = mid + 1;\n        mid = (low + high) / 2;\n        high = mid * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let curr = mid * (mid + 1) / 2;\n        if curr < n {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = n;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        let mut tri = (mid * (mid + 1)) / 2;\n        if tri < 10.pow(n as u32 - 1) {\n            low = mid + 1;\n        } else if tri > 10.pow(n as u32) {\n            high = mid - 1;\n        } else {\n            ans = mid;\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri_num = 1;\n    while tri_num < n {\n        low = mid + 1;\n        high = 2 * low - 1;\n        mid = (low + high) / 2;\n        tri_num = mid * (mid + 1) / 2;\n    }\n    return mid;",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let t = (m * (m + 1)) / 2;\n        if t < 10.pow(n as u32) {\n            ans = m;\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return ans;",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let t = (m * (m + 1)) / 2;\n        if t < 10.pow(n as u32 - 1) {\n            l = m + 1;\n        } else if t > 10.pow(n as u32) {\n            r = m - 1;\n        } else {\n            ans = m;\n            r = m - 1;\n        }\n    }\n    ans",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut mid = 0;\n    let mut ans = 0;\n\n    while low <= high {\n        mid = (low + high) / 2;\n        let mut x = (mid * (mid + 1)) / 2;\n        let mut digits = 0;\n        while x > 0 {\n            digits += 1;\n            x /= 10;\n        }\n        if digits == n {\n            ans = mid;\n            high = mid - 1;\n        } else if digits < n {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    let mut l = 0;\n    let mut r = n * n;\n    let mut ans = -1;\n    while l <= r {\n        let mid = l + (r - l) / 2;\n        let x = (mid * (mid + 1)) / 2;\n        if x.to_string().len() as isize >= n {\n            ans = mid;\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid;\n    let mut ans = 0;\n    while high * (high + 1) / 2 < n {\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let temp = mid * (mid + 1) / 2;\n        if temp < n {\n            low = mid + 1;\n            ans = mid;\n        } else if temp > n {\n            high = mid - 1;\n        } else {\n            return mid;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        low = high;\n        high = high * 2;\n    }\n\n    while low <= high {\n        mid = (low + high) / 2;\n        let mut tri = mid * (mid + 1) / 2;\n        if tri < n {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut i = 1;\n    let mut j = 1;\n    let mut count = 1;\n    while count < n {\n        i = i + 1;\n        j = j + i;\n        count = j.to_string().len() as isize;\n    }\n    i",
    "    let mut l = 0;\n    let mut r = n * n;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let t = (m * (m + 1)) / 2;\n        if t < 10.pow(n as u32 - 1) {\n            l = m + 1;\n        } else if t > 10.pow(n as u32) {\n            r = m - 1;\n        } else {\n            ans = m;\n            r = m - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri = 1;\n    while tri < n {\n        low = mid + 1;\n        high = 2 * low;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    return mid;",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j = i * (i + 1) / 2;\n    }\n    i",
    "    let mut i: isize = 1;\n    let mut j: isize = 1;\n    let mut count: isize = 0;\n    while count < n {\n        j = j + 1;\n        i = i + j;\n        count = i.to_string().len() as isize;\n    }\n    return j;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri = 1;\n    while tri < n {\n        low = mid + 1;\n        high = 2 * low - 1;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    mid",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        low = high;\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let curr = mid * (mid + 1) / 2;\n        if curr < n {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let t = (m * (m + 1)) / 2;\n        if t < 10.pow(n as u32 - 1) {\n            l = m + 1;\n        } else if t > 10.pow(n as u32) {\n            r = m - 1;\n        } else {\n            ans = m;\n            r = m - 1;\n        }\n    }\n    ans",
    "    let mut low = 0;\n    let mut high = n;\n    let mut ans = -1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        let mut tn = (mid * (mid + 1)) / 2;\n        if tn > 0 && tn <= n {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri_num = 1;\n    while tri_num.to_string().len() < n as usize {\n        low = mid + 1;\n        high = 2 * low;\n        mid = (low + high) / 2;\n        tri_num = mid * (mid + 1) / 2;\n    }\n    return mid;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        low = high;\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let curr = mid * (mid + 1) / 2;\n        if curr < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        low = high;\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let mut curr = mid * (mid + 1) / 2;\n        if curr < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let t = (m * (m + 1)) / 2;\n        if t < 10.pow(n as u32 - 1) {\n            l = m + 1;\n        } else if t > 10.pow(n as u32) {\n            r = m - 1;\n        } else {\n            ans = m;\n            r = m - 1;\n        }\n    }\n    ans",
    "    let mut l = 1;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let mut count = 0;\n        let mut i = 1;\n        while i * (i + 1) / 2 < m {\n            count += 1;\n            i += 1;\n        }\n        if count == n {\n            ans = m;\n            r = m - 1;\n        } else if count < n {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri = 1;\n    while tri < n {\n        low = mid + 1;\n        high = 2 * low - 1;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    mid",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        low = high;\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let t = mid * (mid + 1) / 2;\n        if t < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid;\n    let mut tri_num;\n    while tri_num < n {\n        mid = (low + high) / 2;\n        tri_num = (mid * (mid + 1)) / 2;\n\n        if tri_num < n {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri = 1;\n    while tri < n {\n        low = mid + 1;\n        high = 2 * low;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    return mid;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri = 1;\n    while tri < n {\n        low = mid + 1;\n        high = 2 * low;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    return mid;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri = 1;\n    while tri < n {\n        low = mid + 1;\n        high = 2 * low;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    return mid;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri_num = 1;\n    let mut prev_tri_num = 0;\n    while tri_num < n {\n        low = mid + 1;\n        prev_tri_num = tri_num;\n        mid = (low + high) / 2;\n        tri_num = mid * (mid + 1) / 2;\n    }\n    if tri_num == n {\n        return mid;\n    } else {\n        return prev_tri_num;\n    }",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let mid = (l + r) / 2;\n        let x = (mid * (mid + 1)) / 2;\n        if x.to_string().len() as isize >= n {\n            ans = mid;\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return ans;",
    "    let mut i = 1;\n    let mut j = 1;\n    while j < n {\n        i += 1;\n        j = i * (i + 1) / 2;\n    }\n    i",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = (l + r) / 2;\n        let x = m * (m + 1) / 2;\n        if x.to_string().len() as isize == n {\n            ans = m;\n            r = m - 1;\n        } else if x.to_string().len() as isize < n {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    ans",
    "    let mut low: isize = 1;\n    let mut high: isize = 1;\n    let mut mid: isize = 1;\n    let mut ans: isize = 1;\n    let mut triangular_number: isize = 0;\n\n    while triangular_number < n {\n        mid = (low + high) / 2;\n        triangular_number = (mid * (mid + 1)) / 2;\n\n        if triangular_number < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        low = mid + 1;\n        mid = (low + high) / 2;\n        high = mid * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let curr = mid * (mid + 1) / 2;\n        if curr < n {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let t = (m * (m + 1)) / 2;\n        if t.to_string().len() == n as usize {\n            ans = m;\n            r = m - 1;\n        } else if t.to_string().len() < n as usize {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    ans",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        j += 1;\n        i += j;\n    }\n    return j;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        low = high;\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let curr = mid * (mid + 1) / 2;\n        if curr < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let mut temp = m * (m + 1) / 2;\n        if temp < 0 {\n            r = m - 1;\n        } else {\n            let mut digits = 0;\n            while temp > 0 {\n                digits += 1;\n                temp /= 10;\n            }\n            if digits == n {\n                ans = m;\n                r = m - 1;\n            } else if digits < n {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n    }\n    ans",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        if mid * (mid + 1) / 2 < n * (n + 1) / 2 {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    let mut low = 0;\n    let mut high = n;\n    let mut mid;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        let mut tn = (mid * (mid + 1)) / 2;\n        if tn % 10 == 0 {\n            ans = mid;\n            high = mid - 1;\n        } else if tn % 10 <= n {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = n;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        let mut tri = (mid * (mid + 1)) / 2;\n        if tri < 10.pow(n as u32 - 1) {\n            low = mid + 1;\n        } else if tri > 10.pow(n as u32) {\n            high = mid - 1;\n        } else {\n            ans = mid;\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut ans = 1;\n\n    while high * (high + 1) / 2 < n {\n        low = high;\n        high = high * 2;\n    }\n\n    while low <= high {\n        mid = (low + high) / 2;\n        let mut tri_num = mid * (mid + 1) / 2;\n\n        if tri_num < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    ans",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri_num = 1;\n\n    while tri_num.to_string().len() < n as usize {\n        low = mid + 1;\n        high = 2 * low;\n        mid = (low + high) / 2;\n        tri_num = mid * (mid + 1) / 2;\n    }\n\n    mid",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut tri_number = 1;\n    let mut index = 1;\n    while tri_number < n {\n        low = mid + 1;\n        high = 2 * mid;\n        mid = (low + high) / 2;\n        tri_number = mid * (mid + 1) / 2;\n        index = mid;\n    }\n    index",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let mut x = (m * (m + 1)) / 2;\n        if x % 10 == 0 {\n            x = x / 10;\n        }\n        let mut count = 0;\n        while x > 0 {\n            count += 1;\n            x = x / 10;\n        }\n        if count == n {\n            ans = m;\n            r = m - 1;\n        } else if count > n {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    ans"
  ]
}