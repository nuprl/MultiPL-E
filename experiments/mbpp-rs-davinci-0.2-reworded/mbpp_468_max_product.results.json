{
  "name": "mbpp_468_max_product",
  "language": "rs",
  "prompt": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_prod = 1;\n    let mut curr_prod = 1;\n    let mut prev = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > prev {\n            curr_prod *= arr[i];\n            if curr_prod > max_prod {\n                max_prod = curr_prod;\n            }\n        } else {\n            curr_prod = 1;\n        }\n        prev = arr[i];\n    }\n    max_prod\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `750`,\n right: `3000`', /tmp/tmpf9_c87mu.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > current_max {\n            current_max = arr[i];\n            current_product *= arr[i];\n        } else {\n            current_product = 1;\n        }\n        max_product = max(max_product, current_product);\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp9f2i115f.rs:13:23\n   |\n13 |         max_product = max(max_product, current_product);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    for i in 0..arr.len() {\n        current_product *= arr[i];\n        if current_product > max_product {\n            max_product = current_product;\n        }\n        if current_product == 0 {\n            current_product = 1;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpmsgzh9xf.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut product = 1;\n    let mut last_max = 0;\n    for i in 0..arr.len() {\n        if arr[i] > last_max {\n            product *= arr[i];\n            last_max = arr[i];\n        } else {\n            max_product = max(max_product, product);\n            product = 1;\n            last_max = 0;\n        }\n    }\n    max(max_product, product)\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpjr5s_i3q.rs:11:27\n   |\n11 |             max_product = max(max_product, product);\n   |                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpjr5s_i3q.rs:16:5\n   |\n16 |     max(max_product, product)\n   |     ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut product = 1;\n    let mut last = arr[0];\n    for i in arr {\n        if i > last {\n            product *= i;\n        } else {\n            max_product = max(max_product, product);\n            product = i;\n        }\n        last = i;\n    }\n    max(max_product, product)\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpmroqze8q.rs:10:27\n   |\n10 |             max_product = max(max_product, product);\n   |                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpmroqze8q.rs:15:5\n   |\n15 |     max(max_product, product)\n   |     ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_so_far = 0;\n    let mut min_so_far = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_so_far = 0;\n            min_so_far = 0;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp219xexqy.rs:9:26\n   |\n9  |             min_so_far = min(min_so_far * arr[i], 1);\n   |                          ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_so_far = main(min_so_far * arr[i], 1);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp219xexqy.rs:15:26\n   |\n15 |             max_so_far = max(min_so_far * arr[i], 1);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max = isize::min_value();\n    let mut product = 1;\n    let mut i = 0;\n    let mut j = 0;\n    while j < arr.len() {\n        product *= arr[j];\n        if product > max {\n            max = product;\n        }\n        if product < 0 {\n            product = 1;\n            i = j + 1;\n        }\n        j += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmp_i7wrq56.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_product_so_far = 1;\n    let mut min_product_so_far = 1;\n    for i in arr {\n        if i > 0 {\n            max_product_so_far = max_product_so_far * i;\n            min_product_so_far = min(min_product_so_far * i, 1);\n        } else if i == 0 {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * i, 1);\n            min_product_so_far = temp * i;\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp_6nnjco4.rs:9:34\n   |\n9  |             min_product_so_far = min(min_product_so_far * i, 1);\n   |                                  ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_product_so_far = main(min_product_so_far * i, 1);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp_6nnjco4.rs:15:34\n   |\n15 |             max_product_so_far = max(min_product_so_far * i, 1);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 0;\n    let mut min_product_so_far = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i];\n            min_product_so_far = min(1, min_product_so_far * arr[i]);\n        } else if arr[i] == 0 {\n            max_product_so_far = 0;\n            min_product_so_far = 0;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(1, min_product_so_far * arr[i]);\n            min_product_so_far = temp * arr[i];\n        }\n\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpkffe7mut.rs:10:34\n   |\n10 |             min_product_so_far = min(1, min_product_so_far * arr[i]);\n   |                                  ^^^\n...\n28 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |             min_product_so_far = main(1, min_product_so_far * arr[i]);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpkffe7mut.rs:16:34\n   |\n16 |             max_product_so_far = max(1, min_product_so_far * arr[i]);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_so_far = 1;\n    let mut min_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n\n        if max_product < max_so_far {\n            max_product = max_so_far;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp8nksijpb.rs:10:26\n   |\n10 |             min_so_far = min(min_so_far * arr[i], 1);\n   |                          ^^^\n...\n28 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |             min_so_far = main(min_so_far * arr[i], 1);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp8nksijpb.rs:16:26\n   |\n16 |             max_so_far = max(min_so_far * arr[i], 1);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_so_far = 1;\n    let mut min_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n\n        if max_product < max_so_far {\n            max_product = max_so_far;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp8nksijpb.rs:10:26\n   |\n10 |             min_so_far = min(min_so_far * arr[i], 1);\n   |                          ^^^\n...\n28 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |             min_so_far = main(min_so_far * arr[i], 1);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp8nksijpb.rs:16:26\n   |\n16 |             max_so_far = max(min_so_far * arr[i], 1);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut min_product = 0;\n    let mut max_so_far = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i];\n            min_product = min(min_product * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product = 0;\n            min_product = 0;\n        } else {\n            let temp = max_product;\n            max_product = max(min_product * arr[i], 1);\n            min_product = temp * arr[i];\n        }\n        if max_product > max_so_far {\n            max_so_far = max_product;\n        }\n    }\n    max_so_far\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpymgeqlff.rs:9:27\n   |\n9  |             min_product = min(min_product * arr[i], 1);\n   |                           ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_product = main(min_product * arr[i], 1);\n   |                           ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpymgeqlff.rs:15:27\n   |\n15 |             max_product = max(min_product * arr[i], 1);\n   |                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut curr_product = 1;\n    let mut prev = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > prev {\n            curr_product *= arr[i];\n            max_product = max(max_product, curr_product);\n        } else {\n            curr_product = 1;\n        }\n        prev = arr[i];\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpp2k1rvq4.rs:9:27\n  |\n9 |             max_product = max(max_product, curr_product);\n  |                           ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut product = 1;\n    let mut prev = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > prev {\n            product *= arr[i];\n            if product > max_product {\n                max_product = product;\n            }\n        } else {\n            product = 1;\n        }\n        prev = arr[i];\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `750`,\n right: `3000`', /tmp/tmpiriyadqv.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_so_far = 1;\n    let mut min_so_far = 1;\n    for i in arr {\n        if i > 0 {\n            max_so_far = max_so_far * i;\n            min_so_far = min(min_so_far * i, 1);\n        } else if i == 0 {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * i, 1);\n            min_so_far = temp * i;\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpomgwhtad.rs:9:26\n   |\n9  |             min_so_far = min(min_so_far * i, 1);\n   |                          ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_so_far = main(min_so_far * i, 1);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpomgwhtad.rs:15:26\n   |\n15 |             max_so_far = max(min_so_far * i, 1);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut last_number = 0;\n    for &number in arr.iter() {\n        if number > last_number {\n            current_product *= number;\n        } else {\n            max_product = max(max_product, current_product);\n            current_product = 1;\n        }\n        last_number = number;\n    }\n    max_product = max(max_product, current_product);\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpgfno7ivh.rs:10:27\n   |\n10 |             max_product = max(max_product, current_product);\n   |                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpgfno7ivh.rs:15:19\n   |\n15 |     max_product = max(max_product, current_product);\n   |                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_min = 1;\n    let mut current_max = 1;\n\n    for i in arr {\n        if i > 0 {\n            current_max = current_max * i;\n            current_min = current_min.min(current_min * i);\n        } else if i == 0 {\n            current_max = 1;\n            current_min = 1;\n        } else {\n            let temp = current_max;\n            current_max = current_min.max(current_min * i);\n            current_min = temp * i;\n        }\n        if current_max > max_product {\n            max_product = current_max;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmp2q5gqnm6.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 1;\n    let mut min_product_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_so_far *= arr[i];\n            min_product_so_far = min(min_product_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * arr[i], 1);\n            min_product_so_far = temp * arr[i];\n        }\n\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp3zhfm_is.rs:10:34\n   |\n10 |             min_product_so_far = min(min_product_so_far * arr[i], 1);\n   |                                  ^^^\n...\n28 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |             min_product_so_far = main(min_product_so_far * arr[i], 1);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp3zhfm_is.rs:16:34\n   |\n16 |             max_product_so_far = max(min_product_so_far * arr[i], 1);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n    let mut product = 1;\n    let mut start = 0;\n    let mut end = 0;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > arr[i + 1] {\n            product *= arr[i];\n            if product > max {\n                max = product;\n                end = i;\n            }\n            product = 1;\n            start = i + 1;\n        } else {\n            product *= arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 6 but the index is 6', /tmp/tmp452cd7xo.rs:9:21\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > current_max {\n            current_max = arr[i];\n            current_product = current_product * arr[i];\n            if current_product > max_product {\n                max_product = current_product;\n            }\n        } else {\n            current_product = 1;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `150`,\n right: `3000`', /tmp/tmpchq_hri6.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut last_max = 1;\n    let mut last_min = 1;\n\n    for i in arr {\n        let (a, b) = (last_max * i, last_min * i);\n        last_max = a.max(b).max(i);\n        last_min = a.min(b).min(i);\n        max_product = max_product.max(last_max);\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpqnjaxkpa.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut product = 1;\n    let mut last = 0;\n    for i in 0..arr.len() {\n        if arr[i] > last {\n            product *= arr[i];\n            if product > max_product {\n                max_product = product;\n            }\n        } else {\n            product = 1;\n        }\n        last = arr[i];\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `750`,\n right: `3000`', /tmp/tmpjyw4zem7.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_so_far = 0;\n    let mut min_so_far = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_so_far = 0;\n            min_so_far = 0;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n\n        if max_so_far > max_product {\n            max_product = max_so_far;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpj0pszxag.rs:10:26\n   |\n10 |             min_so_far = min(min_so_far * arr[i], 1);\n   |                          ^^^\n...\n28 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |             min_so_far = main(min_so_far * arr[i], 1);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpj0pszxag.rs:16:26\n   |\n16 |             max_so_far = max(min_so_far * arr[i], 1);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    for i in arr {\n        current_product *= i;\n        if current_product > max_product {\n            max_product = current_product;\n        }\n        if current_product < 0 {\n            current_product = 1;\n        }\n        if i > current_max {\n            current_max = i;\n        }\n    }\n    if max_product == 1 {\n        current_max\n    } else {\n        max_product\n    }\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpe5le5pqd.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 1;\n    let mut min_product_so_far = 1;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_so_far *= arr[i];\n            min_product_so_far = min(min_product_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * arr[i], 1);\n            min_product_so_far = temp * arr[i];\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp27w3a76q.rs:9:34\n   |\n9  |             min_product_so_far = min(min_product_so_far * arr[i], 1);\n   |                                  ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_product_so_far = main(min_product_so_far * arr[i], 1);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp27w3a76q.rs:15:34\n   |\n15 |             max_product_so_far = max(min_product_so_far * arr[i], 1);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_product_so_far = 1;\n    let mut min_product_so_far = 1;\n    for i in arr {\n        if i > 0 {\n            max_product_so_far *= i;\n            min_product_so_far = min(min_product_so_far * i, 1);\n        } else if i == 0 {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * i, 1);\n            min_product_so_far = temp * i;\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpnplgoaqh.rs:9:34\n   |\n9  |             min_product_so_far = min(min_product_so_far * i, 1);\n   |                                  ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_product_so_far = main(min_product_so_far * i, 1);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpnplgoaqh.rs:15:34\n   |\n15 |             max_product_so_far = max(min_product_so_far * i, 1);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut last_number = 0;\n    for number in arr {\n        if number > last_number {\n            current_product *= number;\n        } else {\n            max_product = max(max_product, current_product);\n            current_product = number;\n        }\n        last_number = number;\n    }\n    max(max_product, current_product)\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmplpzm2sef.rs:10:27\n   |\n10 |             max_product = max(max_product, current_product);\n   |                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmplpzm2sef.rs:15:5\n   |\n15 |     max(max_product, current_product)\n   |     ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > current_max {\n            current_max = arr[i];\n            current_product *= arr[i];\n            max_product = current_product;\n        } else {\n            current_product *= arr[i];\n            if current_product > max_product {\n                max_product = current_product;\n            }\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1800000`,\n right: `3000`', /tmp/tmpcprlmarh.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 1;\n    let mut min_product_so_far = 1;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_so_far *= arr[i];\n            min_product_so_far = min(min_product_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * arr[i], 1);\n            min_product_so_far = temp * arr[i];\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp27w3a76q.rs:9:34\n   |\n9  |             min_product_so_far = min(min_product_so_far * arr[i], 1);\n   |                                  ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_product_so_far = main(min_product_so_far * arr[i], 1);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp27w3a76q.rs:15:34\n   |\n15 |             max_product_so_far = max(min_product_so_far * arr[i], 1);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 1;\n    let mut min_product_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_so_far *= arr[i];\n            min_product_so_far = min(min_product_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * arr[i], 1);\n            min_product_so_far = temp * arr[i];\n        }\n\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp3zhfm_is.rs:10:34\n   |\n10 |             min_product_so_far = min(min_product_so_far * arr[i], 1);\n   |                                  ^^^\n...\n28 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |             min_product_so_far = main(min_product_so_far * arr[i], 1);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp3zhfm_is.rs:16:34\n   |\n16 |             max_product_so_far = max(min_product_so_far * arr[i], 1);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut last_number = arr[0];\n    for number in arr {\n        if number > last_number {\n            current_product *= number;\n        } else {\n            max_product = std::cmp::max(max_product, current_product);\n            current_product = number;\n        }\n        last_number = number;\n    }\n    max_product = std::cmp::max(max_product, current_product);\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut last_number = arr[0];\n    for number in arr {\n        if number > last_number {\n            current_product *= number;\n        } else {\n            max_product = max(max_product, current_product);\n            current_product = number;\n        }\n        last_number = number;\n    }\n    max(max_product, current_product)\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpkh1hy78h.rs:10:27\n   |\n10 |             max_product = max(max_product, current_product);\n   |                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpkh1hy78h.rs:15:5\n   |\n15 |     max(max_product, current_product)\n   |     ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut curr_product = 1;\n\n    for i in 0..arr.len() {\n        curr_product *= arr[i];\n        max_product = max(max_product, curr_product);\n        if curr_product == 0 {\n            curr_product = 1;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpe51pkb0i.rs:8:23\n  |\n8 |         max_product = max(max_product, curr_product);\n  |                       ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 1;\n    let mut min_product_so_far = 1;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_so_far *= arr[i];\n            min_product_so_far = min(min_product_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * arr[i], 1);\n            min_product_so_far = temp * arr[i];\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp27w3a76q.rs:9:34\n   |\n9  |             min_product_so_far = min(min_product_so_far * arr[i], 1);\n   |                                  ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_product_so_far = main(min_product_so_far * arr[i], 1);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp27w3a76q.rs:15:34\n   |\n15 |             max_product_so_far = max(min_product_so_far * arr[i], 1);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > current_max {\n            current_max = arr[i];\n            current_product = current_product * arr[i];\n        } else {\n            current_product = current_product * arr[i];\n            max_product = max(max_product, current_product);\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpeem7qovy.rs:12:27\n   |\n12 |             max_product = max(max_product, current_product);\n   |                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut last_element = arr[0];\n    for i in arr.iter() {\n        if i > &last_element {\n            current_product *= i;\n            max_product = std::cmp::max(current_product, max_product);\n        } else {\n            current_product = 1;\n        }\n        last_element = *i;\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `750`,\n right: `3000`', /tmp/tmppebpmst8.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_product_so_far = 1;\n    let mut min_product_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i];\n            min_product_so_far = min(min_product_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * arr[i], 1);\n            min_product_so_far = temp * arr[i];\n        }\n\n        if max_product < max_product_so_far {\n            max_product = max_product_so_far;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpuzrd_ghq.rs:10:34\n   |\n10 |             min_product_so_far = min(min_product_so_far * arr[i], 1);\n   |                                  ^^^\n...\n28 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |             min_product_so_far = main(min_product_so_far * arr[i], 1);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpuzrd_ghq.rs:16:34\n   |\n16 |             max_product_so_far = max(min_product_so_far * arr[i], 1);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut curr_product = 1;\n    let mut prev = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > prev {\n            curr_product *= arr[i];\n            max_product = max(max_product, curr_product);\n        } else {\n            curr_product = 1;\n        }\n        prev = arr[i];\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpp2k1rvq4.rs:9:27\n  |\n9 |             max_product = max(max_product, curr_product);\n  |                           ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut last_number = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > last_number {\n            current_product *= arr[i];\n            max_product = std::cmp::max(max_product, current_product);\n        } else {\n            current_product = 1;\n        }\n        last_number = arr[i];\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `750`,\n right: `3000`', /tmp/tmpihfyg9mu.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut product = 1;\n    let mut max_product_so_far = 0;\n    let mut product_so_far = 1;\n    for i in 0..arr.len() {\n        product_so_far *= arr[i];\n        product *= arr[arr.len() - i - 1];\n        if product_so_far > max_product_so_far {\n            max_product_so_far = product_so_far;\n        }\n        if product > max_product {\n            max_product = product;\n        }\n        if product_so_far == 0 {\n            product_so_far = 1;\n        }\n        if product == 0 {\n            product = 1;\n        }\n    }\n    max_product_so_far * max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `29160000000000`,\n right: `3000`', /tmp/tmpd4qujd2m.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    let mut current_min = arr[0];\n\n    for i in 1..arr.len() {\n        if arr[i] < 0 {\n            let temp = current_max;\n            current_max = current_min;\n            current_min = temp;\n        }\n\n        current_max = max(arr[i], current_max * arr[i]);\n        current_min = min(arr[i], current_min * arr[i]);\n\n        max_product = max(max_product, current_max);\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa12xvc5p.rs:15:23\n   |\n15 |         current_max = max(arr[i], current_max * arr[i]);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpa12xvc5p.rs:16:23\n   |\n16 |         current_min = min(arr[i], current_min * arr[i]);\n   |                       ^^^\n...\n24 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n16 |         current_min = main(arr[i], current_min * arr[i]);\n   |                       ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa12xvc5p.rs:18:23\n   |\n18 |         max_product = max(max_product, current_max);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    for i in 0..arr.len() {\n        current_product *= arr[i];\n        if current_product > max_product {\n            max_product = current_product;\n        }\n        if current_product == 0 {\n            current_product = 1;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpmsgzh9xf.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = arr[0];\n    let mut current_product = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > arr[i - 1] {\n            current_product *= arr[i];\n        } else {\n            max_product = std::cmp::max(max_product, current_product);\n            current_product = arr[i];\n        }\n    }\n    std::cmp::max(max_product, current_product)\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_product_so_far = 1;\n    let mut min_product_so_far = 1;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_so_far *= arr[i];\n            min_product_so_far = min(min_product_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * arr[i], 1);\n            min_product_so_far = temp * arr[i];\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp9x15p44g.rs:9:34\n   |\n9  |             min_product_so_far = min(min_product_so_far * arr[i], 1);\n   |                                  ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_product_so_far = main(min_product_so_far * arr[i], 1);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp9x15p44g.rs:15:34\n   |\n15 |             max_product_so_far = max(min_product_so_far * arr[i], 1);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    for i in arr {\n        if i > current_max {\n            current_max = i;\n            current_product = 1;\n        }\n        current_product *= i;\n        if current_product > max_product {\n            max_product = current_product;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2000`,\n right: `3000`', /tmp/tmp_ipc1az4.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_prod = 0;\n    let mut prod = 1;\n    for i in 0..arr.len() {\n        prod *= arr[i];\n        if prod > max_prod {\n            max_prod = prod;\n        }\n    }\n    max_prod\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmp00y60g65.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut product = 1;\n    let mut start = 0;\n    let mut end = 0;\n    let mut start_index = 0;\n    let mut end_index = 0;\n    while end < arr.len() {\n        product *= arr[end];\n        if arr[end] == 0 {\n            product = 1;\n            start = end + 1;\n        }\n        if product > max_product {\n            max_product = product;\n            start_index = start;\n            end_index = end;\n        }\n        end += 1;\n    }\n    println!(\"{:?}\", &arr[start_index..=end_index]);\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "[3, 100, 4, 5, 150, 6]\n",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpcldqyt4t.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n    let mut max_product = 0;\n    let mut min_product = 0;\n    for i in arr {\n        if i > 0 {\n            max_product = max_product.max(1) * i;\n            min_product *= i;\n        } else if i == 0 {\n            max_product = 0;\n            min_product = 0;\n        } else {\n            let temp = max_product;\n            max_product = min_product * i;\n            min_product = temp.min(1) * i;\n        }\n        max = max.max(max_product);\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpm3y1t5d6.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > current_max {\n            current_max = arr[i];\n            current_product = current_product * arr[i];\n            max_product = current_product;\n        } else {\n            current_product = current_product * arr[i];\n            if current_product > max_product {\n                max_product = current_product;\n            }\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1800000`,\n right: `3000`', /tmp/tmpn3uju6rn.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut last_num = arr[0];\n    for num in arr {\n        if num > last_num {\n            current_product *= num;\n        } else {\n            max_product = max(max_product, current_product);\n            current_product = num;\n        }\n        last_num = num;\n    }\n    max(max_product, current_product)\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpq34uamh_.rs:10:27\n   |\n10 |             max_product = max(max_product, current_product);\n   |                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpq34uamh_.rs:15:5\n   |\n15 |     max(max_product, current_product)\n   |     ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_product_so_far = 1;\n    let mut min_product_so_far = 1;\n    for i in arr {\n        if i > 0 {\n            max_product_so_far = max_product_so_far * i;\n            min_product_so_far = min(min_product_so_far * i, 1);\n        } else if i == 0 {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * i, 1);\n            min_product_so_far = temp * i;\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp_6nnjco4.rs:9:34\n   |\n9  |             min_product_so_far = min(min_product_so_far * i, 1);\n   |                                  ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_product_so_far = main(min_product_so_far * i, 1);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp_6nnjco4.rs:15:34\n   |\n15 |             max_product_so_far = max(min_product_so_far * i, 1);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_prod = 1;\n    let mut curr_prod = 1;\n    let mut prev = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > prev {\n            curr_prod *= arr[i];\n            max_prod = max(max_prod, curr_prod);\n        } else {\n            curr_prod = 1;\n        }\n        prev = arr[i];\n    }\n    max_prod\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpp_tjlt66.rs:9:24\n  |\n9 |             max_prod = max(max_prod, curr_prod);\n  |                        ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut current_product = 1;\n\n    for i in 0..arr.len() {\n        current_product *= arr[i];\n        if current_product > max_product {\n            max_product = current_product;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpl5no9urt.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut curr_product = 1;\n    let mut prev = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > prev {\n            curr_product *= arr[i];\n            if curr_product > max_product {\n                max_product = curr_product;\n            }\n        } else {\n            curr_product = 1;\n        }\n        prev = arr[i];\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `750`,\n right: `3000`', /tmp/tmp163pdp46.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_so_far = 1;\n    let mut min_so_far = 1;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n        if max_product < max_so_far {\n            max_product = max_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpt_1yfaw2.rs:9:26\n   |\n9  |             min_so_far = min(min_so_far * arr[i], 1);\n   |                          ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_so_far = main(min_so_far * arr[i], 1);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpt_1yfaw2.rs:15:26\n   |\n15 |             max_so_far = max(min_so_far * arr[i], 1);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut dp = vec![0; arr.len()];\n    let mut max = 0;\n    for i in 0..arr.len() {\n        dp[i] = arr[i];\n        for j in 0..i {\n            if arr[j] < arr[i] {\n                dp[i] = std::cmp::max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = std::cmp::max(max, dp[i]);\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `45000`,\n right: `3000`', /tmp/tmplt5a4ktx.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 0;\n    let mut max_product_ending_here = 1;\n    let mut min_product_ending_here = 1;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_ending_here * arr[i];\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1;\n            min_product_ending_here = 1;\n        } else {\n            let temp = max_product_ending_here;\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1);\n            min_product_ending_here = temp * arr[i];\n        }\n        if max_product_so_far < max_product_ending_here {\n            max_product_so_far = max_product_ending_here;\n        }\n    }\n    max_product_so_far\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpinz1kqc5.rs:10:39\n   |\n10 |             min_product_ending_here = min(min_product_ending_here * arr[i], 1);\n   |                                       ^^^\n...\n26 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |             min_product_ending_here = main(min_product_ending_here * arr[i], 1);\n   |                                       ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpinz1kqc5.rs:16:39\n   |\n16 |             max_product_ending_here = max(min_product_ending_here * arr[i], 1);\n   |                                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n    let mut cur = 0;\n    for i in arr {\n        if cur == 0 {\n            cur = i;\n        } else {\n            cur *= i;\n        }\n        max = max.max(cur);\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpuo3qh1kq.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 1;\n    let mut min_product_so_far = 1;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_so_far *= arr[i];\n            min_product_so_far = std::cmp::min(min_product_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = std::cmp::max(min_product_so_far * arr[i], 1);\n            min_product_so_far = temp * arr[i];\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpsid420sj.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut last_max = 1;\n    let mut last_min = 1;\n\n    for i in arr {\n        if i > 0 {\n            last_max = last_max * i;\n            last_min = std::cmp::min(last_min * i, 1);\n        } else if i == 0 {\n            last_max = 1;\n            last_min = 1;\n        } else {\n            let temp = last_max;\n            last_max = std::cmp::max(last_min * i, 1);\n            last_min = temp * i;\n        }\n        if last_max > max_product {\n            max_product = last_max;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpdzmo84ev.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_product_so_far = 1;\n    let mut min_product_so_far = 1;\n    let mut max_element = arr[0];\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i];\n            min_product_so_far = min(min_product_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * arr[i], 1);\n            min_product_so_far = temp * arr[i];\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n        if arr[i] > max_element {\n            max_element = arr[i];\n        }\n    }\n    if max_product == 1 && max_element < 0 {\n        max_element\n    } else {\n        max_product\n    }\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpowp614p0.rs:10:34\n   |\n10 |             min_product_so_far = min(min_product_so_far * arr[i], 1);\n   |                                  ^^^\n...\n33 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |             min_product_so_far = main(min_product_so_far * arr[i], 1);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpowp614p0.rs:16:34\n   |\n16 |             max_product_so_far = max(min_product_so_far * arr[i], 1);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut curr_product = 1;\n    for i in 0..arr.len() {\n        curr_product *= arr[i];\n        if curr_product > max_product {\n            max_product = curr_product;\n        }\n        if curr_product == 0 {\n            curr_product = 1;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmps1gjrdyh.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut product = 1;\n    let mut max_so_far = arr[0];\n    let mut min_so_far = arr[0];\n    for i in 1..arr.len() {\n        let mut temp = max_so_far;\n        max_so_far = max(max(max_so_far * arr[i], min_so_far * arr[i]), arr[i]);\n        min_so_far = min(min(temp * arr[i], min_so_far * arr[i]), arr[i]);\n        max_product = max(max_product, max_so_far);\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpaaoqamj7.rs:9:22\n  |\n9 |         max_so_far = max(max(max_so_far * arr[i], min_so_far * arr[i]), arr[i]);\n  |                      ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpaaoqamj7.rs:9:26\n  |\n9 |         max_so_far = max(max(max_so_far * arr[i], min_so_far * arr[i]), arr[i]);\n  |                          ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpaaoqamj7.rs:10:22\n   |\n10 |         min_so_far = min(min(temp * arr[i], min_so_far * arr[i]), arr[i]);\n   |                      ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |         min_so_far = main(min(temp * arr[i], min_so_far * arr[i]), arr[i]);\n   |                      ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpaaoqamj7.rs:10:26\n   |\n10 |         min_so_far = min(min(temp * arr[i], min_so_far * arr[i]), arr[i]);\n   |                          ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |         min_so_far = min(main(temp * arr[i], min_so_far * arr[i]), arr[i]);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaaoqamj7.rs:11:23\n   |\n11 |         max_product = max(max_product, max_so_far);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_so_far = 0;\n    let mut min_so_far = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_so_far = 0;\n            min_so_far = 0;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n\n        if max_so_far > max_product {\n            max_product = max_so_far;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpj0pszxag.rs:10:26\n   |\n10 |             min_so_far = min(min_so_far * arr[i], 1);\n   |                          ^^^\n...\n28 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |             min_so_far = main(min_so_far * arr[i], 1);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpj0pszxag.rs:16:26\n   |\n16 |             max_so_far = max(min_so_far * arr[i], 1);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 1;\n    let mut min_product_so_far = 1;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_so_far *= arr[i];\n            min_product_so_far = min(min_product_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * arr[i], 1);\n            min_product_so_far = temp * arr[i];\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp27w3a76q.rs:9:34\n   |\n9  |             min_product_so_far = min(min_product_so_far * arr[i], 1);\n   |                                  ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_product_so_far = main(min_product_so_far * arr[i], 1);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp27w3a76q.rs:15:34\n   |\n15 |             max_product_so_far = max(min_product_so_far * arr[i], 1);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 0;\n    let mut max_product_so_far_index = 0;\n    let mut max_product_so_far_index_index = 0;\n    let mut max_product_so_far_index_index_index = 0;\n    let mut max_product_so_far_index_index_index_index = 0;\n    let mut max_product_so_far_index_index_index_index_index = 0;\n    let mut max_product_so_far_index_index_index_index_index_index = 0;\n    let mut max_product_so_far_index_index_index_index_index_index_index = 0;\n    let mut max_product_so_far_index_index_index_index_index_index_index_index = 0;\n    let mut max_product_so_far_index_index_index_index_index_index_index_index_index = 0;\n    let mut max_product_so_far_index_index_index_index_index_index_index_index_index_index = 0;\n    let mut max_product_so_far_index_index_index_index_index_index_index_index_index_index_index = 0;\n    let mut max_product_so_far_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n    let mut max_product_so_far_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n    let mut max_product_so_far_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n    let mut max_product_so_far_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n    let mut max_product_so_far_index_index_index_index_index_index_index_index_index_index_index_index_index_\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpmcy13vcl.rs:20:110\n   |\n20 |     let mut max_product_so_far_index_index_index_index_index_index_index_index_index_index_index_index_index_\n   |                                                                                                              ^ help: add `;` here\n21 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpmcy13vcl.rs:2:36\n  |\n2 | fn max_product(arr: Vec<isize>) -> isize {\n  |    -----------                     ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > current_max {\n            current_max = arr[i];\n            current_product = current_product * arr[i];\n        } else {\n            current_product = current_product * arr[i];\n            max_product = max(max_product, current_product);\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpeem7qovy.rs:12:27\n   |\n12 |             max_product = max(max_product, current_product);\n   |                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_so_far = 0;\n    let mut min_so_far = 0;\n    for i in arr {\n        if i > 0 {\n            max_so_far = max_so_far * i;\n            min_so_far = min(min_so_far * i, 1);\n        } else if i == 0 {\n            max_so_far = 0;\n            min_so_far = 0;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * i, 1);\n            min_so_far = temp * i;\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpqzm00x5n.rs:9:26\n   |\n9  |             min_so_far = min(min_so_far * i, 1);\n   |                          ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_so_far = main(min_so_far * i, 1);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpqzm00x5n.rs:15:26\n   |\n15 |             max_so_far = max(min_so_far * i, 1);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n    let mut product = 1;\n    for i in 0..arr.len() {\n        product *= arr[i];\n        if product > max {\n            max = product;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpqwmude37.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n    let mut product = 1;\n    for i in 0..arr.len() {\n        product *= arr[i];\n        if product > max {\n            max = product;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpqwmude37.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut curr_product = 1;\n    let mut curr_max = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > curr_max {\n            curr_max = arr[i];\n            curr_product = curr_product * arr[i];\n            max_product = curr_product;\n        } else {\n            curr_product = curr_product * arr[i];\n            max_product = max(max_product, curr_product);\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpl8f7x7zr.rs:13:27\n   |\n13 |             max_product = max(max_product, curr_product);\n   |                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    for i in 0..arr.len() {\n        current_product *= arr[i];\n        if current_product > max_product {\n            max_product = current_product;\n        }\n        if current_product == 0 {\n            current_product = 1;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpmsgzh9xf.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut last_max = 0;\n    for i in 0..arr.len() {\n        if arr[i] == 0 {\n            current_product = 1;\n            last_max = i + 1;\n        } else if arr[i] > 0 {\n            current_product *= arr[i];\n            max_product = max(max_product, current_product);\n        } else {\n            if arr[last_max] < 0 {\n                current_product /= arr[last_max];\n                last_max += 1;\n            }\n            current_product *= arr[i];\n            max_product = max(max_product, current_product);\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmphiaqyy0i.rs:12:27\n   |\n12 |             max_product = max(max_product, current_product);\n   |                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmphiaqyy0i.rs:19:27\n   |\n19 |             max_product = max(max_product, current_product);\n   |                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 1;\n    let mut min_product_so_far = 1;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_so_far *= arr[i];\n            min_product_so_far = min(min_product_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * arr[i], 1);\n            min_product_so_far = temp * arr[i];\n        }\n        max_product = max(max_product, max_product_so_far);\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpyhw_w22w.rs:9:34\n   |\n9  |             min_product_so_far = min(min_product_so_far * arr[i], 1);\n   |                                  ^^^\n...\n23 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_product_so_far = main(min_product_so_far * arr[i], 1);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpyhw_w22w.rs:15:34\n   |\n15 |             max_product_so_far = max(min_product_so_far * arr[i], 1);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpyhw_w22w.rs:18:23\n   |\n18 |         max_product = max(max_product, max_product_so_far);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 1;\n    let mut min_product_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_so_far *= arr[i];\n            min_product_so_far = min(min_product_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * arr[i], 1);\n            min_product_so_far = temp * arr[i];\n        }\n\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp3zhfm_is.rs:10:34\n   |\n10 |             min_product_so_far = min(min_product_so_far * arr[i], 1);\n   |                                  ^^^\n...\n28 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |             min_product_so_far = main(min_product_so_far * arr[i], 1);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp3zhfm_is.rs:16:34\n   |\n16 |             max_product_so_far = max(min_product_so_far * arr[i], 1);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n\n    for i in 1..arr.len() {\n        if arr[i] > current_max {\n            current_max = arr[i];\n            current_product *= arr[i];\n        } else {\n            current_product *= arr[i];\n        }\n\n        if current_product > max_product {\n            max_product = current_product;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1800000`,\n right: `3000`', /tmp/tmpqb4l24bs.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_prod = 0;\n    let mut prod = 1;\n    let mut max_so_far = arr[0];\n    let mut min_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        if arr[i] < 0 {\n            let temp = max_so_far;\n            max_so_far = min_so_far;\n            min_so_far = temp;\n        }\n\n        max_so_far = max(arr[i], max_so_far * arr[i]);\n        min_so_far = min(arr[i], min_so_far * arr[i]);\n\n        max_prod = max(max_prod, max_so_far);\n    }\n\n    max_prod\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp9pwav971.rs:15:22\n   |\n15 |         max_so_far = max(arr[i], max_so_far * arr[i]);\n   |                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp9pwav971.rs:16:22\n   |\n16 |         min_so_far = min(arr[i], min_so_far * arr[i]);\n   |                      ^^^\n...\n24 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n16 |         min_so_far = main(arr[i], min_so_far * arr[i]);\n   |                      ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp9pwav971.rs:18:20\n   |\n18 |         max_prod = max(max_prod, max_so_far);\n   |                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > current_max {\n            current_max = arr[i];\n            current_product = current_product * current_max;\n        } else {\n            current_product = current_product * arr[i];\n        }\n        if current_product > max_product {\n            max_product = current_product;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1800000`,\n right: `3000`', /tmp/tmpez_wc83e.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n    for i in 0..arr.len() {\n        let mut product = 1;\n        for j in i..arr.len() {\n            if arr[j] > arr[j - 1] {\n                product *= arr[j];\n            } else {\n                break;\n            }\n        }\n        if product > max {\n            max = product;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp75f7yc4r.rs:7:29\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut cur_product = 1;\n    for i in 0..arr.len() {\n        cur_product *= arr[i];\n        max_product = max(max_product, cur_product);\n        if cur_product == 0 {\n            cur_product = 1;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmp81xfv74f.rs:7:23\n  |\n7 |         max_product = max(max_product, cur_product);\n  |                       ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_product_ending_here = 1;\n    let mut min_product_ending_here = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_ending_here *= arr[i];\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1;\n            min_product_ending_here = 1;\n        } else {\n            let temp = max_product_ending_here;\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1);\n            min_product_ending_here = temp * arr[i];\n        }\n\n        if max_product < max_product_ending_here {\n            max_product = max_product_ending_here;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp9v8fkr7_.rs:10:39\n   |\n10 |             min_product_ending_here = min(min_product_ending_here * arr[i], 1);\n   |                                       ^^^\n...\n28 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |             min_product_ending_here = main(min_product_ending_here * arr[i], 1);\n   |                                       ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp9v8fkr7_.rs:16:39\n   |\n16 |             max_product_ending_here = max(min_product_ending_here * arr[i], 1);\n   |                                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut min_product = 1;\n    let mut max_so_far = 1;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product *= arr[i];\n            min_product = std::cmp::min(min_product * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product = 1;\n            min_product = 1;\n        } else {\n            let temp = max_product;\n            max_product = std::cmp::max(min_product * arr[i], 1);\n            min_product = temp * arr[i];\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product;\n        }\n    }\n    max_so_far\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmp6t53cp0o.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut product = 1;\n    for i in 0..arr.len() {\n        product *= arr[i];\n        if product > max_product {\n            max_product = product;\n        }\n        if product == 0 {\n            product = 1;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmp6_zmu39a.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_so_far = 0;\n    let mut min_so_far = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max_so_far.max(arr[i]);\n            min_so_far = min_so_far.min(arr[i]);\n        } else {\n            let temp = max_so_far;\n            max_so_far = min_so_far.min(arr[i]);\n            min_so_far = temp.max(arr[i]);\n        }\n        max_product = max_product.max(max_so_far);\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `150`,\n right: `3000`', /tmp/tmpfcj7xhzv.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n    let mut product = 1;\n    for i in 0..arr.len() {\n        product *= arr[i];\n        if product > max {\n            max = product;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpqwmude37.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n\n    for i in 0..arr.len() {\n        current_product *= arr[i];\n        if current_product > max_product {\n            max_product = current_product;\n        }\n        if current_product == 0 {\n            current_product = 1;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmp7bkmrwah.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut product = 1;\n    let mut last_element = arr[0];\n    for element in arr {\n        if element > last_element {\n            product *= element;\n        } else {\n            max_product = max(max_product, product);\n            product = element;\n        }\n        last_element = element;\n    }\n    max(max_product, product)\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp25j1qd4u.rs:10:27\n   |\n10 |             max_product = max(max_product, product);\n   |                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp25j1qd4u.rs:15:5\n   |\n15 |     max(max_product, product)\n   |     ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > current_max {\n            current_max = arr[i];\n            current_product = current_product * arr[i];\n        } else {\n            current_product = current_product * arr[i];\n        }\n        if current_product > max_product {\n            max_product = current_product;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1800000`,\n right: `3000`', /tmp/tmpt280ef9h.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n    let mut current = 1;\n    for i in arr {\n        current *= i;\n        if current > max {\n            max = current;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmp2awl0gir.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > current_max {\n            current_max = arr[i];\n            current_product = current_product * arr[i];\n        } else {\n            current_product = current_product * arr[i];\n        }\n        max_product = max(max_product, current_product);\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpu0uzwrz2.rs:13:23\n   |\n13 |         max_product = max(max_product, current_product);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    for i in 0..arr.len() {\n        current_product *= arr[i];\n        if current_product > max_product {\n            max_product = current_product;\n        }\n        if current_product == 0 {\n            current_product = 1;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpmsgzh9xf.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    for i in 0..arr.len() {\n        current_product *= arr[i];\n        if current_product > max_product {\n            max_product = current_product;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpabd941_2.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut current_product = 1;\n    for i in 0..arr.len() {\n        current_product *= arr[i];\n        if current_product > max_product {\n            max_product = current_product;\n        }\n        if current_product == 0 {\n            current_product = 1;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpwx84g11q.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    let mut current_min = arr[0];\n\n    for i in 1..arr.len() {\n        if arr[i] < 0 {\n            let temp = current_max;\n            current_max = current_min;\n            current_min = temp;\n        }\n\n        current_max = max(arr[i], current_max * arr[i]);\n        current_min = min(arr[i], current_min * arr[i]);\n\n        max_product = max(max_product, current_max);\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa12xvc5p.rs:15:23\n   |\n15 |         current_max = max(arr[i], current_max * arr[i]);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpa12xvc5p.rs:16:23\n   |\n16 |         current_min = min(arr[i], current_min * arr[i]);\n   |                       ^^^\n...\n24 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n16 |         current_min = main(arr[i], current_min * arr[i]);\n   |                       ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa12xvc5p.rs:18:23\n   |\n18 |         max_product = max(max_product, current_max);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut curr_product = 1;\n    let mut prev = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > prev {\n            curr_product *= arr[i];\n        } else {\n            max_product = max(max_product, curr_product);\n            curr_product = 1;\n        }\n        prev = arr[i];\n    }\n    max(max_product, curr_product)\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpb85izn0k.rs:10:27\n   |\n10 |             max_product = max(max_product, curr_product);\n   |                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpb85izn0k.rs:15:5\n   |\n15 |     max(max_product, curr_product)\n   |     ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 0;\n    let mut min_product_so_far = 0;\n    for i in 0..arr.len() {\n        let mut max_product_ending_here = 1;\n        let mut min_product_ending_here = 1;\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_so_far * arr[i];\n            min_product_ending_here = min_product_so_far * arr[i];\n        } else if arr[i] < 0 {\n            max_product_ending_here = min_product_so_far * arr[i];\n            min_product_ending_here = max_product_so_far * arr[i];\n        }\n        max_product_so_far = max(max_product_ending_here, 1);\n        min_product_so_far = min(min_product_ending_here, 1);\n        max_product = max(max_product, max_product_so_far);\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp0ipa4877.rs:16:30\n   |\n16 |         max_product_so_far = max(max_product_ending_here, 1);\n   |                              ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp0ipa4877.rs:17:30\n   |\n17 |         min_product_so_far = min(min_product_ending_here, 1);\n   |                              ^^^\n...\n23 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n17 |         min_product_so_far = main(min_product_ending_here, 1);\n   |                              ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp0ipa4877.rs:18:23\n   |\n18 |         max_product = max(max_product, max_product_so_far);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_product_so_far = 1;\n    let mut min_product_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_so_far *= arr[i];\n            min_product_so_far = std::cmp::min(min_product_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = std::cmp::max(min_product_so_far * arr[i], 1);\n            min_product_so_far = temp * arr[i];\n        }\n\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmp5jjpts_g.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_product_ending_here = 1;\n    let mut min_product_ending_here = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_ending_here * arr[i];\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1;\n            min_product_ending_here = 1;\n        } else {\n            let temp = max_product_ending_here;\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1);\n            min_product_ending_here = temp * arr[i];\n        }\n\n        if max_product < max_product_ending_here {\n            max_product = max_product_ending_here;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpt_z0oqmn.rs:10:39\n   |\n10 |             min_product_ending_here = min(min_product_ending_here * arr[i], 1);\n   |                                       ^^^\n...\n28 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |             min_product_ending_here = main(min_product_ending_here * arr[i], 1);\n   |                                       ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpt_z0oqmn.rs:16:39\n   |\n16 |             max_product_ending_here = max(min_product_ending_here * arr[i], 1);\n   |                                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_product_ending_here = 1;\n    let mut min_product_ending_here = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_ending_here * arr[i];\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1;\n            min_product_ending_here = 1;\n        } else {\n            let temp = max_product_ending_here;\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1);\n            min_product_ending_here = temp * arr[i];\n        }\n\n        if max_product < max_product_ending_here {\n            max_product = max_product_ending_here;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpt_z0oqmn.rs:10:39\n   |\n10 |             min_product_ending_here = min(min_product_ending_here * arr[i], 1);\n   |                                       ^^^\n...\n28 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |             min_product_ending_here = main(min_product_ending_here * arr[i], 1);\n   |                                       ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpt_z0oqmn.rs:16:39\n   |\n16 |             max_product_ending_here = max(min_product_ending_here * arr[i], 1);\n   |                                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_so_far = 0;\n    let mut min_so_far = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_so_far = 0;\n            min_so_far = 0;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp219xexqy.rs:9:26\n   |\n9  |             min_so_far = min(min_so_far * arr[i], 1);\n   |                          ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_so_far = main(min_so_far * arr[i], 1);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp219xexqy.rs:15:26\n   |\n15 |             max_so_far = max(min_so_far * arr[i], 1);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut product = 1;\n    let mut last = arr[0];\n    for i in arr {\n        if i > last {\n            product *= i;\n        } else {\n            max_product = max(max_product, product);\n            product = i;\n        }\n        last = i;\n    }\n    max(max_product, product)\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpmroqze8q.rs:10:27\n   |\n10 |             max_product = max(max_product, product);\n   |                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpmroqze8q.rs:15:5\n   |\n15 |     max(max_product, product)\n   |     ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_product_so_far = 1;\n    let mut min_product_so_far = 1;\n    for i in arr {\n        if i > 0 {\n            max_product_so_far *= i;\n            min_product_so_far = min(min_product_so_far * i, 1);\n        } else if i == 0 {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * i, 1);\n            min_product_so_far = temp * i;\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpnplgoaqh.rs:9:34\n   |\n9  |             min_product_so_far = min(min_product_so_far * i, 1);\n   |                                  ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_product_so_far = main(min_product_so_far * i, 1);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpnplgoaqh.rs:15:34\n   |\n15 |             max_product_so_far = max(min_product_so_far * i, 1);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_prod = 0;\n    let mut max_prod_so_far = 0;\n    let mut max_so_far = 0;\n    let mut min_so_far = 0;\n    for i in 0..arr.len() {\n        let mut curr_max = max_so_far;\n        let mut curr_min = min_so_far;\n        max_so_far = max(arr[i], max(arr[i] * curr_max, arr[i] * curr_min));\n        min_so_far = min(arr[i], min(arr[i] * curr_max, arr[i] * curr_min));\n        max_prod_so_far = max(max_prod_so_far, max_so_far);\n    }\n    max_prod_so_far\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpvuxcgoup.rs:10:22\n   |\n10 |         max_so_far = max(arr[i], max(arr[i] * curr_max, arr[i] * curr_min));\n   |                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpvuxcgoup.rs:10:34\n   |\n10 |         max_so_far = max(arr[i], max(arr[i] * curr_max, arr[i] * curr_min));\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpvuxcgoup.rs:11:22\n   |\n11 |         min_so_far = min(arr[i], min(arr[i] * curr_max, arr[i] * curr_min));\n   |                      ^^^\n...\n17 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |         min_so_far = main(arr[i], min(arr[i] * curr_max, arr[i] * curr_min));\n   |                      ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpvuxcgoup.rs:11:34\n   |\n11 |         min_so_far = min(arr[i], min(arr[i] * curr_max, arr[i] * curr_min));\n   |                                  ^^^\n...\n17 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |         min_so_far = min(arr[i], main(arr[i] * curr_max, arr[i] * curr_min));\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpvuxcgoup.rs:12:27\n   |\n12 |         max_prod_so_far = max(max_prod_so_far, max_so_far);\n   |                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 5 previous errors\n\nFor mor",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_so_far = 0;\n    let mut min_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut min_ending_here = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 0;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if max_ending_here > max_so_far {\n            max_so_far = max_ending_here;\n        }\n        if min_ending_here < min_so_far {\n            min_so_far = min_ending_here;\n        }\n    }\n    max_so_far\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpif3tucc4.rs:11:31\n   |\n11 |             min_ending_here = min(min_ending_here * arr[i], 1);\n   |                               ^^^\n...\n30 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |             min_ending_here = main(min_ending_here * arr[i], 1);\n   |                               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpif3tucc4.rs:17:31\n   |\n17 |             max_ending_here = max(min_ending_here * arr[i], 1);\n   |                               ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > current_max {\n            current_product *= arr[i];\n            current_max = arr[i];\n        } else {\n            max_product = max(max_product, current_product);\n            current_product = 1;\n            current_max = arr[i];\n        }\n    }\n    max(max_product, current_product)\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpg2oizyk0.rs:11:27\n   |\n11 |             max_product = max(max_product, current_product);\n   |                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpg2oizyk0.rs:16:5\n   |\n16 |     max(max_product, current_product)\n   |     ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut last_max = 1;\n    let mut last_min = 1;\n\n    for i in arr {\n        let (max_product_1, max_product_2) = (last_max * i, last_min * i);\n\n        last_max = max_product_1.max(max_product_2).max(i);\n        last_min = max_product_1.min(max_product_2).min(i);\n\n        max_product = max_product.max(last_max);\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpplta1jmk.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_product_so_far = 1;\n    for i in arr {\n        max_product_so_far = max_product_so_far * i;\n        if max_product_so_far == 0 {\n            max_product_so_far = 1;\n        }\n        if max_product < max_product_so_far {\n            max_product = max_product_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpttaiitev.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut product = 1;\n    let mut max_so_far = arr[0];\n    let mut min_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max(max_so_far * arr[i], arr[i]);\n            min_so_far = min(min_so_far * arr[i], arr[i]);\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * arr[i], arr[i]);\n            min_so_far = min(temp * arr[i], arr[i]);\n        }\n\n        if max_so_far > max_product {\n            max_product = max_so_far;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpmczi68nc.rs:10:26\n   |\n10 |             max_so_far = max(max_so_far * arr[i], arr[i]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpmczi68nc.rs:11:26\n   |\n11 |             min_so_far = min(min_so_far * arr[i], arr[i]);\n   |                          ^^^\n...\n26 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |             min_so_far = main(min_so_far * arr[i], arr[i]);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpmczi68nc.rs:14:26\n   |\n14 |             max_so_far = max(min_so_far * arr[i], arr[i]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpmczi68nc.rs:15:26\n   |\n15 |             min_so_far = min(temp * arr[i], arr[i]);\n   |                          ^^^\n...\n26 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n15 |             min_so_far = main(temp * arr[i], arr[i]);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > current_max {\n            current_product *= arr[i];\n            current_max = arr[i];\n        } else {\n            max_product = max(max_product, current_product);\n            current_product = 1;\n            current_max = arr[i];\n        }\n    }\n    max(max_product, current_product)\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpg2oizyk0.rs:11:27\n   |\n11 |             max_product = max(max_product, current_product);\n   |                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpg2oizyk0.rs:16:5\n   |\n16 |     max(max_product, current_product)\n   |     ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    for i in 0..arr.len() {\n        current_product *= arr[i];\n        max_product = max(current_product, max_product);\n        if current_product == 0 {\n            current_product = 1;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmp_obt7gxx.rs:7:23\n  |\n7 |         max_product = max(current_product, max_product);\n  |                       ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n    let mut curr = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            curr += arr[i];\n        } else {\n            curr = 0;\n        }\n        if curr > max {\n            max = curr;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `268`,\n right: `3000`', /tmp/tmppmcya2lt.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_product_so_far = 1;\n    let mut min_product_so_far = 1;\n    for i in 0..arr.len() {\n        let mut temp = max_product_so_far;\n        max_product_so_far = max(max(max_product_so_far * arr[i], min_product_so_far * arr[i]), arr[i]);\n        min_product_so_far = min(min(temp * arr[i], min_product_so_far * arr[i]), arr[i]);\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpkgsffjw6.rs:8:30\n  |\n8 |         max_product_so_far = max(max(max_product_so_far * arr[i], min_product_so_far * arr[i]), arr[i]);\n  |                              ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpkgsffjw6.rs:8:34\n  |\n8 |         max_product_so_far = max(max(max_product_so_far * arr[i], min_product_so_far * arr[i]), arr[i]);\n  |                                  ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpkgsffjw6.rs:9:30\n   |\n9  |         min_product_so_far = min(min(temp * arr[i], min_product_so_far * arr[i]), arr[i]);\n   |                              ^^^\n...\n17 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |         min_product_so_far = main(min(temp * arr[i], min_product_so_far * arr[i]), arr[i]);\n   |                              ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpkgsffjw6.rs:9:34\n   |\n9  |         min_product_so_far = min(min(temp * arr[i], min_product_so_far * arr[i]), arr[i]);\n   |                                  ^^^\n...\n17 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |         min_product_so_far = min(main(temp * arr[i], min_product_so_far * arr[i]), arr[i]);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 1;\n    let mut min_product_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i];\n            min_product_so_far = min(min_product_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * arr[i], 1);\n            min_product_so_far = temp * arr[i];\n        }\n\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp_5ee2u1t.rs:10:34\n   |\n10 |             min_product_so_far = min(min_product_so_far * arr[i], 1);\n   |                                  ^^^\n...\n28 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |             min_product_so_far = main(min_product_so_far * arr[i], 1);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp_5ee2u1t.rs:16:34\n   |\n16 |             max_product_so_far = max(min_product_so_far * arr[i], 1);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = 1;\n    let mut current_min = 1;\n    for i in arr {\n        if i > 0 {\n            current_max = current_max * i;\n            current_min = current_min.min(current_min * i);\n        } else if i == 0 {\n            current_max = 1;\n            current_min = 1;\n        } else {\n            let temp = current_max;\n            current_max = current_min * i;\n            current_min = temp * i;\n        }\n        if current_max > max_product {\n            max_product = current_max;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmp22giom8l.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    for i in 0..arr.len() {\n        current_product *= arr[i];\n        if current_product > max_product {\n            max_product = current_product;\n        }\n        if current_product == 0 {\n            current_product = 1;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpmsgzh9xf.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut product = 1;\n    let mut max_so_far = arr[0];\n    let mut min_so_far = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max_so_far.max(max_so_far * arr[i]);\n            min_so_far = min_so_far.min(min_so_far * arr[i]);\n        } else {\n            let temp = max_so_far;\n            max_so_far = min_so_far.min(min_so_far * arr[i]);\n            min_so_far = temp.max(temp * arr[i]);\n        }\n        max_product = max_product.max(max_so_far);\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpug6kt2df.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_product_so_far = 1;\n    let mut min_product_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i];\n            min_product_so_far = min(min_product_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * arr[i], 1);\n            min_product_so_far = temp * arr[i];\n        }\n\n        if max_product < max_product_so_far {\n            max_product = max_product_so_far;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpuzrd_ghq.rs:10:34\n   |\n10 |             min_product_so_far = min(min_product_so_far * arr[i], 1);\n   |                                  ^^^\n...\n28 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |             min_product_so_far = main(min_product_so_far * arr[i], 1);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpuzrd_ghq.rs:16:34\n   |\n16 |             max_product_so_far = max(min_product_so_far * arr[i], 1);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_so_far = 0;\n    let mut min_so_far = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_so_far = 0;\n            min_so_far = 0;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp219xexqy.rs:9:26\n   |\n9  |             min_so_far = min(min_so_far * arr[i], 1);\n   |                          ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_so_far = main(min_so_far * arr[i], 1);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp219xexqy.rs:15:26\n   |\n15 |             max_so_far = max(min_so_far * arr[i], 1);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut curr_product = 1;\n    let mut prev = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > prev {\n            curr_product *= arr[i];\n            if curr_product > max_product {\n                max_product = curr_product;\n            }\n        } else {\n            curr_product = 1;\n        }\n        prev = arr[i];\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `750`,\n right: `3000`', /tmp/tmp163pdp46.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    for i in arr {\n        current_product *= i;\n        if current_product > max_product {\n            max_product = current_product;\n        }\n        if current_product < 1 {\n            current_product = 1;\n        }\n        if i > current_max {\n            current_max = i;\n        }\n    }\n    if max_product == 1 {\n        max_product = current_max;\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpalgdk2fe.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 0;\n    let mut max_product_so_far_index = 0;\n    let mut max_product_so_far_index_so_far = 0;\n    let mut max_product_so_far_index_so_far_index = 0;\n    for i in 0..arr.len() {\n        if arr[i] > max_product_so_far {\n            max_product_so_far = arr[i];\n            max_product_so_far_index = i;\n        }\n        if max_product_so_far > max_product_so_far_index_so_far {\n            max_product_so_far_index_so_far = max_product_so_far;\n            max_product_so_far_index_so_far_index = max_product_so_far_index;\n        }\n        if max_product_so_far_index_so_far > max_product {\n            max_product = max_product_so_far_index_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `150`,\n right: `3000`', /tmp/tmprk58uc09.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    for i in 0..arr.len() {\n        current_product *= arr[i];\n        if current_product > max_product {\n            max_product = current_product;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpabd941_2.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 1;\n    let mut min_product_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_so_far *= arr[i];\n            min_product_so_far = min(min_product_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * arr[i], 1);\n            min_product_so_far = temp * arr[i];\n        }\n\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp3zhfm_is.rs:10:34\n   |\n10 |             min_product_so_far = min(min_product_so_far * arr[i], 1);\n   |                                  ^^^\n...\n28 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |             min_product_so_far = main(min_product_so_far * arr[i], 1);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp3zhfm_is.rs:16:34\n   |\n16 |             max_product_so_far = max(min_product_so_far * arr[i], 1);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = isize::min_value();\n    let mut max_so_far = isize::min_value();\n    let mut min_so_far = isize::max_value();\n    for i in 0..arr.len() {\n        if arr[i] < 0 {\n            let temp = max_so_far;\n            max_so_far = min_so_far;\n            min_so_far = temp;\n        }\n        max_so_far = max(max_so_far * arr[i], arr[i]);\n        min_so_far = min(min_so_far * arr[i], arr[i]);\n        max_product = max(max_product, max_so_far);\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp0hxghort.rs:12:22\n   |\n12 |         max_so_far = max(max_so_far * arr[i], arr[i]);\n   |                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp0hxghort.rs:13:22\n   |\n13 |         min_so_far = min(min_so_far * arr[i], arr[i]);\n   |                      ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n13 |         min_so_far = main(min_so_far * arr[i], arr[i]);\n   |                      ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp0hxghort.rs:14:23\n   |\n14 |         max_product = max(max_product, max_so_far);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = arr[0];\n    let mut current_product = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > arr[i - 1] {\n            current_product *= arr[i];\n        } else {\n            current_product = arr[i];\n        }\n        if current_product > max_product {\n            max_product = current_product;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 0;\n    let mut max_product_so_far_index = 0;\n    let mut max_product_so_far_index_so_far = 0;\n    let mut max_product_so_far_index_so_far_index = 0;\n    let mut max_product_so_far_index_so_far_index_so_far = 0;\n    for i in 0..arr.len() {\n        if arr[i] > max_product_so_far {\n            max_product_so_far = arr[i];\n            max_product_so_far_index = i;\n        }\n        if max_product_so_far_index_so_far_index_so_far < max_product_so_far_index_so_far_index {\n            max_product_so_far_index_so_far_index_so_far = max_product_so_far_index_so_far_index;\n        }\n        if max_product_so_far_index_so_far < max_product_so_far_index {\n            max_product_so_far_index_so_far = max_product_so_far_index;\n        }\n        if max_product_so_far_index_so_far_index < max_product_so_far_index {\n            max_product_so_far_index_so_far_index = max_product_so_far_index;\n        }\n        if max_product_so_far_index_so_far_index_so_far < max_product_so_far_index_so_far {\n            max_product_so_far_index_so_far_index_so_far = max_product_so_far_index_so_far;\n        }\n        if max_product_so_far_index_so_far_index_so_far < max_product_so_far_index_so_far_index {\n            max_product_so_far_index_so_far_index_so_far = max_product_so_far_index_so_\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp9_i_zwtd.rs:35:3\n   |\n2  | fn max_product(arr: Vec<isize>) -> isize {\n   |                                          - unclosed delimiter\n...\n9  |     for i in 0..arr.len() {\n   |                           - unclosed delimiter\n...\n26 |         if max_product_so_far_index_so_far_index_so_far < max_product_so_far_index_so_far_index {\n   |                                                                                                 - this delimiter might not be properly closed...\n27 |             max_product_so_far_index_so_far_index_so_far = max_product_so_far_index_so_\n28 | }\n   | - ...as it matches this but it has different indentation\n...\n35 | }\n   |   ^\n\nerror[E0434]: can't capture dynamic environment in a fn item\n  --> /tmp/tmp9_i_zwtd.rs:31:21\n   |\n31 |     let candidate = max_product;\n   |                     ^^^^^^^^^^^\n   |\n   = help: use the `|| { ... }` closure form instead\n\nerror[E0425]: cannot find value `max_product_so_far_index_so_` in this scope\n  --> /tmp/tmp9_i_zwtd.rs:27:60\n   |\n27 |             max_product_so_far_index_so_far_index_so_far = max_product_so_far_index_so_\n   |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `max_product_so_far_index_so_far`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9_i_zwtd.rs:9:5\n   |\n2  |   fn max_product(arr: Vec<isize>) -> isize {\n   |                                      ----- expected `isize` because of return type\n...\n9  | /     for i in 0..arr.len() {\n10 | |         if arr[i] > max_product_so_far {\n11 | |             max_product_so_far = arr[i];\n12 | |             max_product_so_far_index = i;\n...  |\n34 | |     assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n35 | | }\n   | |__^ expected `isize`, found `()`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0434.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 0;\n    let mut min_product_so_far = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i];\n            min_product_so_far = min(min_product_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_so_far = 0;\n            min_product_so_far = 1;\n        } else {\n            let tmp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * arr[i], 0);\n            min_product_so_far = tmp * arr[i];\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpa245qzxe.rs:9:34\n   |\n9  |             min_product_so_far = min(min_product_so_far * arr[i], 1);\n   |                                  ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_product_so_far = main(min_product_so_far * arr[i], 1);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa245qzxe.rs:15:34\n   |\n15 |             max_product_so_far = max(min_product_so_far * arr[i], 0);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    for i in 0..arr.len() {\n        current_product *= arr[i];\n        max_product = max(max_product, current_product);\n        if current_product == 0 {\n            current_product = 1;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpgh_gewtw.rs:7:23\n  |\n7 |         max_product = max(max_product, current_product);\n  |                       ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_so_far = 0;\n    let mut min_so_far = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_so_far = 0;\n            min_so_far = 0;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp219xexqy.rs:9:26\n   |\n9  |             min_so_far = min(min_so_far * arr[i], 1);\n   |                          ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_so_far = main(min_so_far * arr[i], 1);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp219xexqy.rs:15:26\n   |\n15 |             max_so_far = max(min_so_far * arr[i], 1);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_prod = 0;\n    let mut curr_prod = 1;\n    let mut curr_max = 0;\n    let mut curr_min = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            curr_max = std::cmp::max(arr[i], curr_max * arr[i]);\n            curr_min = std::cmp::min(arr[i], curr_min * arr[i]);\n        } else if arr[i] == 0 {\n            curr_max = 0;\n            curr_min = 0;\n        } else {\n            let temp = curr_max;\n            curr_max = std::cmp::max(arr[i], curr_min * arr[i]);\n            curr_min = std::cmp::min(arr[i], temp * arr[i]);\n        }\n\n        max_prod = std::cmp::max(max_prod, curr_max);\n    }\n\n    max_prod\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmp6kmh_fsl.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut product = 1;\n    let mut last = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > last {\n            product *= arr[i];\n        } else {\n            max_product = max(max_product, product);\n            product = 1;\n        }\n        last = arr[i];\n    }\n    max(max_product, product)\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpy8p332tr.rs:10:27\n   |\n10 |             max_product = max(max_product, product);\n   |                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpy8p332tr.rs:15:5\n   |\n15 |     max(max_product, product)\n   |     ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 0;\n    let mut max_product_ending_here = 0;\n    let mut min_product_ending_here = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_ending_here * arr[i];\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_ending_here = 0;\n            min_product_ending_here = 1;\n        } else {\n            let temp = max_product_ending_here;\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1);\n            min_product_ending_here = temp * arr[i];\n        }\n        if max_product_so_far < max_product_ending_here {\n            max_product_so_far = max_product_ending_here;\n        }\n    }\n    max_product_so_far\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp0h62ctt1.rs:10:39\n   |\n10 |             min_product_ending_here = min(min_product_ending_here * arr[i], 1);\n   |                                       ^^^\n...\n26 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |             min_product_ending_here = main(min_product_ending_here * arr[i], 1);\n   |                                       ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp0h62ctt1.rs:16:39\n   |\n16 |             max_product_ending_here = max(min_product_ending_here * arr[i], 1);\n   |                                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_product_so_far = 1;\n    let mut min_product_so_far = 1;\n\n    for i in arr {\n        if i > 0 {\n            max_product_so_far = max_product_so_far * i;\n            min_product_so_far = min(min_product_so_far * i, 1);\n        } else if i == 0 {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * i, 1);\n            min_product_so_far = temp * i;\n        }\n\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmppkdy8eg0.rs:10:34\n   |\n10 |             min_product_so_far = min(min_product_so_far * i, 1);\n   |                                  ^^^\n...\n28 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |             min_product_so_far = main(min_product_so_far * i, 1);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmppkdy8eg0.rs:16:34\n   |\n16 |             max_product_so_far = max(min_product_so_far * i, 1);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_so_far = 1;\n    let mut min_so_far = 1;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            let tmp = max_so_far;\n            max_so_far = max(min_so_far * arr[i], 1);\n            min_so_far = tmp * arr[i];\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp5qa2bbed.rs:9:26\n   |\n9  |             min_so_far = min(min_so_far * arr[i], 1);\n   |                          ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_so_far = main(min_so_far * arr[i], 1);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp5qa2bbed.rs:15:26\n   |\n15 |             max_so_far = max(min_so_far * arr[i], 1);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut result = isize::min_value();\n    let mut max_product = 1;\n    let mut min_product = 1;\n    for i in 0..arr.len() {\n        if arr[i] < 0 {\n            let temp = max_product;\n            max_product = min_product;\n            min_product = temp;\n        }\n        max_product = max(max_product * arr[i], arr[i]);\n        min_product = min(min_product * arr[i], arr[i]);\n        result = max(result, max_product);\n    }\n    result\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp0qs7l4ks.rs:12:23\n   |\n12 |         max_product = max(max_product * arr[i], arr[i]);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp0qs7l4ks.rs:13:23\n   |\n13 |         min_product = min(min_product * arr[i], arr[i]);\n   |                       ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n13 |         min_product = main(min_product * arr[i], arr[i]);\n   |                       ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp0qs7l4ks.rs:14:18\n   |\n14 |         result = max(result, max_product);\n   |                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    for i in arr {\n        current_product *= i;\n        if current_product > max_product {\n            max_product = current_product;\n        }\n        if current_product < 0 {\n            current_product = 1;\n        }\n        if i > current_max {\n            current_max = i;\n        }\n    }\n    if max_product == 1 {\n        current_max\n    } else {\n        max_product\n    }\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpe5le5pqd.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = arr[0];\n    let mut current_product = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > arr[i - 1] {\n            current_product *= arr[i];\n        } else {\n            current_product = arr[i];\n        }\n        max_product = max(max_product, current_product);\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpyyy5dyh3.rs:11:23\n   |\n11 |         max_product = max(max_product, current_product);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > current_max {\n            current_max = arr[i];\n            current_product = current_product * arr[i];\n        } else {\n            current_product = current_product * arr[i];\n        }\n        if current_product > max_product {\n            max_product = current_product;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1800000`,\n right: `3000`', /tmp/tmpt280ef9h.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    let mut current_min = arr[0];\n\n    for i in 1..arr.len() {\n        if arr[i] < 0 {\n            std::mem::swap(&mut current_max, &mut current_min);\n        }\n\n        current_max = std::cmp::max(arr[i], current_max * arr[i]);\n        current_min = std::cmp::min(arr[i], current_min * arr[i]);\n\n        max_product = std::cmp::max(max_product, current_max);\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpsptsj2l5.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n    let mut product = 1;\n    for i in 0..arr.len() {\n        product *= arr[i];\n        if product > max {\n            max = product;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpqwmude37.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    for i in 0..arr.len() {\n        current_product *= arr[i];\n        if current_product > max_product {\n            max_product = current_product;\n        }\n        if current_product == 0 {\n            current_product = 1;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpmsgzh9xf.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut previous_number = arr[0];\n    for number in arr {\n        if number > previous_number {\n            current_product *= number;\n        } else {\n            max_product = max(max_product, current_product);\n            current_product = number;\n        }\n        previous_number = number;\n    }\n    max(max_product, current_product)\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp7ld3w0i8.rs:10:27\n   |\n10 |             max_product = max(max_product, current_product);\n   |                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp7ld3w0i8.rs:15:5\n   |\n15 |     max(max_product, current_product)\n   |     ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_so_far = 0;\n    let mut min_so_far = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_so_far = 0;\n            min_so_far = 0;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp219xexqy.rs:9:26\n   |\n9  |             min_so_far = min(min_so_far * arr[i], 1);\n   |                          ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_so_far = main(min_so_far * arr[i], 1);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp219xexqy.rs:15:26\n   |\n15 |             max_so_far = max(min_so_far * arr[i], 1);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut product = 1;\n    let mut last_max = 1;\n    let mut last_min = 1;\n\n    for i in arr {\n        if i > 0 {\n            last_max = std::cmp::max(last_max * i, i);\n            last_min = std::cmp::min(last_min * i, i);\n        } else if i == 0 {\n            last_max = 0;\n            last_min = 0;\n        } else {\n            let temp = last_max;\n            last_max = std::cmp::max(last_min * i, i);\n            last_min = std::cmp::min(temp * i, i);\n        }\n\n        max_product = std::cmp::max(max_product, last_max);\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpz34tsz19.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 0;\n    let mut max_product_so_far_index = 0;\n    let mut max_product_so_far_index_so_far = 0;\n    let mut max_product_so_far_index_so_far_index = 0;\n    let mut max_product_so_far_index_so_far_index_so_far = 0;\n    let mut max_product_so_far_index_so_far_index_so_far_index = 0;\n    let mut max_product_so_far_index_so_far_index_so_far_index_so_far = 0;\n    for (i, &x) in arr.iter().enumerate() {\n        let mut product = 1;\n        if x > 0 {\n            product *= x;\n            if max_product_so_far_index_so_far_index_so_far_index_so_far > 0 {\n                product *= max_product_so_far_index_so_far_index_so_far_index_so_far;\n            }\n            if max_product_so_far_index_so_far_index_so_far_index > 0 {\n                product *= max_product_so_far_index_so_far_index_so_far_index;\n            }\n            if max_product_so_far_index_so_far_index_so_far > 0 {\n                product *= max_product_so_far_index_so_far_index_so_far;\n            }\n            if max_product_so_far_index_so_far_index > 0 {\n                product *= max_product_so_far_index_so_far_index;\n            }\n            if max_product_so_far_index_so_far > 0 {\n                product *= max_product_so_far_index_so_far;\n            }\n            if max_product_so_far_index > 0 {\n                product *= max_product_so_far_index;\n            }\n            if max_product_so_\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp5qwjn_yg.rs:41:3\n   |\n2  | fn max_product(arr: Vec<isize>) -> isize {\n   |                                          - unclosed delimiter\n...\n11 |     for (i, &x) in arr.iter().enumerate() {\n   |                                           - unclosed delimiter\n12 |         let mut product = 1;\n13 |         if x > 0 {\n   |                  - this delimiter might not be properly closed...\n...\n34 | }\n   | - ...as it matches this but it has different indentation\n...\n41 | }\n   |   ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmp5qwjn_yg.rs:34:1\n   |\n33 |             if max_product_so_\n   |             -- this `if` expression has a condition, but no block\n34 | }\n   | ^ expected `{`\n\nerror[E0434]: can't capture dynamic environment in a fn item\n  --> /tmp/tmp5qwjn_yg.rs:37:21\n   |\n37 |     let candidate = max_product;\n   |                     ^^^^^^^^^^^\n   |\n   = help: use the `|| { ... }` closure form instead\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5qwjn_yg.rs:11:5\n   |\n2  |   fn max_product(arr: Vec<isize>) -> isize {\n   |                                      ----- expected `isize` because of return type\n...\n11 | /     for (i, &x) in arr.iter().enumerate() {\n12 | |         let mut product = 1;\n13 | |         if x > 0 {\n14 | |             product *= x;\n...  |\n40 | |     assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n41 | | }\n   | |__^ expected `isize`, found `()`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0434.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 0;\n    let mut max_product_so_far_index = 0;\n    let mut max_product_so_far_index_so_far = 0;\n    let mut max_product_so_far_index_so_far_index = 0;\n    let mut max_product_so_far_index_so_far_index_so_far = 0;\n    let mut max_product_so_far_index_so_far_index_so_far_index = 0;\n    let mut max_product_so_far_index_so_far_index_so_far_index_so_far = 0;\n    let mut max_product_so_far_index_so_far_index_so_far_index_so_far_index = 0;\n    let mut max_product_so_far_index_so_far_index_so_far_index_so_far_index_so_far = 0;\n    let mut max_product_so_far_index_so_far_index_so_far_index_so_far_index_so_far_index = 0;\n    let mut max_product_so_far_index_so_far_index_so_far_index_so_far_index_so_far_index_so_far = 0;\n    let mut max_product_so_far_index_so_far_index_so_far_index_so_far_index_so_far_index_so_far_index = 0;\n    let mut max_product_so_far_index_so_far_index_so_far_index_so_far_index_so_far_index_so_far_index_so_far = 0;\n    let mut max_product_so_far_index_so_far_index_so_far_index_so_far_index_so_far_index_so_far_index_so_far_index = 0;\n    let mut max_product_so_far_index_so_far_index_so_far_index_so_far_index_so_far_index_so_\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpbbd3jogj.rs:18:93\n   |\n18 |     let mut max_product_so_far_index_so_far_index_so_far_index_so_far_index_so_far_index_so_\n   |                                                                                             ^ help: add `;` here\n19 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpbbd3jogj.rs:2:36\n  |\n2 | fn max_product(arr: Vec<isize>) -> isize {\n  |    -----------                     ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    let mut current_min = arr[0];\n    for i in 1..arr.len() {\n        let mut temp_max = current_max;\n        let mut temp_min = current_min;\n        current_max = max(arr[i], max(arr[i] * temp_max, arr[i] * temp_min));\n        current_min = min(arr[i], min(arr[i] * temp_max, arr[i] * temp_min));\n        max_product = max(max_product, current_max);\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmplbhs4snq.rs:10:23\n   |\n10 |         current_max = max(arr[i], max(arr[i] * temp_max, arr[i] * temp_min));\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmplbhs4snq.rs:10:35\n   |\n10 |         current_max = max(arr[i], max(arr[i] * temp_max, arr[i] * temp_min));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmplbhs4snq.rs:11:23\n   |\n11 |         current_min = min(arr[i], min(arr[i] * temp_max, arr[i] * temp_min));\n   |                       ^^^\n...\n17 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |         current_min = main(arr[i], min(arr[i] * temp_max, arr[i] * temp_min));\n   |                       ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmplbhs4snq.rs:11:35\n   |\n11 |         current_min = min(arr[i], min(arr[i] * temp_max, arr[i] * temp_min));\n   |                                   ^^^\n...\n17 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |         current_min = min(arr[i], main(arr[i] * temp_max, arr[i] * temp_min));\n   |                                   ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmplbhs4snq.rs:12:23\n   |\n12 |         max_product = max(max_product, current_max);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 5 previous errors\n\nFor mo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_product_ending_here = 1;\n    let mut min_product_ending_here = 1;\n\n    for i in arr {\n        if i > 0 {\n            max_product_ending_here = max_product_ending_here * i;\n            min_product_ending_here = min(min_product_ending_here * i, 1);\n        } else if i == 0 {\n            max_product_ending_here = 1;\n            min_product_ending_here = 1;\n        } else {\n            let temp = max_product_ending_here;\n            max_product_ending_here = max(min_product_ending_here * i, 1);\n            min_product_ending_here = temp * i;\n        }\n\n        if max_product_ending_here > max_product {\n            max_product = max_product_ending_here;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpej68fu3m.rs:10:39\n   |\n10 |             min_product_ending_here = min(min_product_ending_here * i, 1);\n   |                                       ^^^\n...\n28 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |             min_product_ending_here = main(min_product_ending_here * i, 1);\n   |                                       ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpej68fu3m.rs:16:39\n   |\n16 |             max_product_ending_here = max(min_product_ending_here * i, 1);\n   |                                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut product = 1;\n    let mut last_max = 1;\n    let mut last_min = 1;\n    for i in arr {\n        if i > 0 {\n            last_max = last_max * i;\n            last_min = std::cmp::min(last_min * i, 1);\n        } else if i == 0 {\n            last_max = 1;\n            last_min = 1;\n        } else {\n            let temp = last_max;\n            last_max = std::cmp::max(last_min * i, 1);\n            last_min = temp * i;\n        }\n        if last_max > max_product {\n            max_product = last_max;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmphkttwh7m.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_so_far = 0;\n    let mut min_so_far = 0;\n\n    for i in arr {\n        if i > 0 {\n            max_so_far = max_so_far.max(max_so_far * i);\n            min_so_far = min_so_far.min(min_so_far * i);\n        } else if i == 0 {\n            max_so_far = 0;\n            min_so_far = 0;\n        } else {\n            let temp = max_so_far;\n            max_so_far = min_so_far.min(min_so_far * i);\n            min_so_far = temp.max(temp * i);\n        }\n\n        max_product = max_product.max(max_so_far);\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `3000`', /tmp/tmpkkkrlrzy.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = arr[0];\n    let mut current_product = arr[0];\n    for i in 1..arr.len() {\n        current_product = std::cmp::max(current_product * arr[i], arr[i]);\n        max_product = std::cmp::max(max_product, current_product);\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmp761_9sbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_so_far = 1;\n    let mut min_so_far = 1;\n    for i in arr {\n        if i > 0 {\n            max_so_far = max_so_far * i;\n            min_so_far = min(min_so_far * i, 1);\n        } else if i == 0 {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * i, 1);\n            min_so_far = temp * i;\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpomgwhtad.rs:9:26\n   |\n9  |             min_so_far = min(min_so_far * i, 1);\n   |                          ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_so_far = main(min_so_far * i, 1);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpomgwhtad.rs:15:26\n   |\n15 |             max_so_far = max(min_so_far * i, 1);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > current_max {\n            current_max = arr[i];\n            current_product *= arr[i];\n        } else {\n            current_product *= arr[i];\n            max_product = max(max_product, current_product);\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaadd2n0g.rs:12:27\n   |\n12 |             max_product = max(max_product, current_product);\n   |                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_so_far = 1;\n    let mut min_so_far = 1;\n    for i in arr {\n        if i > 0 {\n            max_so_far = max_so_far * i;\n            min_so_far = min(min_so_far * i, 1);\n        } else if i == 0 {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * i, 1);\n            min_so_far = temp * i;\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpomgwhtad.rs:9:26\n   |\n9  |             min_so_far = min(min_so_far * i, 1);\n   |                          ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_so_far = main(min_so_far * i, 1);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpomgwhtad.rs:15:26\n   |\n15 |             max_so_far = max(min_so_far * i, 1);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    for i in arr {\n        current_product *= i;\n        if current_product > max_product {\n            max_product = current_product;\n        }\n        if current_product < 1 {\n            current_product = 1;\n        }\n        if i > current_max {\n            current_max = i;\n        }\n    }\n    if max_product == 1 {\n        max_product = current_max;\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpalgdk2fe.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_so_far = 0;\n    let mut min_so_far = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_so_far = 0;\n            min_so_far = 0;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp219xexqy.rs:9:26\n   |\n9  |             min_so_far = min(min_so_far * arr[i], 1);\n   |                          ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_so_far = main(min_so_far * arr[i], 1);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp219xexqy.rs:15:26\n   |\n15 |             max_so_far = max(min_so_far * arr[i], 1);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 0;\n    let mut min_product_so_far = 0;\n    let mut max_element = 0;\n    let mut min_element = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_so_far = max(max_product_so_far * arr[i], arr[i]);\n            min_product_so_far = min(min_product_so_far * arr[i], arr[i]);\n        } else if arr[i] == 0 {\n            max_product_so_far = 0;\n            min_product_so_far = 0;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * arr[i], arr[i]);\n            min_product_so_far = min(temp * arr[i], arr[i]);\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpys9pu093.rs:10:34\n   |\n10 |             max_product_so_far = max(max_product_so_far * arr[i], arr[i]);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpys9pu093.rs:11:34\n   |\n11 |             min_product_so_far = min(min_product_so_far * arr[i], arr[i]);\n   |                                  ^^^\n...\n27 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |             min_product_so_far = main(min_product_so_far * arr[i], arr[i]);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpys9pu093.rs:17:34\n   |\n17 |             max_product_so_far = max(min_product_so_far * arr[i], arr[i]);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpys9pu093.rs:18:34\n   |\n18 |             min_product_so_far = min(temp * arr[i], arr[i]);\n   |                                  ^^^\n...\n27 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n18 |             min_product_so_far = main(temp * arr[i], arr[i]);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 0;\n    let mut max_product_so_far_idx = 0;\n    let mut max_product_so_far_idx_so_far = 0;\n    let mut max_product_so_far_idx_so_far_idx = 0;\n    for (i, &x) in arr.iter().enumerate() {\n        if x > max_product_so_far {\n            max_product_so_far = x;\n            max_product_so_far_idx = i;\n        }\n        if max_product_so_far > max_product_so_far_idx_so_far {\n            max_product_so_far_idx_so_far = max_product_so_far;\n            max_product_so_far_idx_so_far_idx = max_product_so_far_idx;\n        }\n        if i > max_product_so_far_idx_so_far_idx {\n            max_product = max_product_so_far_idx_so_far * x;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `900`,\n right: `3000`', /tmp/tmpv1nl3yu2.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_so_far = 0;\n    let mut min_so_far = 0;\n    for i in arr {\n        if i > 0 {\n            max_so_far = max_so_far * i;\n            min_so_far = min(min_so_far * i, 1);\n        } else if i == 0 {\n            max_so_far = 0;\n            min_so_far = 0;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * i, 0);\n            min_so_far = temp * i;\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp7lxrmev4.rs:9:26\n   |\n9  |             min_so_far = min(min_so_far * i, 1);\n   |                          ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_so_far = main(min_so_far * i, 1);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp7lxrmev4.rs:15:26\n   |\n15 |             max_so_far = max(min_so_far * i, 0);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut current_product = 1;\n    let mut current_max = 0;\n    let mut current_min = 0;\n    for i in arr {\n        if i > 0 {\n            current_max = max(current_max * i, i);\n            current_min = min(current_min * i, i);\n        } else if i < 0 {\n            let temp = current_max;\n            current_max = max(current_min * i, i);\n            current_min = min(temp * i, i);\n        } else {\n            current_max = 0;\n            current_min = 0;\n        }\n        max_product = max(max_product, current_max);\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmp0a5fa01x.rs:9:27\n  |\n9 |             current_max = max(current_max * i, i);\n  |                           ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp0a5fa01x.rs:10:27\n   |\n10 |             current_min = min(current_min * i, i);\n   |                           ^^^\n...\n24 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |             current_min = main(current_min * i, i);\n   |                           ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp0a5fa01x.rs:13:27\n   |\n13 |             current_max = max(current_min * i, i);\n   |                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp0a5fa01x.rs:14:27\n   |\n14 |             current_min = min(temp * i, i);\n   |                           ^^^\n...\n24 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |             current_min = main(temp * i, i);\n   |                           ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp0a5fa01x.rs:19:23\n   |\n19 |         max_product = max(max_product, current_max);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > current_max {\n            current_max = arr[i];\n            current_product = current_product * arr[i];\n        } else {\n            current_product = current_product / arr[i - 1] * arr[i];\n        }\n        if current_product > max_product {\n            max_product = current_product;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `750`,\n right: `3000`', /tmp/tmpe71mjhtd.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut product = 1;\n    let mut last_max = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > last_max {\n            product *= arr[i];\n            last_max = arr[i];\n        } else {\n            max_product = product;\n            product = 1;\n            last_max = arr[i];\n        }\n    }\n    if product > max_product {\n        product\n    } else {\n        max_product\n    }\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `750`,\n right: `3000`', /tmp/tmpgxhxzj6a.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 0;\n    let mut min_product_so_far = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i];\n            min_product_so_far = min(min_product_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_so_far = 0;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * arr[i], 0);\n            min_product_so_far = temp * arr[i];\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp4md6rg1r.rs:9:34\n   |\n9  |             min_product_so_far = min(min_product_so_far * arr[i], 1);\n   |                                  ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_product_so_far = main(min_product_so_far * arr[i], 1);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp4md6rg1r.rs:15:34\n   |\n15 |             max_product_so_far = max(min_product_so_far * arr[i], 0);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_product_so_far = 1;\n    let mut min_product_so_far = 1;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i];\n            min_product_so_far = min(min_product_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * arr[i], 1);\n            min_product_so_far = temp * arr[i];\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpv3binese.rs:9:34\n   |\n9  |             min_product_so_far = min(min_product_so_far * arr[i], 1);\n   |                                  ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_product_so_far = main(min_product_so_far * arr[i], 1);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpv3binese.rs:15:34\n   |\n15 |             max_product_so_far = max(min_product_so_far * arr[i], 1);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 0;\n    let mut min_product_so_far = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i];\n            min_product_so_far = min(1, min_product_so_far * arr[i]);\n        } else if arr[i] == 0 {\n            max_product_so_far = 0;\n            min_product_so_far = 0;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(1, min_product_so_far * arr[i]);\n            min_product_so_far = temp * arr[i];\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp7ix_362g.rs:9:34\n   |\n9  |             min_product_so_far = min(1, min_product_so_far * arr[i]);\n   |                                  ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_product_so_far = main(1, min_product_so_far * arr[i]);\n   |                                  ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp7ix_362g.rs:15:34\n   |\n15 |             max_product_so_far = max(1, min_product_so_far * arr[i]);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_so_far = 1;\n    let mut min_so_far = 1;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp350b4mbp.rs:9:26\n   |\n9  |             min_so_far = min(min_so_far * arr[i], 1);\n   |                          ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_so_far = main(min_so_far * arr[i], 1);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp350b4mbp.rs:15:26\n   |\n15 |             max_so_far = max(min_so_far * arr[i], 1);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    for i in arr {\n        current_product *= i;\n        if current_product > max_product {\n            max_product = current_product;\n        }\n        if current_product < 1 {\n            current_product = 1;\n        }\n        if i > current_max {\n            current_max = i;\n        }\n    }\n    if max_product == 1 {\n        max_product = current_max;\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpalgdk2fe.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > current_max {\n            current_max = arr[i];\n            current_product *= arr[i];\n        } else {\n            current_product *= arr[i];\n        }\n        if current_product > max_product {\n            max_product = current_product;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1800000`,\n right: `3000`', /tmp/tmp_aofdmqd.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    for i in 0..arr.len() {\n        current_product *= arr[i];\n        max_product = max(max_product, current_product);\n        if current_product == 0 {\n            current_product = 1;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpgh_gewtw.rs:7:23\n  |\n7 |         max_product = max(max_product, current_product);\n  |                       ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n    let mut product = 1;\n    let mut start = 0;\n    let mut end = 0;\n    while end < arr.len() {\n        if arr[end] > arr[end - 1] {\n            product *= arr[end];\n            if product > max {\n                max = product;\n            }\n        } else {\n            product = 1;\n            start = end;\n        }\n        end += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp0hbfn_zs.rs:8:27\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_so_far = 0;\n    let mut min_so_far = 0;\n    for i in arr {\n        if i > 0 {\n            max_so_far = max_so_far * i;\n            min_so_far = min(min_so_far * i, 1);\n        } else if i == 0 {\n            max_so_far = 0;\n            min_so_far = 0;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * i, 0);\n            min_so_far = temp * i;\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp7lxrmev4.rs:9:26\n   |\n9  |             min_so_far = min(min_so_far * i, 1);\n   |                          ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_so_far = main(min_so_far * i, 1);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp7lxrmev4.rs:15:26\n   |\n15 |             max_so_far = max(min_so_far * i, 0);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 0;\n    let mut max_so_far = 0;\n    let mut min_so_far = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max(max_so_far * arr[i], arr[i]);\n            min_so_far = min(min_so_far * arr[i], arr[i]);\n        } else if arr[i] == 0 {\n            max_so_far = 0;\n            min_so_far = 0;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * arr[i], arr[i]);\n            min_so_far = min(temp * arr[i], arr[i]);\n        }\n\n        if max_so_far > max_product_so_far {\n            max_product_so_far = max_so_far;\n        }\n    }\n\n    max_product_so_far\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp9wsnb8v1.rs:10:26\n   |\n10 |             max_so_far = max(max_so_far * arr[i], arr[i]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp9wsnb8v1.rs:11:26\n   |\n11 |             min_so_far = min(min_so_far * arr[i], arr[i]);\n   |                          ^^^\n...\n29 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |             min_so_far = main(min_so_far * arr[i], arr[i]);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp9wsnb8v1.rs:17:26\n   |\n17 |             max_so_far = max(min_so_far * arr[i], arr[i]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp9wsnb8v1.rs:18:26\n   |\n18 |             min_so_far = min(temp * arr[i], arr[i]);\n   |                          ^^^\n...\n29 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n18 |             min_so_far = main(temp * arr[i], arr[i]);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut current_product = 0;\n    let mut current_max = 0;\n    for i in arr {\n        if i > current_max {\n            current_max = i;\n            current_product = current_max;\n        } else {\n            current_product *= i;\n        }\n        if current_product > max_product {\n            max_product = current_product;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2000`,\n right: `3000`', /tmp/tmp7iy02us1.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > current_max {\n            current_max = arr[i];\n            current_product = current_product * arr[i];\n        } else {\n            current_product = current_product * arr[i];\n        }\n        max_product = max(max_product, current_product);\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpu0uzwrz2.rs:13:23\n   |\n13 |         max_product = max(max_product, current_product);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_so_far = 0;\n    let mut min_so_far = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_so_far = 0;\n            min_so_far = 0;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517166,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp219xexqy.rs:9:26\n   |\n9  |             min_so_far = min(min_so_far * arr[i], 1);\n   |                          ^^^\n...\n25 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |             min_so_far = main(min_so_far * arr[i], 1);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp219xexqy.rs:15:26\n   |\n15 |             max_so_far = max(min_so_far * arr[i], 1);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut last_max = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > last_max {\n            last_max = arr[i];\n            current_product *= arr[i];\n        } else {\n            current_product = 1;\n        }\n        max_product = std::cmp::max(max_product, current_product);\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `150`,\n right: `3000`', /tmp/tmpuoj9tp7u.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut last_max = 1;\n    for i in arr {\n        if i > 0 {\n            current_product *= i;\n            max_product = max(current_product, max_product);\n        } else if i == 0 {\n            current_product = 1;\n            last_max = 1;\n        } else {\n            let temp = current_product;\n            current_product = max(last_max * i, 1);\n            last_max = temp;\n            max_product = max(current_product, max_product);\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpago5z229.rs:9:27\n  |\n9 |             max_product = max(current_product, max_product);\n  |                           ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpago5z229.rs:15:31\n   |\n15 |             current_product = max(last_max * i, 1);\n   |                               ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpago5z229.rs:17:27\n   |\n17 |             max_product = max(current_product, max_product);\n   |                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_so_far = 0;\n    let mut min_so_far = 0;\n    for i in 0..arr.len() {\n        let mut curr = arr[i];\n        if curr > 0 {\n            max_so_far = max_so_far.max(curr);\n            min_so_far = min_so_far.min(curr);\n        } else if curr == 0 {\n            max_so_far = 0;\n            min_so_far = 0;\n        } else {\n            let temp = max_so_far;\n            max_so_far = min_so_far.min(curr);\n            min_so_far = temp.max(curr);\n        }\n        max_product = max_product.max(max_so_far);\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `150`,\n right: `3000`', /tmp/tmpphvvwc56.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_so_far = 0;\n    let mut min_so_far = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max_so_far.max(arr[i]);\n            min_so_far = min_so_far.min(arr[i]);\n        } else if arr[i] == 0 {\n            max_so_far = 0;\n            min_so_far = 0;\n        } else {\n            let temp = max_so_far;\n            max_so_far = min_so_far.min(arr[i]);\n            min_so_far = temp.max(arr[i]);\n        }\n        max_product = max_product.max(max_so_far);\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `150`,\n right: `3000`', /tmp/tmpb0cmadc9.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut last_number = arr[0];\n    for number in arr {\n        if number > last_number {\n            current_product *= number;\n        } else {\n            max_product = max(max_product, current_product);\n            current_product = number;\n        }\n        last_number = number;\n    }\n    max(max_product, current_product)\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpkh1hy78h.rs:10:27\n   |\n10 |             max_product = max(max_product, current_product);\n   |                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpkh1hy78h.rs:15:5\n   |\n15 |     max(max_product, current_product)\n   |     ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut max_so_far = 1;\n    let mut min_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n\n        if max_product < max_so_far {\n            max_product = max_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpw36er8d4.rs:10:26\n   |\n10 |             min_so_far = min(min_so_far * arr[i], 1);\n   |                          ^^^\n...\n27 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |             min_so_far = main(min_so_far * arr[i], 1);\n   |                          ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpw36er8d4.rs:16:26\n   |\n16 |             max_so_far = max(min_so_far * arr[i], 1);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    for i in 0..arr.len() {\n        current_product *= arr[i];\n        if current_product > max_product {\n            max_product = current_product;\n        }\n        if current_product == 0 {\n            current_product = 1;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpmsgzh9xf.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 0;\n    let mut max_product_ending_here = 1;\n    let mut min_product_ending_here = 1;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_ending_here * arr[i];\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1;\n            min_product_ending_here = 1;\n        } else {\n            let temp = max_product_ending_here;\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1);\n            min_product_ending_here = temp * arr[i];\n        }\n        if max_product_so_far < max_product_ending_here {\n            max_product_so_far = max_product_ending_here;\n        }\n    }\n    max_product_so_far\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpinz1kqc5.rs:10:39\n   |\n10 |             min_product_ending_here = min(min_product_ending_here * arr[i], 1);\n   |                                       ^^^\n...\n26 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |             min_product_ending_here = main(min_product_ending_here * arr[i], 1);\n   |                                       ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpinz1kqc5.rs:16:39\n   |\n16 |             max_product_ending_here = max(min_product_ending_here * arr[i], 1);\n   |                                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 0;\n    for i in 0..arr.len() {\n        if arr[i] > max_product_so_far {\n            max_product_so_far = arr[i];\n        }\n        if max_product_so_far * arr[i] > max_product {\n            max_product = max_product_so_far * arr[i];\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `22500`,\n right: `3000`', /tmp/tmpf5nmb9v0.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 0;\n    let mut max_product_so_far_index = 0;\n    let mut max_product_so_far_index_so_far = 0;\n    let mut max_product_so_far_index_so_far_index = 0;\n    let mut max_product_so_far_index_so_far_index_so_far = 0;\n    let mut max_product_so_far_index_so_far_index_so_far_index = 0;\n    let mut max_product_so_far_index_so_far_index_so_far_index_so_far = 0;\n    let mut max_product_so_far_index_so_far_index_so_far_index_so_far_index = 0;\n    let mut max_product_so_far_index_so_far_index_so_far_index_so_far_index_so_far = 0;\n    let mut max_product_so_far_index_so_far_index_so_far_index_so_far_index_so_far_index = 0;\n    let mut max_product_so_far_index_so_far_index_so_far_index_so_far_index_so_far_index_so_far = 0;\n    let mut max_product_so_far_index_so_far_index_so_far_index_so_far_index_so_far_index_so_far_index = 0;\n    let mut max_product_so_far_index_so_far_index_so_far_index_so_far_index_so_far_index_so_far_index_so_far = 0;\n    let mut max_product_so_far_index_so_far_index_so_far_index_so_far_index_so_far_index_so_far_index_so_far_index = 0;\n    let mut max_product_so_far_index_so_far_index_so_far_index_so_far_index_so_far_index_so_\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpbbd3jogj.rs:18:93\n   |\n18 |     let mut max_product_so_far_index_so_far_index_so_far_index_so_far_index_so_far_index_so_\n   |                                                                                             ^ help: add `;` here\n19 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpbbd3jogj.rs:2:36\n  |\n2 | fn max_product(arr: Vec<isize>) -> isize {\n  |    -----------                     ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut previous_number = 1;\n    for number in arr {\n        if number > previous_number {\n            current_product *= number;\n            if current_product > max_product {\n                max_product = current_product;\n            }\n        } else {\n            current_product = 1;\n        }\n        previous_number = number;\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `750`,\n right: `3000`', /tmp/tmpusl8bw47.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_ending_here = 1;\n    let mut min_product_ending_here = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_ending_here *= arr[i];\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1;\n            min_product_ending_here = 1;\n        } else {\n            let temp = max_product_ending_here;\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1);\n            min_product_ending_here = temp * arr[i];\n        }\n\n        if max_product_ending_here > max_product {\n            max_product = max_product_ending_here;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpqj4b68jm.rs:10:39\n   |\n10 |             min_product_ending_here = min(min_product_ending_here * arr[i], 1);\n   |                                       ^^^\n...\n28 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |             min_product_ending_here = main(min_product_ending_here * arr[i], 1);\n   |                                       ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpqj4b68jm.rs:16:39\n   |\n16 |             max_product_ending_here = max(min_product_ending_here * arr[i], 1);\n   |                                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = 1;\n    let mut current_min = 1;\n\n    for i in arr {\n        if i > 0 {\n            current_max = current_max * i;\n            current_min = std::cmp::min(current_min * i, 1);\n        } else if i == 0 {\n            current_max = 1;\n            current_min = 1;\n        } else {\n            let temp = current_max;\n            current_max = std::cmp::max(current_min * i, 1);\n            current_min = temp * i;\n        }\n\n        if current_max > max_product {\n            max_product = current_max;\n        }\n    }\n\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpnmtml96t.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut dp = vec![1; arr.len()];\n    let mut max = arr[0];\n    for i in 1..arr.len() {\n        for j in 0..i {\n            if arr[i] > arr[j] {\n                dp[i] = dp[j] * arr[i];\n                max = max.max(dp[i]);\n            }\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15000`,\n right: `3000`', /tmp/tmp_et8o_te.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut product = 1;\n    let mut prev = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > prev {\n            product *= arr[i];\n            if product > max_product {\n                max_product = product;\n            }\n        } else {\n            product = 1;\n        }\n        prev = arr[i];\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `750`,\n right: `3000`', /tmp/tmpiriyadqv.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 0;\n    let mut min_product_so_far = 0;\n    for i in 0..arr.len() {\n        let mut max_product_ending_here = 1;\n        let mut min_product_ending_here = 1;\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_so_far * arr[i];\n            min_product_ending_here = min_product_so_far * arr[i];\n        } else if arr[i] == 0 {\n            max_product_ending_here = 0;\n            min_product_ending_here = 0;\n        } else {\n            max_product_ending_here = min_product_so_far * arr[i];\n            min_product_ending_here = max_product_so_far * arr[i];\n        }\n        max_product_so_far = max(max_product_ending_here, arr[i]);\n        min_product_so_far = min(min_product_ending_here, arr[i]);\n        max_product = max(max_product, max_product_so_far);\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmppgeetx1h.rs:19:30\n   |\n19 |         max_product_so_far = max(max_product_ending_here, arr[i]);\n   |                              ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmppgeetx1h.rs:20:30\n   |\n20 |         min_product_so_far = min(min_product_ending_here, arr[i]);\n   |                              ^^^\n...\n26 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n20 |         min_product_so_far = main(min_product_ending_here, arr[i]);\n   |                              ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmppgeetx1h.rs:21:23\n   |\n21 |         max_product = max(max_product, max_product_so_far);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n    let mut product = 1;\n    let mut i = 0;\n    let mut j = 0;\n    while i < arr.len() {\n        if arr[i] > arr[j] {\n            product *= arr[i];\n            i += 1;\n        } else {\n            max = max.max(product);\n            product = 1;\n            j = i;\n        }\n    }\n    max.max(product)\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122484,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    for i in 0..arr.len() {\n        current_product *= arr[i];\n        if current_product > max_product {\n            max_product = current_product;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpabd941_2.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 0;\n    let mut max_product_ending_here = 1;\n    let mut min_product_ending_here = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_ending_here * arr[i];\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1;\n            min_product_ending_here = 1;\n        } else {\n            let temp = max_product_ending_here;\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1);\n            min_product_ending_here = temp * arr[i];\n        }\n\n        if max_product_so_far < max_product_ending_here {\n            max_product_so_far = max_product_ending_here;\n        }\n    }\n\n    max_product_so_far\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpsjehbiam.rs:11:39\n   |\n11 |             min_product_ending_here = min(min_product_ending_here * arr[i], 1);\n   |                                       ^^^\n...\n29 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |             min_product_ending_here = main(min_product_ending_here * arr[i], 1);\n   |                                       ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpsjehbiam.rs:17:39\n   |\n17 |             max_product_ending_here = max(min_product_ending_here * arr[i], 1);\n   |                                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut product = 1;\n    let mut max_so_far = arr[0];\n    let mut min_so_far = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max_so_far.max(max_so_far * arr[i]);\n            min_so_far = min_so_far.min(min_so_far * arr[i]);\n        } else if arr[i] == 0 {\n            max_so_far = 0;\n            min_so_far = 0;\n        } else {\n            let temp = max_so_far;\n            max_so_far = min_so_far.min(arr[i] * min_so_far);\n            min_so_far = temp.max(arr[i] * temp);\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpns4q_oam.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 0;\n    let mut min_product_so_far = 0;\n    for i in 0..arr.len() {\n        let mut max_product_ending_here = 1;\n        let mut min_product_ending_here = 1;\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_so_far * arr[i];\n            min_product_ending_here = min_product_so_far * arr[i];\n        } else if arr[i] < 0 {\n            max_product_ending_here = min_product_so_far * arr[i];\n            min_product_ending_here = max_product_so_far * arr[i];\n        }\n        max_product_so_far = max(max_product_ending_here, 1);\n        min_product_so_far = min(min_product_ending_here, 1);\n        max_product = max(max_product, max_product_so_far);\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp0ipa4877.rs:16:30\n   |\n16 |         max_product_so_far = max(max_product_ending_here, 1);\n   |                              ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp0ipa4877.rs:17:30\n   |\n17 |         min_product_so_far = min(min_product_ending_here, 1);\n   |                              ^^^\n...\n23 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n17 |         min_product_so_far = main(min_product_ending_here, 1);\n   |                              ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp0ipa4877.rs:18:23\n   |\n18 |         max_product = max(max_product, max_product_so_far);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 0;\n    let mut max_product_so_far = 0;\n    let mut max_so_far = 0;\n    let mut min_so_far = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max_so_far.max(arr[i]);\n            min_so_far = min_so_far.min(arr[i]);\n        } else if arr[i] == 0 {\n            max_so_far = 0;\n            min_so_far = 0;\n        } else {\n            let temp = max_so_far;\n            max_so_far = min_so_far.max(arr[i]);\n            min_so_far = temp.min(arr[i]);\n        }\n\n        max_product_so_far = max_so_far.max(max_product_so_far);\n    }\n\n    max_product_so_far\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `150`,\n right: `3000`', /tmp/tmp52vbgpi4.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    for i in 0..arr.len() {\n        current_product *= arr[i];\n        if current_product > max_product {\n            max_product = current_product;\n        }\n        if current_product == 0 {\n            current_product = 1;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpmsgzh9xf.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > current_max {\n            current_max = arr[i];\n            current_product *= arr[i];\n            max_product = current_product;\n        } else {\n            current_product *= arr[i];\n            if current_product > max_product {\n                max_product = current_product;\n            }\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1800000`,\n right: `3000`', /tmp/tmpcprlmarh.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    let mut max_product = 1;\n    let mut current_product = 1;\n    for i in 0..arr.len() {\n        current_product *= arr[i];\n        if current_product > max_product {\n            max_product = current_product;\n        }\n        if current_product == 0 {\n            current_product = 1;\n        }\n    }\n    max_product\n}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5400000`,\n right: `3000`', /tmp/tmpmsgzh9xf.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}