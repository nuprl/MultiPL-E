{
  "name": "mbpp_586_split_Arr",
  "language": "rs",
  "prompt": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut new_l = l.clone();\n    let mut i = 0;\n    while i < n {\n        new_l.push(l[i]);\n        i += 1;\n    }\n    new_l.drain(0..n as usize);\n    new_l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpf59pf5q9.rs:6:20\n  |\n6 |         new_l.push(l[i]);\n  |                    ^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut r = l.split_off(n as usize);\n    l.append(&mut r);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpq8q0xryq.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in n..l.len() as isize {\n        res.push(l[i as usize]);\n    }\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    let mut l3 = Vec::new();\n    let mut l4 = Vec::new();\n    let mut l5 = Vec::new();\n    let mut l6 = Vec::new();\n    let mut l7 = Vec::new();\n    let mut l8 = Vec::new();\n    let mut l9 = Vec::new();\n    let mut l10 = Vec::new();\n    let mut l11 = Vec::new();\n    let mut l12 = Vec::new();\n    let mut l13 = Vec::new();\n    let mut l14 = Vec::new();\n    let mut l15 = Vec::new();\n    let mut l16 = Vec::new();\n    let mut l17 = Vec::new();\n    let mut l18 = Vec::new();\n    let mut l19 = Vec::new();\n    let mut l20 = Vec::new();\n    let mut l21 = Vec::new();\n    let mut l22 = Vec::new();\n    let mut l23 = Vec::new();\n    let mut l24 = Vec::new();\n    let mut l25 = Vec::new();\n    let mut l26 = Vec::new();\n    let mut l27 = Vec::new();\n    let mut l28 = Vec::new();\n    let mut l29 = Vec::new();\n    let mut l30 = Vec::new();\n    let mut l31 = Vec::new();\n    let mut l32 = Vec::new();\n    let mut l33 = Vec::new();\n    let mut l34 = Vec::new();\n    let mut l35 = Vec::new();\n    let mut l36 = Vec::new();\n    let mut l37 = Vec::new();\n    let mut l38 = Vec::new();\n    let mut l39 = Vec::new();\n    let mut l40 = Vec::new();\n    let mut l41 = Vec::new();\n    let mut l42 = Vec::new();\n    let mut l43 = Vec::new();\n    let mut l44 = Vec::new();\n    let mut l45 = Vec::new();\n    let mut l46 = Vec::\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "error: expected identifier, found `}`\n  --> /tmp/tmpuykiy9ul.rs:50:1\n   |\n50 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut res = Vec::new();\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l.push(l[i as usize]);\n    }\n    l.truncate(n as usize);\n    res.append(&mut l);\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 12, 10]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp1xk5m3q2.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut res = l.clone();\n    let mut i = 0;\n    let mut j = 0;\n    let mut temp = 0;\n    while i < n {\n        temp = res[i];\n        res[i] = res[n + j];\n        res[n + j] = temp;\n        i += 1;\n        j += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpdlo2z1ub.rs:8:16\n  |\n8 |         temp = res[i];\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpdlo2z1ub.rs:9:9\n  |\n9 |         res[i] = res[n + j];\n  |         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpdlo2z1ub.rs:9:18\n  |\n9 |         res[i] = res[n + j];\n  |                  ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpdlo2z1ub.rs:10:9\n   |\n10 |         res[n + j] = temp;\n   |         ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in 0..l.len() {\n        if i == n as usize {\n            res.append(&mut l);\n            return res;\n        }\n        res.push(l[i]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpv47qqduy.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n >= l.len() as isize {\n        return l;\n    }\n    let mut a = Vec::new();\n    for _ in 0..n {\n        a.push(l.remove(0));\n    }\n    l.append(&mut a);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp22i_ptp_.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut first = l.split_off(n as usize);\n    l.append(&mut first);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmprchnu5qb.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp632tp5fs.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp22i_ptp_.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l2 = Vec::new();\n    for i in 0..n {\n        l2.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l[i as usize - n as usize] = l[i as usize];\n    }\n    for i in 0..n {\n        l[l.len() - n as usize + i as usize] = l2[i as usize];\n    }\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `l` as immutable because it is also borrowed as mutable\n  --> /tmp/tmp56zo4v8f.rs:12:11\n   |\n12 |         l[l.len() - n as usize + i as usize] = l2[i as usize];\n   |         --^^^^^^^---------------------------\n   |         | |\n   |         | immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmp56zo4v8f.rs:12:11\n   |\n12 |         l[l.len() - n as usize + i as usize] = l2[i as usize];\n   |           ^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmp56zo4v8f.rs:12:9\n   |\n12 |         l[l.len() - n as usize + i as usize] = l2[i as usize];\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l2 = l.split_off(n as usize);\n    l.append(&mut l2);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpfr2nu4va.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..l.len() {\n        if i < n as usize {\n            l1.push(l[i]);\n        } else {\n            l2.push(l[i]);\n        }\n    }\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n >= l.len() as isize {\n        return l;\n    }\n    let mut temp = Vec::new();\n    for i in 0..n {\n        temp.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l[i as usize - n as usize] = l[i as usize];\n    }\n    for i in 0..n {\n        l[l.len() - n as usize + i as usize] = temp[i as usize];\n    }\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "warning: variable does not need to be mutable\n --> /tmp/tmpy_p7vuu1.rs:4:9\n  |\n4 |     let mut n = n;\n  |         ----^\n  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\nerror[E0502]: cannot borrow `l` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpy_p7vuu1.rs:16:11\n   |\n16 |         l[l.len() - n as usize + i as usize] = temp[i as usize];\n   |         --^^^^^^^---------------------------\n   |         | |\n   |         | immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpy_p7vuu1.rs:16:11\n   |\n16 |         l[l.len() - n as usize + i as usize] = temp[i as usize];\n   |           ^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpy_p7vuu1.rs:16:9\n   |\n16 |         l[l.len() - n as usize + i as usize] = temp[i as usize];\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpqwif6hzn.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut l2 = Vec::new();\n    for i in 0..n {\n        l2.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l[i as usize - n as usize] = l[i as usize];\n    }\n    for i in 0..n {\n        l[l.len() - n as usize + i as usize] = l2[i as usize];\n    }\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `l` as immutable because it is also borrowed as mutable\n  --> /tmp/tmp6hdb0_z4.rs:16:11\n   |\n16 |         l[l.len() - n as usize + i as usize] = l2[i as usize];\n   |         --^^^^^^^---------------------------\n   |         | |\n   |         | immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmp6hdb0_z4.rs:16:11\n   |\n16 |         l[l.len() - n as usize + i as usize] = l2[i as usize];\n   |           ^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmp6hdb0_z4.rs:16:9\n   |\n16 |         l[l.len() - n as usize + i as usize] = l2[i as usize];\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut res = l.clone();\n    let mut temp = Vec::new();\n    for i in 0..n {\n        temp.push(res[i]);\n    }\n    res.splice(n.., temp);\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmptzwo7eqg.rs:6:19\n  |\n6 |         temp.push(res[i]);\n  |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the trait bound `RangeFrom<isize>: RangeBounds<usize>` is not satisfied\n    --> /tmp/tmptzwo7eqg.rs:8:16\n     |\n8    |     res.splice(n.., temp);\n     |         ------ ^^^ the trait `RangeBounds<usize>` is not implemented for `RangeFrom<isize>`\n     |         |\n     |         required by a bound introduced by this call\n     |\n     = help: the following other types implement trait `RangeBounds<T>`:\n               RangeFrom<&T>\n               RangeFrom<T>\nnote: required by a bound in `Vec::<T, A>::splice`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l2 = l.split_off(n as usize);\n    l.append(&mut l2);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp6u3vpzs_.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp22i_ptp_.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp632tp5fs.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = 0;\n    }\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut l1 = l.split_off(n as usize);\n    l1.append(&mut l);\n    l1\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in n..l.len() as isize {\n        res.push(l[i as usize]);\n    }\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..n {\n        l1.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l2.push(l[i as usize]);\n    }\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l2 = l.split_off(n as usize);\n    l.append(&mut l2);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp6u3vpzs_.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpqwif6hzn.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut res = Vec::new();\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l.push(l[i as usize]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpn6qrq2w4.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    let len = l.len();\n    if n >= len as isize {\n        return l;\n    }\n    let mut i = 0;\n    while i < n {\n        let tmp = l.remove(0);\n        l.push(tmp);\n        i += 1;\n    }\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l1 = l.split_off(n as usize);\n    l1.append(&mut l);\n    l1\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n    let mut i = 0;\n    while i < l.len() {\n        if i == n as usize {\n            res.append(&mut l[i..].to_vec());\n            break;\n        }\n        res.push(l[i]);\n        i += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp_1pzi7bg.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..l.len() {\n        if i < n as usize {\n            l1.push(l[i]);\n        } else {\n            l2.push(l[i]);\n        }\n    }\n    let mut l = l2;\n    l.extend(l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = 0;\n    }\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut res = Vec::new();\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l.push(l[i as usize]);\n    }\n    for i in 0..n {\n        l.remove(0);\n    }\n    res.append(&mut l);\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpwo6wf9f3.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..l.len() {\n        if i < n as usize {\n            l1.push(l[i]);\n        } else {\n            l2.push(l[i]);\n        }\n    }\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp632tp5fs.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    let mut l3 = Vec::new();\n    for i in 0..l.len() {\n        if i < n as usize {\n            l1.push(l[i]);\n        } else {\n            l2.push(l[i]);\n        }\n    }\n    l3.append(&mut l2);\n    l3.append(&mut l1);\n    l3\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    for i in 0..n {\n        l1.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l[(i - n) as usize] = l[i as usize];\n    }\n    for i in 0..n {\n        l[(l.len() - n + i) as usize] = l1[i as usize];\n    }\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpys747bbz.rs:12:22\n   |\n12 |         l[(l.len() - n + i) as usize] = l1[i as usize];\n   |                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpys747bbz.rs:12:20\n   |\n12 |         l[(l.len() - n + i) as usize] = l1[i as usize];\n   |                    ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpys747bbz.rs:12:26\n   |\n12 |         l[(l.len() - n + i) as usize] = l1[i as usize];\n   |                          ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmpys747bbz.rs:12:24\n   |\n12 |         l[(l.len() - n + i) as usize] = l1[i as usize];\n   |                        ^ no implementation for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut res = Vec::new();\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l.push(l[i as usize]);\n    }\n    for i in 0..n {\n        l.remove(0);\n    }\n    return l;\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 6, 52, 36, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp218d323v.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp22i_ptp_.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp632tp5fs.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in n..l.len() as isize {\n        res.push(l[i as usize]);\n    }\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp632tp5fs.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l2 = Vec::new();\n    for i in 0..n {\n        l2.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l[i as usize - n as usize] = l[i as usize];\n    }\n    for i in 0..n {\n        l[l.len() - n as usize + i as usize] = l2[i as usize];\n    }\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `l` as immutable because it is also borrowed as mutable\n  --> /tmp/tmp56zo4v8f.rs:12:11\n   |\n12 |         l[l.len() - n as usize + i as usize] = l2[i as usize];\n   |         --^^^^^^^---------------------------\n   |         | |\n   |         | immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmp56zo4v8f.rs:12:11\n   |\n12 |         l[l.len() - n as usize + i as usize] = l2[i as usize];\n   |           ^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmp56zo4v8f.rs:12:9\n   |\n12 |         l[l.len() - n as usize + i as usize] = l2[i as usize];\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = 0;\n    }\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut res = Vec::new();\n    let mut i = 0;\n    while i < n {\n        res.push(l[i as usize]);\n        i += 1;\n    }\n    let mut i = n;\n    while i < l.len() as isize {\n        l.push(l[i as usize]);\n        i += 1;\n    }\n    l.truncate(n as usize);\n    res.append(&mut l);\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut r = l.split_off(n as usize);\n    l.append(&mut r);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp8uwd9h2a.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp632tp5fs.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < n {\n        v.push(l[i as usize]);\n        i += 1;\n    }\n    while i < l.len() as isize {\n        v.push(l[i as usize]);\n        i += 1;\n    }\n    v\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpcsmg_t8o.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    let len = l.len();\n    if n < 0 {\n        n = len as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in 0..len {\n        if i < n as usize {\n            res.push(l[i]);\n        } else {\n            l.push(l[i]);\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpfecwnyh2.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..l.len() {\n        if i < n as usize {\n            l1.push(l[i]);\n        } else {\n            l2.push(l[i]);\n        }\n    }\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in n..l.len() as isize {\n        res.push(l[i as usize]);\n    }\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let n = n as usize;\n    let mut res = Vec::new();\n    for i in 0..n {\n        res.push(l[i]);\n    }\n    for i in n..l.len() {\n        l.push(l[i]);\n    }\n    l.truncate(n);\n    res.append(&mut l);\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 12, 10]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp1q6pe_61.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..l.len() {\n        if i < n as usize {\n            l1.push(l[i]);\n        } else {\n            l2.push(l[i]);\n        }\n    }\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp632tp5fs.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut res = l.clone();\n    let mut temp = Vec::new();\n    let mut i = 0;\n    while i < n {\n        temp.push(res[i]);\n        i += 1;\n    }\n    res.append(&mut temp);\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpyj9_z4tr.rs:7:19\n  |\n7 |         temp.push(res[i]);\n  |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp22i_ptp_.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp22i_ptp_.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut res = Vec::new();\n    let mut i = 0;\n    while i < n {\n        res.push(l[i as usize]);\n        i += 1;\n    }\n    while i < l.len() as isize {\n        l.push(l[i as usize]);\n        i += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in n..l.len() as isize {\n        res.push(l[i as usize]);\n    }\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l2 = l.split_off(n as usize);\n    l.append(&mut l2);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp6u3vpzs_.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut new_l = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < l.len() {\n        if j < n {\n            new_l.push(l[i]);\n            i += 1;\n            j += 1;\n        } else {\n            new_l.push(l[i]);\n            i += 1;\n        }\n    }\n    new_l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpzkxxb7yc.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp632tp5fs.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut res = Vec::new();\n    let mut i = 0;\n    while i < n {\n        res.push(l[i as usize]);\n        i += 1;\n    }\n    i = n;\n    while i < l.len() as isize {\n        l.push(l[i as usize]);\n        i += 1;\n    }\n    i = 0;\n    while i < n {\n        l.remove(0);\n        i += 1;\n    }\n    l.append(&mut res);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp632tp5fs.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp22i_ptp_.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut first = l.split_off(n as usize);\n    l.append(&mut first);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmprchnu5qb.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l1 = l.clone();\n    let mut l2 = l.clone();\n    l1.truncate(n as usize);\n    l2.drain(0..n as usize);\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut r = l.split_off(n as usize);\n    l.append(&mut r);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpq8q0xryq.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut v = Vec::new();\n    let mut i = 0;\n    while i < l.len() {\n        if i == n as usize {\n            v.append(&mut l[i..].to_vec());\n            break;\n        }\n        v.push(l[i]);\n        i += 1;\n    }\n    v\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpuyu7irfm.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l2 = Vec::new();\n    for i in 0..n {\n        l2.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l[(i - n) as usize] = l[i as usize];\n    }\n    for i in 0..n {\n        l[(l.len() - n + i) as usize] = l2[i as usize];\n    }\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp_zlu0pz1.rs:12:22\n   |\n12 |         l[(l.len() - n + i) as usize] = l2[i as usize];\n   |                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp_zlu0pz1.rs:12:20\n   |\n12 |         l[(l.len() - n + i) as usize] = l2[i as usize];\n   |                    ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_zlu0pz1.rs:12:26\n   |\n12 |         l[(l.len() - n + i) as usize] = l2[i as usize];\n   |                          ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmp_zlu0pz1.rs:12:24\n   |\n12 |         l[(l.len() - n + i) as usize] = l2[i as usize];\n   |                        ^ no implementation for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp22i_ptp_.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..l.len() {\n        if i < n as usize {\n            l1.push(l[i]);\n        } else {\n            l2.push(l[i]);\n        }\n    }\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut v = l.clone();\n    let mut v1 = Vec::new();\n    let mut v2 = Vec::new();\n    for i in 0..n {\n        v1.push(v[i]);\n    }\n    for i in n..v.len() {\n        v2.push(v[i]);\n    }\n    v2.append(&mut v1);\n    v2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpka94stw4.rs:7:17\n  |\n7 |         v1.push(v[i]);\n  |                 ^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpka94stw4.rs:9:17\n  |\n9 |     for i in n..v.len() {\n  |                 ^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpka94stw4.rs:10:17\n   |\n10 |         v2.push(v[i]);\n   |                 ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in 0..l.len() {\n        if i == n as usize {\n            res.append(&mut l);\n            break;\n        }\n        res.push(l[i]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp2ul4ebf6.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l.clone();\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    let mut l3 = Vec::new();\n    let mut l4 = Vec::new();\n    let mut l5 = Vec::new();\n    let mut l6 = Vec::new();\n    let mut l7 = Vec::new();\n    let mut l8 = Vec::new();\n    let mut l9 = Vec::new();\n    let mut l10 = Vec::new();\n    let mut l11 = Vec::new();\n    let mut l12 = Vec::new();\n    let mut l13 = Vec::new();\n    let mut l14 = Vec::new();\n    let mut l15 = Vec::new();\n    let mut l16 = Vec::new();\n    let mut l17 = Vec::new();\n    let mut l18 = Vec::new();\n    let mut l19 = Vec::new();\n    let mut l20 = Vec::new();\n    let mut l21 = Vec::new();\n    let mut l22 = Vec::new();\n    let mut l23 = Vec::new();\n    let mut l24 = Vec::new();\n    let mut l25 = Vec::new();\n    let mut l26 = Vec::new();\n    let mut l27 = Vec::new();\n    let mut l28 = Vec::new();\n    let mut l29 = Vec::new();\n    let mut l30 = Vec::new();\n    let mut l31 = Vec::new();\n    let mut l32 = Vec::new();\n    let mut l33 = Vec::new();\n    let mut l34 = Vec::new();\n    let mut l35 = Vec::new();\n    let mut l36 = Vec::new();\n    let mut l37 = Vec::new();\n    let mut l38 = Vec::new();\n    let mut l39 = Vec::new();\n    let mut l40 = Vec::new();\n    let mut l41 = Vec::new();\n    let mut l42 = Vec::new();\n    let mut l43 = Vec::new();\n    let mut l44 = Vec::new();\n    let mut l45 = Vec::new();\n    let mut l46 =\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n  --> /tmp/tmpjtzya61h.rs:50:1\n   |\n50 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in n..l.len() as isize {\n        res.push(l[i as usize]);\n    }\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp632tp5fs.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp632tp5fs.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let n = n as usize;\n    let mut res = Vec::new();\n    for i in 0..n {\n        res.push(l[i]);\n    }\n    for i in n..l.len() {\n        l.push(l[i]);\n    }\n    l.truncate(n);\n    res.append(&mut l);\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 12, 10]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp1q6pe_61.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp632tp5fs.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    let mut res = Vec::new();\n    while n > 0 {\n        res.push(l.remove(0));\n        n -= 1;\n    }\n    l.append(&mut res);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l1 = l.split_off(n as usize);\n    l1.append(&mut l);\n    l1\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..n {\n        l1.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l2.push(l[i as usize]);\n    }\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l2 = l.split_off(n as usize);\n    l.append(&mut l2);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpfr2nu4va.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = 0;\n    }\n    if n as usize > l.len() {\n        n = l.len() as isize;\n    }\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpxli4cy6y.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut res = Vec::new();\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l[i as usize - n as usize] = l[i as usize];\n    }\n    for i in 0..n {\n        l[l.len() - n as usize + i as usize] = res[i as usize];\n    }\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `l` as immutable because it is also borrowed as mutable\n  --> /tmp/tmp0cz619m_.rs:16:11\n   |\n16 |         l[l.len() - n as usize + i as usize] = res[i as usize];\n   |         --^^^^^^^---------------------------\n   |         | |\n   |         | immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmp0cz619m_.rs:16:11\n   |\n16 |         l[l.len() - n as usize + i as usize] = res[i as usize];\n   |           ^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmp0cz619m_.rs:16:9\n   |\n16 |         l[l.len() - n as usize + i as usize] = res[i as usize];\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    let mut i = 0;\n    while i < n {\n        l1.push(l[i]);\n        i += 1;\n    }\n    while i < l.len() as isize {\n        l2.push(l[i]);\n        i += 1;\n    }\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpkhino_w9.rs:8:17\n  |\n8 |         l1.push(l[i]);\n  |                 ^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkhino_w9.rs:12:17\n   |\n12 |         l2.push(l[i]);\n   |                 ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let n = n as usize;\n    let mut res = l.split_off(n);\n    res.append(&mut l);\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut res = l.clone();\n    let mut i = 0;\n    while i < n {\n        res.push(res[i]);\n        i += 1;\n    }\n    res.drain(0..n as usize);\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnvy0wxna.rs:6:18\n  |\n6 |         res.push(res[i]);\n  |                  ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in n..l.len() as isize {\n        res.push(l[i as usize]);\n    }\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..l.len() {\n        if i < n as usize {\n            l1.push(l[i]);\n        } else {\n            l2.push(l[i]);\n        }\n    }\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in n..l.len() as isize {\n        res.push(l[i as usize]);\n    }\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut v = Vec::new();\n    for i in n..l.len() as isize {\n        v.push(l[i as usize]);\n    }\n    for i in 0..n {\n        v.push(l[i as usize]);\n    }\n    v\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l2 = Vec::new();\n    for i in 0..n {\n        l2.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l[(i - n) as usize] = l[i as usize];\n    }\n    for i in 0..n {\n        l[(l.len() - n + i) as usize] = l2[i as usize];\n    }\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp_zlu0pz1.rs:12:22\n   |\n12 |         l[(l.len() - n + i) as usize] = l2[i as usize];\n   |                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp_zlu0pz1.rs:12:20\n   |\n12 |         l[(l.len() - n + i) as usize] = l2[i as usize];\n   |                    ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_zlu0pz1.rs:12:26\n   |\n12 |         l[(l.len() - n + i) as usize] = l2[i as usize];\n   |                          ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmp_zlu0pz1.rs:12:24\n   |\n12 |         l[(l.len() - n + i) as usize] = l2[i as usize];\n   |                        ^ no implementation for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    let mut temp = l[0];\n    let mut i = 0;\n    while i < n {\n        let t = l[i as usize];\n        l[i as usize] = temp;\n        temp = t;\n        i += 1;\n    }\n    l.push(temp);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 12, 5, 6, 52, 36, 10]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp4mvia_al.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut v = l.clone();\n    let mut i = n as usize;\n    while i < v.len() {\n        v.push(v[i]);\n        v.remove(i);\n        i += 1;\n    }\n    v\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 6, 36, 52, 5]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp12ii2v9t.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    l.append(&mut l.split_off(n as usize));\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "error[E0499]: cannot borrow `l` as mutable more than once at a time\n --> /tmp/tmpdqfj98kc.rs:4:19\n  |\n4 |     l.append(&mut l.split_off(n as usize));\n  |     --------------^^^^^^^^^^^^^^^^^^^^^^^-\n  |     | |           |\n  |     | |           second mutable borrow occurs here\n  |     | first borrow later used by call\n  |     first mutable borrow occurs here\n  |\nhelp: try adding a local storing this argument...\n --> /tmp/tmpdqfj98kc.rs:4:19\n  |\n4 |     l.append(&mut l.split_off(n as usize));\n  |                   ^^^^^^^^^^^^^^^^^^^^^^^\nhelp: ...and then using that local as the argument to this call\n --> /tmp/tmpdqfj98kc.rs:4:5\n  |\n4 |     l.append(&mut l.split_off(n as usize));\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0499`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..n {\n        l1.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l2.push(l[i as usize]);\n    }\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in n..l.len() as isize {\n        res.push(l[i as usize]);\n    }\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in n..l.len() as isize {\n        res.push(l[i as usize]);\n    }\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp632tp5fs.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in n..l.len() as isize {\n        res.push(l[i as usize]);\n    }\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut res = Vec::new();\n    let mut i = 0;\n    while i < n {\n        res.push(l[i as usize]);\n        i += 1;\n    }\n    while i < l.len() as isize {\n        l.push(l[i as usize]);\n        i += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let n = n as usize;\n    let mut res = Vec::new();\n    for i in n..l.len() {\n        res.push(l[i]);\n    }\n    for i in 0..n {\n        res.push(l[i]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = 0;\n    let mut temp_arr = Vec::new();\n    let mut temp_arr2 = Vec::new();\n    let mut temp_arr3 = Vec::new();\n    let mut temp_arr4 = Vec::new();\n    for i in 0..l.len() {\n        temp_arr.push(l[i]);\n    }\n    for j in 0..n {\n        temp_arr2.push(temp_arr[j]);\n    }\n    for k in n..l.len() {\n        temp_arr3.push(temp_arr[k]);\n    }\n    for temp in 0..temp_arr2.len() {\n        temp_arr4.push(temp_arr2[temp]);\n    }\n    for temp in 0..temp_arr3.len() {\n        temp_arr4.push(temp_arr3[temp]);\n    }\n    return temp_arr4;\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwb6i3_jz.rs:16:24\n   |\n16 |         temp_arr2.push(temp_arr[j]);\n   |                        ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwb6i3_jz.rs:18:17\n   |\n18 |     for k in n..l.len() {\n   |                 ^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwb6i3_jz.rs:19:24\n   |\n19 |         temp_arr3.push(temp_arr[k]);\n   |                        ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut v = l.clone();\n    let mut i = 0;\n    while i < n {\n        v.push(v[i]);\n        v.remove(i);\n        i += 1;\n    }\n    v\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpd6_wab99.rs:6:16\n  |\n6 |         v.push(v[i]);\n  |                ^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpd6_wab99.rs:7:18\n  |\n7 |         v.remove(i);\n  |                  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n  |\n7 |         v.remove(i.try_into().unwrap());\n  |                   ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l2 = Vec::new();\n    for i in 0..n {\n        l2.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l[(i - n) as usize] = l[i as usize];\n    }\n    for i in 0..n {\n        l[(l.len() - n + i) as usize] = l2[i as usize];\n    }\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp_zlu0pz1.rs:12:22\n   |\n12 |         l[(l.len() - n + i) as usize] = l2[i as usize];\n   |                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp_zlu0pz1.rs:12:20\n   |\n12 |         l[(l.len() - n + i) as usize] = l2[i as usize];\n   |                    ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_zlu0pz1.rs:12:26\n   |\n12 |         l[(l.len() - n + i) as usize] = l2[i as usize];\n   |                          ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmp_zlu0pz1.rs:12:24\n   |\n12 |         l[(l.len() - n + i) as usize] = l2[i as usize];\n   |                        ^ no implementation for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = 0;\n    }\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    l.rotate_left(n as usize);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..l.len() {\n        if i < n as usize {\n            l1.push(l[i]);\n        } else {\n            l2.push(l[i]);\n        }\n    }\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l.clone();\n    let mut l2: Vec<isize> = Vec::new();\n    for i in 0..n {\n        l2.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l[i as usize - n as usize] = l[i as usize];\n    }\n    for i in 0..n {\n        l[l.len() - n as usize + i as usize] = l2[i as usize];\n    }\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `l` as immutable because it is also borrowed as mutable\n  --> /tmp/tmp6dpi_d24.rs:12:11\n   |\n12 |         l[l.len() - n as usize + i as usize] = l2[i as usize];\n   |         --^^^^^^^---------------------------\n   |         | |\n   |         | immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmp6dpi_d24.rs:12:11\n   |\n12 |         l[l.len() - n as usize + i as usize] = l2[i as usize];\n   |           ^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmp6dpi_d24.rs:12:9\n   |\n12 |         l[l.len() - n as usize + i as usize] = l2[i as usize];\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..l.len() {\n        if i < n as usize {\n            l1.push(l[i]);\n        } else {\n            l2.push(l[i]);\n        }\n    }\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut i = 0;\n    let mut temp = 0;\n    let mut temp_vec = Vec::new();\n    while i < n {\n        temp = l.remove(0);\n        temp_vec.push(temp);\n        i += 1;\n    }\n    l.append(&mut temp_vec);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp632tp5fs.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l.clone();\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpyeqnjelv.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in 0..l.len() {\n        if i == n as usize {\n            res.append(&mut l);\n            break;\n        }\n        res.push(l[i]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp2ul4ebf6.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..l.len() {\n        if i < n as usize {\n            l1.push(l[i]);\n        } else {\n            l2.push(l[i]);\n        }\n    }\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    let mut l3 = Vec::new();\n    let mut l4 = Vec::new();\n    let mut l5 = Vec::new();\n    let mut l6 = Vec::new();\n    let mut l7 = Vec::new();\n    let mut l8 = Vec::new();\n    let mut l9 = Vec::new();\n    let mut l10 = Vec::new();\n    let mut l11 = Vec::new();\n    let mut l12 = Vec::new();\n    let mut l13 = Vec::new();\n    let mut l14 = Vec::new();\n    let mut l15 = Vec::new();\n    let mut l16 = Vec::new();\n    let mut l17 = Vec::new();\n    let mut l18 = Vec::new();\n    let mut l19 = Vec::new();\n    let mut l20 = Vec::new();\n    let mut l21 = Vec::new();\n    let mut l22 = Vec::new();\n    let mut l23 = Vec::new();\n    let mut l24 = Vec::new();\n    let mut l25 = Vec::new();\n    let mut l26 = Vec::new();\n    let mut l27 = Vec::new();\n    let mut l28 = Vec::new();\n    let mut l29 = Vec::new();\n    let mut l30 = Vec::new();\n    let mut l31 = Vec::new();\n    let mut l32 = Vec::new();\n    let mut l33 = Vec::new();\n    let mut l34 = Vec::new();\n    let mut l35 = Vec::new();\n    let mut l36 = Vec::new();\n    let mut l37 = Vec::new();\n    let mut l38 = Vec::new();\n    let mut l39 = Vec::new();\n    let mut l40 = Vec::new();\n    let mut l41 = Vec::new();\n    let mut l42 = Vec::new();\n    let mut l43 = Vec::new();\n    let mut l44 = Vec::new();\n    let mut l45 = Vec::new();\n    let mut l46 = Vec::\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "error: expected identifier, found `}`\n  --> /tmp/tmpuykiy9ul.rs:50:1\n   |\n50 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut v = l.clone();\n    let mut v2 = Vec::new();\n    for i in 0..n {\n        v2.push(v[i as usize]);\n    }\n    v.drain(0..n as usize);\n    v.append(&mut v2);\n    v\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut i = 0;\n    let mut j = 0;\n    let mut temp = 0;\n    let mut temp2 = 0;\n    let mut temp3 = 0;\n    let mut temp4 = 0;\n    let mut temp5 = 0;\n    let mut temp6 = 0;\n    let mut temp7 = 0;\n    let mut temp8 = 0;\n    let mut temp9 = 0;\n    let mut temp10 = 0;\n    let mut temp11 = 0;\n    let mut temp12 = 0;\n    let mut temp13 = 0;\n    let mut temp14 = 0;\n    let mut temp15 = 0;\n    let mut temp16 = 0;\n    let mut temp17 = 0;\n    let mut temp18 = 0;\n    let mut temp19 = 0;\n    let mut temp20 = 0;\n    let mut temp21 = 0;\n    let mut temp22 = 0;\n    let mut temp23 = 0;\n    let mut temp24 = 0;\n    let mut temp25 = 0;\n    let mut temp26 = 0;\n    let mut temp27 = 0;\n    let mut temp28 = 0;\n    let mut temp29 = 0;\n    let mut temp30 = 0;\n    let mut temp31 = 0;\n    let mut temp32 = 0;\n    let mut temp33 = 0;\n    let mut temp34 = 0;\n    let mut temp35 = 0;\n    let mut temp36 = 0;\n    let mut temp37 = 0;\n    let mut temp38 = 0;\n    let mut temp39 = 0;\n    let mut temp40 = 0;\n    let mut temp41 = 0;\n    let mut temp42 = 0;\n    let mut temp43 = 0;\n    let mut temp44 = 0;\n    let mut temp45 = 0;\n    let mut temp46 = 0;\n    let mut temp47 = 0;\n    let mut temp48 = 0;\n    let mut temp49 = 0;\n    let mut temp50 = 0;\n    let mut temp51 = 0;\n    let mut temp52 = 0;\n    let mut temp53 = 0;\n    let mut temp54 = 0;\n    let\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "error: expected pattern, found `}`\n  --> /tmp/tmpuw7gebc6.rs:61:1\n   |\n61 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut new_l = Vec::new();\n    for i in n..l.len() as isize {\n        new_l.push(l[i as usize]);\n    }\n    for i in 0..n {\n        new_l.push(l[i as usize]);\n    }\n    new_l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut v = l;\n    let mut i = 0;\n    let mut j = 0;\n    let mut temp = 0;\n    let len = v.len();\n    while i < len {\n        if i == n as usize {\n            j = 0;\n        }\n        temp = v[i];\n        v[i] = v[j];\n        v[j] = temp;\n        i += 1;\n        j += 1;\n    }\n    v\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[3, 4, 5, 6, 7, 2, 0, 1]`,\n right: `[3, 4, 5, 6, 7, 0, 1, 2]`', /tmp/tmp5x_o9hpb.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp632tp5fs.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp22i_ptp_.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut i = 0;\n    let mut j = 0;\n    let mut temp = 0;\n    let len = l.len();\n    while i < len {\n        if j == n {\n            j = 0;\n        }\n        temp = l[i];\n        l[i] = l[j];\n        l[j] = temp;\n        i += 1;\n        j += 1;\n    }\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpe0ieyi5s.rs:13:16\n   |\n13 |         l[i] = l[j];\n   |                ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpe0ieyi5s.rs:14:9\n   |\n14 |         l[j] = temp;\n   |         ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    let mut res = Vec::new();\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l.push(l[i as usize]);\n    }\n    for i in 0..n {\n        l.remove(0);\n    }\n    for i in 0..res.len() {\n        l.push(res[i]);\n    }\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 6, 52, 36, 5, 6, 52, 36, 12, 10]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpbdb6ef0e.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l.push(l[i as usize]);\n    }\n    l.truncate(n as usize);\n    res.append(&mut l);\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 12, 10]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpv8dxz__6.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp22i_ptp_.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = 0;\n    }\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut res = Vec::new();\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l.push(l[i as usize]);\n    }\n    for i in 0..n {\n        l.remove(0);\n    }\n    res.append(&mut l);\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpwo6wf9f3.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = 0;\n    }\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut n = n as usize;\n    let mut res = Vec::new();\n    for i in 0..n {\n        res.push(l[i]);\n    }\n    for i in n..l.len() {\n        l.push(l[i]);\n    }\n    l.truncate(n);\n    res.append(&mut l);\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 12, 10]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpis6qrj9x.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..l.len() {\n        if i < n as usize {\n            l1.push(l[i]);\n        } else {\n            l2.push(l[i]);\n        }\n    }\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut i = 0;\n    let mut temp = 0;\n    while i < n {\n        temp = l[0];\n        l.remove(0);\n        l.push(temp);\n        i += 1;\n    }\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    let mut i = 0;\n    while i < n {\n        res.push(l[i as usize]);\n        i += 1;\n    }\n    let mut j = n;\n    while j < l.len() as isize {\n        l.push(l[j as usize]);\n        j += 1;\n    }\n    l.truncate(n as usize);\n    res.append(&mut l);\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    let mut l3 = Vec::new();\n    for i in 0..n {\n        l1.push(l[i]);\n    }\n    for i in n..l.len() {\n        l2.push(l[i]);\n    }\n    l3.append(&mut l2);\n    l3.append(&mut l1);\n    l3\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpklf82b_e.rs:8:17\n  |\n8 |         l1.push(l[i]);\n  |                 ^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpklf82b_e.rs:10:17\n   |\n10 |     for i in n..l.len() {\n   |                 ^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpklf82b_e.rs:11:17\n   |\n11 |         l2.push(l[i]);\n   |                 ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in n..l.len() as isize {\n        res.push(l[i as usize]);\n    }\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut f = l.split_off(n as usize);\n    l.append(&mut f);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpvrmnf7yi.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..l.len() {\n        if i < n as usize {\n            l1.push(l[i]);\n        } else {\n            l2.push(l[i]);\n        }\n    }\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp632tp5fs.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l1 = l.split_off(n as usize);\n    l1.append(&mut l);\n    l1\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l1 = l.split_off(n as usize);\n    l1.append(&mut l);\n    l1\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..l.len() {\n        if i < n as usize {\n            l1.push(l[i]);\n        } else {\n            l2.push(l[i]);\n        }\n    }\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in n..l.len() as isize {\n        res.push(l[i as usize]);\n    }\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l.push(l[i as usize]);\n    }\n    for i in 0..n {\n        l.remove(0);\n    }\n    res.append(&mut l);\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpixhub_c_.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n >= l.len() as isize {\n        return l;\n    }\n    let mut l1 = Vec::new();\n    for i in 0..n {\n        l1.push(l[i as usize]);\n    }\n    l.splice(0..n as usize, l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmppmr4je4l.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    let mut l_len = l.len();\n    if n > l_len as isize {\n        n = l_len as isize;\n    }\n    let mut l_first = l.split_off(n as usize);\n    l.append(&mut l_first);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp0sbwcg77.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l1 = l.split_off(n as usize);\n    l1.append(&mut l);\n    l1\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp632tp5fs.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..n {\n        l1.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l2.push(l[i as usize]);\n    }\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in n..l.len() {\n        res.push(l[i as usize]);\n    }\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpbivz_w_w.rs:9:17\n  |\n9 |     for i in n..l.len() {\n  |                 ^^^^^^^ expected `isize`, found `usize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n >= l.len() as isize {\n        return l;\n    }\n    let mut temp = l[n as usize];\n    l.remove(n as usize);\n    l.push(temp);\n    return l;\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 6, 52, 36, 5]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp65j13jm4.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut res = Vec::new();\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l[i as usize - n as usize] = l[i as usize];\n    }\n    for i in 0..n {\n        l[l.len() - n as usize + i as usize] = res[i as usize];\n    }\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `l` as immutable because it is also borrowed as mutable\n  --> /tmp/tmp0cz619m_.rs:16:11\n   |\n16 |         l[l.len() - n as usize + i as usize] = res[i as usize];\n   |         --^^^^^^^---------------------------\n   |         | |\n   |         | immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmp0cz619m_.rs:16:11\n   |\n16 |         l[l.len() - n as usize + i as usize] = res[i as usize];\n   |           ^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmp0cz619m_.rs:16:9\n   |\n16 |         l[l.len() - n as usize + i as usize] = res[i as usize];\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut res = Vec::new();\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l.push(l[i as usize]);\n    }\n    for i in 0..n {\n        l.remove(0);\n    }\n    res.append(&mut l);\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmphcx2o1lf.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut temp = l.split_off(n as usize);\n    l.append(&mut temp);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpxkqse0ax.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    let mut i = 0;\n    while i < n {\n        l1.push(l[i as usize]);\n        i += 1;\n    }\n    i = n;\n    while i < l.len() as isize {\n        l2.push(l[i as usize]);\n        i += 1;\n    }\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in n..l.len() as isize {\n        res.push(l[i as usize]);\n    }\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut res = Vec::new();\n    let mut i = 0;\n    while i < n {\n        res.push(l[i as usize]);\n        i += 1;\n    }\n    let mut i = n;\n    while i < l.len() as isize {\n        l.push(l[i as usize]);\n        i += 1;\n    }\n    l.truncate(n as usize);\n    res.append(&mut l);\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..n {\n        l1.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l2.push(l[i as usize]);\n    }\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..l.len() {\n        if i < n as usize {\n            l1.push(l[i]);\n        } else {\n            l2.push(l[i]);\n        }\n    }\n    l1.append(&mut l2);\n    l1\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpv2pfyw5r.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..l.len() {\n        if i < n as usize {\n            l1.push(l[i]);\n        } else {\n            l2.push(l[i]);\n        }\n    }\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut a = l.split_off(n as usize);\n    l.append(&mut a);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp7oiehq4v.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut res = l.clone();\n    let mut i = n as usize;\n    while i < l.len() {\n        res.push(l[i]);\n        i += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpcynne814.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in 0..l.len() {\n        if i == n as usize {\n            res.append(&mut l[i..].to_vec());\n            res.append(&mut l[..i].to_vec());\n            break;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp632tp5fs.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l_1 = Vec::new();\n    let mut l_2 = Vec::new();\n    for i in 0..l.len() {\n        if i < n as usize {\n            l_1.push(l[i]);\n        } else {\n            l_2.push(l[i]);\n        }\n    }\n    l_2.append(&mut l_1);\n    l_2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut new_l = l.clone();\n    let mut first_part = Vec::new();\n    let mut second_part = Vec::new();\n    for i in 0..n {\n        first_part.push(new_l[i]);\n    }\n    for i in n..new_l.len() {\n        second_part.push(new_l[i]);\n    }\n    second_part.extend(first_part);\n    second_part\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmphfxhlv1v.rs:7:25\n  |\n7 |         first_part.push(new_l[i]);\n  |                         ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmphfxhlv1v.rs:9:17\n  |\n9 |     for i in n..new_l.len() {\n  |                 ^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphfxhlv1v.rs:10:26\n   |\n10 |         second_part.push(new_l[i]);\n   |                          ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp632tp5fs.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut i = 0;\n    let mut j = 0;\n    let mut temp = 0;\n    while i < n {\n        temp = l[i];\n        l[i] = l[n + j];\n        l[n + j] = temp;\n        i += 1;\n        j += 1;\n    }\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp0vhe0yzx.rs:8:16\n  |\n8 |         temp = l[i];\n  |                ^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp0vhe0yzx.rs:9:9\n  |\n9 |         l[i] = l[n + j];\n  |         ^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp0vhe0yzx.rs:9:16\n  |\n9 |         l[i] = l[n + j];\n  |                ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp0vhe0yzx.rs:10:9\n   |\n10 |         l[n + j] = temp;\n   |         ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    let len = l.len();\n    if n < 0 {\n        n = len as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in 0..len {\n        if i < n as usize {\n            res.push(l[i]);\n        } else {\n            l.push(l[i]);\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpfecwnyh2.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res: Vec<isize> = Vec::new();\n    for i in n..l.len() as isize {\n        res.push(l[i as usize]);\n    }\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut new_l = Vec::new();\n    for i in 0..n {\n        new_l.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l.push(l[i as usize]);\n    }\n    for i in 0..n {\n        l.remove(0);\n    }\n    l.append(&mut new_l);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 6, 52, 36, 5, 6, 52, 36, 12, 10]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpo1_38xh6.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    let len = l.len();\n    if n > len as isize {\n        n = n % len as isize;\n    }\n    let mut res = Vec::new();\n    for i in 0..len {\n        if i < n as usize {\n            res.push(l[i]);\n        } else {\n            l.push(l[i]);\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp7phq0jta.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp632tp5fs.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let n = n as usize;\n    let mut tmp = Vec::new();\n    for i in 0..n {\n        tmp.push(l[i]);\n    }\n    for i in 0..n {\n        l.push(tmp[i]);\n    }\n    for _ in 0..n {\n        l.remove(0);\n    }\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..l.len() {\n        if i < n as usize {\n            l1.push(l[i]);\n        } else {\n            l2.push(l[i]);\n        }\n    }\n    l1.append(&mut l2);\n    l1\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpv2pfyw5r.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp632tp5fs.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in n..l.len() as isize {\n        res.push(l[i as usize]);\n    }\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..l.len() {\n        if i < n as usize {\n            l1.push(l[i]);\n        } else {\n            l2.push(l[i]);\n        }\n    }\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = 0;\n    }\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut tmp = Vec::new();\n    for i in 0..n {\n        tmp.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l[(i - n) as usize] = l[i as usize];\n    }\n    for i in 0..tmp.len() {\n        l[(l.len() - tmp.len() + i) as usize] = tmp[i];\n    }\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `l` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpz5vaw7oq.rs:19:12\n   |\n19 |         l[(l.len() - tmp.len() + i) as usize] = tmp[i];\n   |         ---^^^^^^^---------------------------\n   |         |  |\n   |         |  immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpz5vaw7oq.rs:19:12\n   |\n19 |         l[(l.len() - tmp.len() + i) as usize] = tmp[i];\n   |            ^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpz5vaw7oq.rs:19:9\n   |\n19 |         l[(l.len() - tmp.len() + i) as usize] = tmp[i];\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut res = l.clone();\n    let mut i = 0;\n    while i < n {\n        let tmp = res.remove(0);\n        res.push(tmp);\n        i += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = 0;\n    }\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut ret = Vec::new();\n    for i in 0..n {\n        ret.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l.push(l[i as usize]);\n    }\n    for i in 0..n {\n        l.remove(0);\n    }\n    ret.append(&mut l);\n    ret\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpt40bdfmx.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = 0;\n    }\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmplkqk4nxo.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l2 = l.split_off(n as usize);\n    l.append(&mut l2);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp6u3vpzs_.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l.push(l[i as usize]);\n    }\n    for i in 0..n {\n        l.remove(0);\n    }\n    l.append(&mut res);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 6, 52, 36, 5, 6, 52, 36, 12, 10]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp75_k8lmo.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut first = l.split_off(n as usize);\n    l.append(&mut first);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmprchnu5qb.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut new_l = l.clone();\n    let mut new_l2 = l.clone();\n    new_l.split_off(n as usize);\n    new_l2.append(&mut new_l);\n    new_l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36, 12, 10]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp7j1pqyoh.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = 0;\n    }\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut l2 = l.split_off(n as usize);\n    l.append(&mut l2);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp84zpi_3p.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..n {\n        l1.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l2.push(l[i as usize]);\n    }\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in n..l.len() {\n        res.push(l[i as usize]);\n    }\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpbivz_w_w.rs:9:17\n  |\n9 |     for i in n..l.len() {\n  |                 ^^^^^^^ expected `isize`, found `usize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    let mut l3 = Vec::new();\n    let mut l4 = Vec::new();\n    let mut l5 = Vec::new();\n    let mut l6 = Vec::new();\n    let mut l7 = Vec::new();\n    let mut l8 = Vec::new();\n    let mut l9 = Vec::new();\n    let mut l10 = Vec::new();\n    let mut l11 = Vec::new();\n    let mut l12 = Vec::new();\n    let mut l13 = Vec::new();\n    let mut l14 = Vec::new();\n    let mut l15 = Vec::new();\n    let mut l16 = Vec::new();\n    let mut l17 = Vec::new();\n    let mut l18 = Vec::new();\n    let mut l19 = Vec::new();\n    let mut l20 = Vec::new();\n    let mut l21 = Vec::new();\n    let mut l22 = Vec::new();\n    let mut l23 = Vec::new();\n    let mut l24 = Vec::new();\n    let mut l25 = Vec::new();\n    let mut l26 = Vec::new();\n    let mut l27 = Vec::new();\n    let mut l28 = Vec::new();\n    let mut l29 = Vec::new();\n    let mut l30 = Vec::new();\n    let mut l31 = Vec::new();\n    let mut l32 = Vec::new();\n    let mut l33 = Vec::new();\n    let mut l34 = Vec::new();\n    let mut l35 = Vec::new();\n    let mut l36 = Vec::new();\n    let mut l37 = Vec::new();\n    let mut l38 = Vec::new();\n    let mut l39 = Vec::new();\n    let mut l40 = Vec::new();\n    let mut l41 = Vec::new();\n    let mut l42 = Vec::new();\n    let mut l43 = Vec::new();\n    let mut l44 = Vec::new();\n    let mut l45 = Vec::new();\n    let mut l46 = Vec::\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "error: expected identifier, found `}`\n  --> /tmp/tmpuykiy9ul.rs:50:1\n   |\n50 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = 0;\n    }\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmplkqk4nxo.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut new_l = l.clone();\n    let mut i = 0;\n    while i < n {\n        new_l.push(l[i]);\n        i += 1;\n    }\n    new_l.drain(0..n as usize);\n    new_l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpf59pf5q9.rs:6:20\n  |\n6 |         new_l.push(l[i]);\n  |                    ^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut res = Vec::new();\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    for i in n..l.len() as isize {\n        l.push(l[i as usize]);\n    }\n    for i in 0..n {\n        l.remove(0);\n    }\n    res.append(&mut l);\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp1rbucne4.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpqwif6hzn.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut res = l.clone();\n    let (left, right) = res.split_at_mut(n as usize);\n    let mut left = left.to_vec();\n    let mut right = right.to_vec();\n    left.append(&mut right);\n    left\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp22hnmrjl.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..l.len() {\n        if i < n as usize {\n            l1.push(l[i]);\n        } else {\n            l2.push(l[i]);\n        }\n    }\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmpqwif6hzn.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut l1 = Vec::new();\n    let mut l2 = Vec::new();\n    for i in 0..l.len() {\n        if i < n as usize {\n            l1.push(l[i]);\n        } else {\n            l2.push(l[i]);\n        }\n    }\n    l2.append(&mut l1);\n    l2\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut v = l.clone();\n    let mut v2 = v.split_off(n as usize);\n    v.append(&mut v2);\n    v\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp1bfx2xzq.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for _ in 0..n {\n        res.push(l.remove(0));\n    }\n    l.append(&mut res);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut l1 = l.split_off(n as usize);\n    l.append(&mut l1);\n    l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[12, 10, 5, 6, 52, 36]`,\n right: `[5, 6, 52, 36, 12, 10]`', /tmp/tmp632tp5fs.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n < 0 {\n        n = l.len() as isize + n;\n    }\n    let mut res = Vec::new();\n    for i in n..l.len() as isize {\n        res.push(l[i as usize]);\n    }\n    for i in 0..n {\n        res.push(l[i as usize]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut l = l;\n    let mut n = n;\n    if n > l.len() as isize {\n        n = l.len() as isize;\n    }\n    let mut new_l = Vec::new();\n    for i in n..l.len() as isize {\n        new_l.push(l[i as usize]);\n    }\n    for i in 0..n {\n        new_l.push(l[i as usize]);\n    }\n    new_l\n}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}