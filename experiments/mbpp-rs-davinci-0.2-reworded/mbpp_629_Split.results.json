{
  "name": "mbpp_629_Split",
  "language": "rs",
  "prompt": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for num in list {\n        if num % 2 == 0 {\n            even_list.push(num);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    return evens;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    let mut odds = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        } else {\n            odds.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for num in list {\n        if num % 2 == 0 {\n            even_list.push(num);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    list.iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpb5sh285y.rs:3:30\n  |\n3 |     list.iter().filter(|x| x % 2 == 0).collect()\n  |                            - ^ - {integer}\n  |                            |\n  |                            &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference `x`\n  |\n3 |     list.iter().filter(|x| *x % 2 == 0).collect()\n  |                            +\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpb5sh285y.rs:3:40\n     |\n3    |     list.iter().filter(|x| x % 2 == 0).collect()\n     |                                        ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0369.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for num in list {\n        if num % 2 == 0 {\n            even_list.push(num);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for num in list {\n        if num % 2 == 0 {\n            even.push(num);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    return even;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for item in list {\n        if item % 2 == 0 {\n            even_list.push(item);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for num in list {\n        if num % 2 == 0 {\n            even_list.push(num);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    return evens;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for num in list {\n        if num % 2 == 0 {\n            even_list.push(num);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    return even;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for num in list {\n        if num % 2 == 0 {\n            evens.push(num);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for x in list {\n        if x % 2 == 0 {\n            even.push(x);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for num in list {\n        if num % 2 == 0 {\n            even_list.push(num);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for num in list {\n        if num % 2 == 0 {\n            evens.push(num);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for num in list {\n        if num % 2 == 0 {\n            even_list.push(num);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for num in list {\n        if num % 2 == 0 {\n            evens.push(num);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}