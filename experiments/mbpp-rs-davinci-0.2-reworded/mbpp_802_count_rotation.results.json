{
  "name": "mbpp_802_count_rotation",
  "language": "rs",
  "prompt": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    while low < high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmptrjtwoxw.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = low + (high - low) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpz551lnhn.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut min = arr[0];\n    let mut count = 0;\n    for i in 1..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            count = i as isize;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpaggik7rf.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] < arr[j] {\n            return count;\n        }\n        i += 1;\n        j -= 1;\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `2`', /tmp/tmpfa3bk92d.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = (low + high) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut min = arr[0];\n    let mut min_index = 0;\n    for i in 1..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            min_index = i as isize;\n        }\n    }\n    min_index\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp3ix3l2td.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    let mut prev = 0;\n    let mut next = 0;\n    let mut n = arr.len();\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        next = (mid + 1) % n;\n        prev = (mid + n - 1) % n;\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = low + (high - low) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpz551lnhn.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = low + (high - low) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpz551lnhn.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = (low + high) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmplf5l9d9v.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut min = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            count = i as isize;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpt0vpe74y.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut mid = 0;\n\n    while left <= right {\n        if arr[left] <= arr[right] {\n            return left as isize;\n        }\n\n        mid = (left + right) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[right] {\n            right = mid - 1;\n        } else if arr[mid] >= arr[left] {\n            left = mid + 1;\n        }\n    }\n\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] > arr[j] {\n            count += 1;\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpdvc69o3a.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = low + (high - low) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low as isize;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppore5cod.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low < high {\n        mid = (low + high) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpcj244yua.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = low + (high - low) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpz551lnhn.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut min = arr[0];\n    let mut min_index = 0;\n    for i in 1..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            min_index = i as isize;\n        }\n    }\n    min_index\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp3ix3l2td.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n\n        mid = (low + high) / 2;\n    }\n\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp3j745o_9.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut min = arr[0];\n    let mut min_index = 0;\n    for i in 0..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            min_index = i as isize;\n        }\n    }\n    min_index\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp__l8jgjc.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        if arr[i] > arr[i + 1] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmpja11qbnb.rs:5:21\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n\n        mid = (low + high) / 2;\n    }\n\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp3j745o_9.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut min = arr[0];\n    let mut min_index = 0;\n    for i in 1..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            min_index = i as isize;\n        }\n    }\n    min_index\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp3ix3l2td.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] > arr[j] {\n            count += 1;\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpdvc69o3a.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = (low + high) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmplf5l9d9v.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = low + (high - low) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpz551lnhn.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = (low + high) / 2;\n        if arr[mid] < arr[high] {\n            high = mid;\n        } else {\n            low = mid + 1;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpn31likvj.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut min = arr[0];\n    let mut min_index = 0;\n    for i in 1..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            min_index = i as isize;\n        }\n    }\n    min_index\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp3ix3l2td.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] <= arr[j] {\n            return count;\n        }\n        let mid = (i + j) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[j] {\n            j = mid - 1;\n        } else if arr[mid] >= arr[i] {\n            i = mid + 1;\n        }\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low < high {\n        mid = (low + high) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low as isize;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpadmksehw.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    let mut next = 0;\n    let mut prev = 0;\n\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n\n        mid = (low + high) / 2;\n        next = (mid + 1) % arr.len();\n        prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpt8rjefkp.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut start = 0;\n    let mut end = arr.len() - 1;\n    let mut mid = 0;\n    while start < end {\n        mid = start + (end - start) / 2;\n        if arr[mid] > arr[end] {\n            start = mid + 1;\n        } else {\n            end = mid;\n        }\n    }\n    start as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpqdq923ls.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = (low + high) / 2;\n        if arr[mid] < arr[high] {\n            high = mid;\n        } else {\n            low = mid + 1;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpn31likvj.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = low + (high - low) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpz551lnhn.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut min = arr[0];\n    for i in 0..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            count = i as isize;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpj6ovqlbi.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut min = arr[0];\n    let mut min_index = 0;\n    for i in 1..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            min_index = i as isize;\n        }\n    }\n    min_index\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp3ix3l2td.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n\n        mid = (low + high) / 2;\n    }\n\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp3j745o_9.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = (low + high) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmplf5l9d9v.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpt8rjefkp.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = (low + high) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low as isize;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpu05r9myy.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = (low + high) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmplf5l9d9v.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut min = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            count = i as isize;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpt0vpe74y.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = low + (high - low) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpz551lnhn.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp63gk3mtf.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n\n        let mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = low + (high - low) / 2;\n        if arr[mid] < arr[high] {\n            high = mid;\n        } else if arr[mid] > arr[high] {\n            low = mid + 1;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpcaebi3ai.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpt8rjefkp.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = low + (high - low) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpz551lnhn.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n\n        mid = (low + high) / 2;\n    }\n\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp3j745o_9.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid;\n\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n\n        mid = (low + high) / 2;\n    }\n\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp3j745o_9.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] < arr[i + 1] {\n            i += 1;\n        } else if arr[j] > arr[j - 1] {\n            j -= 1;\n        } else {\n            count += 1;\n            i += 1;\n            j -= 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmp10zd_b1e.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] > arr[j] {\n            count += 1;\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpdvc69o3a.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        if arr[i] > arr[i + 1] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmpja11qbnb.rs:5:21\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low < high {\n        mid = low + (high - low) / 2;\n\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppu5ys3n8.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut min = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            count = i as isize;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpt0vpe74y.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut min = arr[0];\n    for i in 0..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            count = i as isize;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpj6ovqlbi.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut min = arr[0];\n    let mut min_index = 0;\n    for i in 1..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            min_index = i as isize;\n        }\n    }\n    min_index\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp3ix3l2td.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n\n        mid = (low + high) / 2;\n    }\n\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp3j745o_9.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut min = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            count = i as isize;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpt0vpe74y.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp63gk3mtf.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        if arr[low] < arr[high] {\n            return low as isize;\n        }\n        mid = (low + high) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut min = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            count = i as isize;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpt0vpe74y.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low < high {\n        mid = (low + high) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low as isize;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpadmksehw.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp63gk3mtf.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n\n        mid = (low + high) / 2;\n    }\n\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp3j745o_9.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = (low + high) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low as isize;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpu05r9myy.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    let mut n = arr.len();\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut min = arr[0];\n    for i in 0..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            count = i as isize;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpj6ovqlbi.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low < high {\n        if arr[low] < arr[high] {\n            return low as isize;\n        }\n        mid = (low + high) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut min = arr[0];\n    let mut min_index = 0;\n    for (i, &x) in arr.iter().enumerate() {\n        if x < min {\n            min = x;\n            min_index = i;\n        }\n    }\n    min_index as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmps2xentas.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        if arr[low] < arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpt8rjefkp.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n\n    while i < j {\n        if arr[i] < arr[j] {\n            return count;\n        }\n\n        let mid = (i + j) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return count + mid as isize;\n        } else if arr[mid] <= arr[j] {\n            j = mid - 1;\n        } else if arr[mid] >= arr[i] {\n            i = mid + 1;\n        }\n    }\n\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut min = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            count = i as isize;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpt0vpe74y.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = (low + high) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = (low + high) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmplf5l9d9v.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = (low + high) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmplf5l9d9v.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n\n        mid = (low + high) / 2;\n    }\n\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp3j745o_9.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = low + (high - low) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else if arr[mid] < arr[high] {\n            high = mid;\n        } else {\n            high -= 1;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmplsa8h1gk.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] > arr[i + 1] {\n            count = i + 1;\n            break;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp4jx76ny2.rs:13:5\n   |\n2  | fn count_rotation(arr: Vec<isize>) -> isize {\n   |                                       ----- expected `isize` because of return type\n...\n13 |     count\n   |     ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n13 |     count.try_into().unwrap()\n   |          ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut min = arr[0];\n    for i in 0..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            count = i as isize;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpj6ovqlbi.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp63gk3mtf.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut min = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            count = i as isize;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpt0vpe74y.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = low + (high - low) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpz551lnhn.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut min = arr[0];\n    for i in 0..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            count = i as isize;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpj6ovqlbi.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut min = arr[0];\n    for i in 0..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            count = i as isize;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpj6ovqlbi.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = low + (high - low) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpz551lnhn.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = (low + high) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmplf5l9d9v.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut min = arr[0];\n    let mut min_index = 0;\n    for i in 1..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            min_index = i as isize;\n        }\n    }\n    min_index\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp3ix3l2td.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp63gk3mtf.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid;\n\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut min = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            count = i as isize;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpt0vpe74y.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n\n        mid = (low + high) / 2;\n    }\n\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpouz8kims.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    let mut n = arr.len();\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n\n        mid = (low + high) / 2;\n    }\n\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp3j745o_9.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n        mid = (low + high) / 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppbfr2g9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] < arr[j] {\n            count += 1;\n            break;\n        }\n        i += 1;\n        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `1`', /tmp/tmpgnz4a2k6.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n\n        let mut next = (mid + 1) % arr.len();\n        let mut prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n\n        mid = (low + high) / 2;\n    }\n\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpouz8kims.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low < high {\n        mid = low + (high - low) / 2;\n\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmppu5ys3n8.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut min = arr[0];\n    for i in 0..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            count = i as isize;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpj6ovqlbi.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        if arr[low] < arr[high] {\n            return low as isize;\n        }\n        mid = (low + high) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low < high {\n        mid = (low + high) / 2;\n        if arr[mid] > arr[high] {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp3ierj94d.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut min = arr[0];\n    let mut min_index = 0;\n    for i in 1..arr.len() {\n        if arr[i] < min {\n            min = arr[i];\n            min_index = i as isize;\n        }\n    }\n    min_index\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp3ix3l2td.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n\n    while low < high {\n        if arr[low] <= arr[high] {\n            return low as isize;\n        }\n\n        mid = low + (high - low) / 2;\n        let next = (mid + 1) % arr.len();\n        let prev = (mid + arr.len() - 1) % arr.len();\n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid as isize;\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1;\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1;\n        }\n    }\n\n    return -1;\n}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    }
  ]
}