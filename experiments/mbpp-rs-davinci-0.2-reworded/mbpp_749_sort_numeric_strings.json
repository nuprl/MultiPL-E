{
  "name": "mbpp_749_sort_numeric_strings",
  "language": "rs",
  "prompt": "/// Write a function to sort a given vector of strings of numbers numerically. https://www.geeksforgeeks.org/rsthon-sort-numeric-strings-in-a-vector/\nfn sort_numeric_strings(nums_str: Vec<String>) -> Vec<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = sort_numeric_strings;\n    assert_eq!(candidate(vec![String::from(\"4\"), String::from(\"12\"), String::from(\"45\"), String::from(\"7\"), String::from(\"0\"), String::from(\"100\"), String::from(\"200\"), String::from(\"-12\"), String::from(\"-500\")]), vec![-500, -12, 0, 4, 7, 12, 45, 100, 200]);\n    assert_eq!(candidate(vec![String::from(\"2\"), String::from(\"3\"), String::from(\"8\"), String::from(\"4\"), String::from(\"7\"), String::from(\"9\"), String::from(\"8\"), String::from(\"2\"), String::from(\"6\"), String::from(\"5\"), String::from(\"1\"), String::from(\"6\"), String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"6\"), String::from(\"9\"), String::from(\"1\"), String::from(\"2\")]), vec![1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]);\n    assert_eq!(candidate(vec![String::from(\"1\"), String::from(\"3\"), String::from(\"5\"), String::from(\"7\"), String::from(\"1\"), String::from(\"3\"), String::from(\"13\"), String::from(\"15\"), String::from(\"17\"), String::from(\"5\"), String::from(\"7 \"), String::from(\"9\"), String::from(\"1\"), String::from(\"11\")]), vec![1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|n| n.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str\n        .iter()\n        .map(|s| s.parse::<isize>().unwrap())\n        .collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums_str = nums_str;\n    nums_str.sort_by(|a, b| {\n        let a_num: isize = a.parse().unwrap();\n        let b_num: isize = b.parse().unwrap();\n        a_num.cmp(&b_num)\n    });\n    nums_str\n        .iter()\n        .map(|num_str| num_str.parse::<isize>().unwrap())\n        .collect()",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = Vec::new();\n    for num_str in nums_str {\n        nums.push(num_str.parse::<isize>().unwrap());\n    }\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str\n        .iter()\n        .map(|num_str| num_str.parse::<isize>().unwrap())\n        .collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str\n        .iter()\n        .map(|s| s.parse::<isize>().unwrap())\n        .collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str\n        .iter()\n        .map(|s| s.parse::<isize>().unwrap())\n        .collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str\n        .iter()\n        .map(|s| s.parse::<isize>().unwrap())\n        .collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str\n        .iter()\n        .map(|s| s.parse::<isize>().unwrap())\n        .collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str\n        .iter()\n        .map(|s| s.parse::<isize>().unwrap())\n        .collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str\n        .iter()\n        .map(|s| s.parse::<isize>().unwrap())\n        .collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str\n        .iter()\n        .map(|s| s.parse::<isize>().unwrap())\n        .collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str\n        .iter()\n        .map(|s| s.parse::<isize>().unwrap())\n        .collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect::<Vec<isize>>()",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect::<Vec<isize>>();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect::<Vec<isize>>();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str\n        .iter()\n        .map(|s| s.parse::<isize>().unwrap())\n        .collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = Vec::new();\n    for num_str in nums_str {\n        nums.push(num_str.parse::<isize>().unwrap());\n    }\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = Vec::new();\n    for num in nums_str {\n        nums.push(num.parse::<isize>().unwrap());\n    }\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str\n        .iter()\n        .map(|s| s.parse::<isize>().unwrap())\n        .collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums",
    "    let mut nums: Vec<isize> = nums_str.iter().map(|x| x.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums"
  ]
}