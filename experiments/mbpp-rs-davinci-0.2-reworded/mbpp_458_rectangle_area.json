{
  "name": "mbpp_458_rectangle_area",
  "language": "rs",
  "prompt": "/// Write a function to find the area of a rectangle.\nfn rectangle_area(l: isize, b: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_458_rectangle_area.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = rectangle_area;\n    assert_eq!(candidate(10, 20), 200);\n    assert_eq!(candidate(10, 5), 50);\n    assert_eq!(candidate(4, 2), 8);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b",
    "    l * b"
  ]
}