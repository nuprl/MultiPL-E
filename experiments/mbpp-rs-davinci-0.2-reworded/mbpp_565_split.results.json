{
  "name": "mbpp_565_split",
  "language": "rs",
  "prompt": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = vec![];\n    let mut chars = word.chars();\n    while let Some(c) = chars.next() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for c in word.chars() {\n        vec.push(c.to_string());\n    }\n    vec\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for c in word.chars() {\n        vec.push(c.to_string());\n    }\n    vec\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for c in word.chars() {\n        vec.push(c.to_string());\n    }\n    vec\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut vec: Vec<String> = Vec::new();\n    for c in word.chars() {\n        vec.push(c.to_string());\n    }\n    vec\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = vec![];\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result: Vec<String> = vec![];\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    word.chars().map(|c| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}