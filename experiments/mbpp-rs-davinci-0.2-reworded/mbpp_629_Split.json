{
  "name": "mbpp_629_Split",
  "language": "rs",
  "prompt": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut evens: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens",
    "    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even",
    "    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list",
    "    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;",
    "    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list",
    "    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;",
    "    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;",
    "    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list",
    "    let mut even_list: Vec<isize> = Vec::new();\n    for num in list {\n        if num % 2 == 0 {\n            even_list.push(num);\n        }\n    }\n    even_list",
    "    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list",
    "    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list",
    "    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;",
    "    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list",
    "    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list",
    "    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens",
    "    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list",
    "    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list",
    "    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens",
    "    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list",
    "    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list"
  ]
}