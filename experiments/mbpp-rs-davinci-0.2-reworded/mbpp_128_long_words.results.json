{
  "name": "mbpp_128_long_words",
  "language": "rs",
  "prompt": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut words = str.split_whitespace();\n    let mut result = Vec::new();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut v: Vec<String> = Vec::new();\n    let mut s: Vec<&str> = str.split_whitespace().collect();\n    for i in 0..s.len() {\n        if s[i].len() as isize > n {\n            v.push(s[i].to_string());\n        }\n    }\n    return v;\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut v: Vec<String> = Vec::new();\n    let mut s: Vec<&str> = str.split_whitespace().collect();\n    for i in s {\n        if i.len() as isize > n {\n            v.push(i.to_string());\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut words = str.split_whitespace();\n    let mut result = Vec::new();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut vec: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in str.chars() {\n        if c == ' ' {\n            if word.len() as isize > n {\n                vec.push(word);\n            }\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    if word.len() as isize > n {\n        vec.push(word);\n    }\n    vec\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut vec: Vec<String> = Vec::new();\n    let split = str.split_whitespace();\n    for word in split {\n        if word.len() as isize > n {\n            vec.push(word.to_string());\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut vec: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            vec.push(word.to_string());\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut v: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in str.chars() {\n        if c == ' ' {\n            if word.len() as isize > n {\n                v.push(word);\n            }\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    if word.len() as isize > n {\n        v.push(word);\n    }\n    v\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    let mut word = String::new();\n    for c in str.chars() {\n        if c == ' ' {\n            if word.len() as isize > n {\n                result.push(word);\n            }\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    if word.len() as isize > n {\n        result.push(word);\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut words = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            words.push(word.to_string());\n        }\n    }\n    words\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            vec.push(word.to_string());\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            res.push(word.to_string());\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let words: Vec<&str> = str.split_whitespace().collect();\n    let mut long_words: Vec<String> = Vec::new();\n    for word in words {\n        if word.len() as isize > n {\n            long_words.push(word.to_string());\n        }\n    }\n    long_words\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut words = str.split_whitespace();\n    let mut result = Vec::new();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let words = str.split_whitespace().collect::<Vec<&str>>();\n    let mut result = Vec::new();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut res = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            res.push(word.to_string());\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut words = str.split_whitespace();\n    let mut long_words = Vec::new();\n    for word in words {\n        if word.len() as isize > n {\n            long_words.push(word.to_string());\n        }\n    }\n    long_words\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    let mut word = String::new();\n    for c in str.chars() {\n        if c == ' ' {\n            if word.len() as isize > n {\n                vec.push(word);\n            }\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    if word.len() as isize > n {\n        vec.push(word);\n    }\n    vec\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            res.push(word.to_string());\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let mut words = str.split_whitespace();\n    while let Some(word) = words.next() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    str.split_whitespace()\n        .filter(|&word| word.len() as isize > n)\n        .map(|word| word.to_string())\n        .collect()\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut words = str.split_whitespace();\n    let mut long_words = vec![];\n    for word in words {\n        if word.len() as isize > n {\n            long_words.push(word.to_string());\n        }\n    }\n    long_words\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut words = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            words.push(word.to_string());\n        }\n    }\n    words\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    str.split_whitespace()\n        .filter(|word| word.len() as isize > n)\n        .map(|word| word.to_string())\n        .collect()\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut v: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            v.push(word.to_string());\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            vec.push(word.to_string());\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut vec: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            vec.push(word.to_string());\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut v: Vec<String> = Vec::new();\n    for i in str.split_whitespace() {\n        if i.len() as isize > n {\n            v.push(i.to_string());\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut v: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            v.push(word.to_string());\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words = str.split(\" \");\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut words = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            words.push(word.to_string());\n        }\n    }\n    words\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let mut words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    str.split_whitespace()\n        .filter(|&s| s.len() as isize > n)\n        .map(|s| s.to_string())\n        .collect()\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            vec.push(word.to_string());\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let words: Vec<&str> = str.split_whitespace().collect();\n    let mut long_words: Vec<String> = Vec::new();\n    for word in words {\n        if word.len() as isize > n {\n            long_words.push(word.to_string());\n        }\n    }\n    long_words\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut words = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            words.push(word.to_string());\n        }\n    }\n    words\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut words = str.split_whitespace();\n    let mut long_words = Vec::new();\n    for word in words {\n        if word.len() as isize > n {\n            long_words.push(word.to_string());\n        }\n    }\n    long_words\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut v: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            v.push(word.to_string());\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut vec: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            vec.push(word.to_string());\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut vec: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            vec.push(word.to_string());\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut v: Vec<String> = Vec::new();\n    let mut words = str.split_whitespace();\n    while let Some(word) = words.next() {\n        if word.len() as isize > n {\n            v.push(word.to_string());\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            vec.push(word.to_string());\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut v: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            v.push(word.to_string());\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let words: Vec<&str> = str.split_whitespace().collect();\n    let mut long_words: Vec<String> = Vec::new();\n    for word in words {\n        if word.len() as isize > n {\n            long_words.push(word.to_string());\n        }\n    }\n    long_words\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut words: Vec<String> = str.split_whitespace().map(|s| s.to_string()).collect();\n    words.retain(|s| s.len() as isize > n);\n    words\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    str.split_whitespace()\n        .filter(|word| word.len() as isize > n)\n        .map(|word| word.to_string())\n        .collect()\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = vec![];\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut words = str.split_whitespace();\n    let mut long_words = Vec::new();\n    for word in words {\n        if word.len() as isize > n {\n            long_words.push(word.to_string());\n        }\n    }\n    long_words\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            vec.push(word.to_string());\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut vec: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            vec.push(word.to_string());\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    let mut words = str.split_whitespace();\n    while let Some(word) = words.next() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut v: Vec<String> = Vec::new();\n    for i in str.split_whitespace() {\n        if i.len() as isize > n {\n            v.push(i.to_string());\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    str.split_whitespace()\n        .filter(|word| word.len() as isize > n)\n        .map(|word| word.to_string())\n        .collect()\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut words = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            words.push(word.to_string());\n        }\n    }\n    words\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut words = str.split_whitespace();\n    let mut long_words = Vec::new();\n    for word in words {\n        if word.len() as isize > n {\n            long_words.push(word.to_string());\n        }\n    }\n    long_words\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut words = str.split_whitespace();\n    let mut result = Vec::new();\n    while let Some(word) = words.next() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut res = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            res.push(word.to_string());\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for i in words {\n        if i.len() as isize > n {\n            res.push(i.to_string());\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut v: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            v.push(word.to_string());\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut vec: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in str.chars() {\n        if c == ' ' {\n            if word.len() as isize > n {\n                vec.push(word);\n            }\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    if word.len() as isize > n {\n        vec.push(word);\n    }\n    vec\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut words = Vec::new();\n    let mut word = String::new();\n    for c in str.chars() {\n        if c == ' ' {\n            if word.len() as isize > n {\n                words.push(word);\n            }\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    words\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[\"python\", \"programming\"]`,\n right: `[\"python\", \"programming\", \"language\"]`', /tmp/tmpv5abxsl_.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut res = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            res.push(word.to_string());\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut res = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            res.push(word.to_string());\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = vec![];\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for word in str.split(\" \") {\n        if word.len() as isize > n {\n            res.push(word.to_string());\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut words = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            words.push(word.to_string());\n        }\n    }\n    words\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut words = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            words.push(word.to_string());\n        }\n    }\n    words\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    let mut words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            res.push(word.to_string());\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            vec.push(word.to_string());\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut v = Vec::new();\n    for s in str.split_whitespace() {\n        if s.len() as isize > n {\n            v.push(s.to_string());\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut v: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            v.push(word.to_string());\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut vec: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            vec.push(word.to_string());\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            res.push(word.to_string());\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut res = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            res.push(word.to_string());\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut res = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            res.push(word.to_string());\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut vec: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            vec.push(word.to_string());\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut v: Vec<String> = Vec::new();\n    let mut s: String = String::new();\n    for c in str.chars() {\n        if c == ' ' {\n            if s.len() as isize > n {\n                v.push(s);\n            }\n            s = String::new();\n        } else {\n            s.push(c);\n        }\n    }\n    if s.len() as isize > n {\n        v.push(s);\n    }\n    v\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut v = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            v.push(word.to_string());\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            vec.push(word.to_string());\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut v = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            v.push(word.to_string());\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut vec: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            vec.push(word.to_string());\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let mut words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            res.push(word.to_string());\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for s in str.split_whitespace() {\n        if s.len() as isize > n {\n            vec.push(s.to_string());\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut v = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            v.push(word.to_string());\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut words: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in str.chars() {\n        if c == ' ' {\n            if word.len() as isize > n {\n                words.push(word);\n            }\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    if word.len() as isize > n {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut words = str.split_whitespace();\n    let mut result = Vec::new();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut v = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            v.push(word.to_string());\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let mut words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    str.split_whitespace()\n        .filter(|word| word.len() as isize > n)\n        .map(|word| word.to_string())\n        .collect()\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut words: Vec<String> = str.split_whitespace().map(|s| s.to_string()).collect();\n    words.retain(|s| s.len() as isize > n);\n    words\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut words = Vec::new();\n    let mut word = String::new();\n    for c in str.chars() {\n        if c == ' ' {\n            if word.len() as isize > n {\n                words.push(word);\n            }\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    if word.len() as isize > n {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            res.push(word.to_string());\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            res.push(word.to_string());\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut vec: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            vec.push(word.to_string());\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            vec.push(word.to_string());\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut vec: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            vec.push(word.to_string());\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    let words = str.split_whitespace().collect::<Vec<&str>>();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}