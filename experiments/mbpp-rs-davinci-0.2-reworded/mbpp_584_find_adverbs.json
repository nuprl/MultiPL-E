{
  "name": "mbpp_584_find_adverbs",
  "language": "rs",
  "prompt": "/// Write a function to find the first adverb ending with ly and its positions in a given string.\nfn find_adverbs(text: String) -> String {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = find_adverbs;\n    assert_eq!(candidate(String::from(\"Clearly, he has no excuse for such behavior.\")), String::from(\"0-7: Clearly\"));\n    assert_eq!(candidate(String::from(\"Please handle the situation carefuly\")), String::from(\"28-36: carefuly\"));\n    assert_eq!(candidate(String::from(\"Complete the task quickly\")), String::from(\"18-25: quickly\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut result = String::new();\n    let mut index = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result.push_str(&format!(\"{}:{} \", word, index));\n        }\n        index += 1;\n    }\n    result",
    "    let mut result = String::new();\n    let mut index = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result = format!(\"{} {}\", word, index);\n            break;\n        }\n        index += 1;\n    }\n    result",
    "    let mut result = String::new();\n    let mut adverbs = Vec::new();\n    let mut positions = Vec::new();\n    let words: Vec<&str> = text.split_whitespace().collect();\n    for (i, word) in words.iter().enumerate() {\n        if word.ends_with(\"ly\") {\n            adverbs.push(word);\n            positions.push(i);\n        }\n    }\n    if adverbs.len() > 0 {\n        result.push_str(&format!(\"{}\", adverbs[0]));\n        for i in 1..adverbs.len() {\n            result.push_str(&format!(\", {}\", adverbs[i]));\n        }\n        result.push_str(&format!(\" at positions: {}\", positions[0]));\n        for i in 1..positions.len() {\n            result.push_str(&format!(\", {}\", positions[i]));\n        }\n    } else {\n        result.push_str(\"No adverbs found\");\n    }\n    result",
    "    let mut result = String::new();\n    let mut iter = text.split_whitespace();\n    while let Some(word) = iter.next() {\n        if word.ends_with(\"ly\") {\n            result.push_str(&format!(\"{} \", word));\n        }\n    }\n    result",
    "    let mut result = String::new();\n    for (index, word) in text.split_whitespace().enumerate() {\n        if word.ends_with(\"ly\") {\n            result.push_str(&format!(\"{} {} \", word, index));\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut index = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result = format!(\"{} {}\", word, index);\n            break;\n        }\n        index += 1;\n    }\n    result",
    "    let mut result = String::new();\n    let mut iter = text.split_whitespace();\n    while let Some(word) = iter.next() {\n        if word.ends_with(\"ly\") {\n            result.push_str(word);\n            result.push_str(\" \");\n            result.push_str(&word.len().to_string());\n            result.push_str(\" \");\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut index = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result.push_str(&format!(\"{} {} \", word, index));\n        }\n        index += 1;\n    }\n    result",
    "    let mut result = String::new();\n    let mut index = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result = format!(\"{} {}\", word, index);\n            break;\n        }\n        index += 1;\n    }\n    result",
    "    let mut adverbs = Vec::new();\n    let mut positions = Vec::new();\n    let mut words = text.split_whitespace();\n    let mut i = 0;\n\n    while let Some(word) = words.next() {\n        if word.ends_with(\"ly\") {\n            adverbs.push(word.to_string());\n            positions.push(i);\n        }\n        i += 1;\n    }\n\n    let mut result = String::new();\n    for (i, adverb) in adverbs.iter().enumerate() {\n        result.push_str(&format!(\"{} {} \", adverb, positions[i]));\n    }\n\n    result",
    "    let mut result = String::new();\n    let mut index = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result.push_str(&format!(\"{} {}\", word, index));\n            break;\n        }\n        index += 1;\n    }\n    result",
    "    let mut result = String::new();\n    let mut adverbs = Vec::new();\n    let mut positions = Vec::new();\n    let mut index = 0;\n    let mut word = String::new();\n    for c in text.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n        } else {\n            if word.ends_with(\"ly\") {\n                adverbs.push(word.clone());\n                positions.push(index);\n            }\n            word.clear();\n        }\n        index += 1;\n    }\n    if word.ends_with(\"ly\") {\n        adverbs.push(word.clone());\n        positions.push(index);\n    }\n    if adverbs.len() > 0 {\n        result.push_str(&format!(\"{:?}\", adverbs));\n        result.push_str(&format!(\"{:?}\", positions));\n    }\n    result",
    "    let mut result = String::new();\n    let mut pos = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result = word.to_string();\n            break;\n        }\n        pos += word.len() + 1;\n    }\n    format!(\"{} {}\", result, pos)",
    "    let mut result = String::new();\n    let mut count = 0;\n    let mut pos = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result = word.to_string();\n            count += 1;\n            break;\n        }\n        pos += word.len() + 1;\n    }\n    if count == 0 {\n        return \"Not found\".to_string();\n    }\n    format!(\"{} {}\", result, pos)",
    "    let mut result = String::new();\n    let mut index = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result.push_str(&format!(\"{} {}\", word, index));\n            break;\n        }\n        index += 1;\n    }\n    result",
    "    let mut result = String::new();\n    let mut index = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result.push_str(&format!(\"{} {}\\n\", word, index));\n        }\n        index += 1;\n    }\n    result",
    "    let mut result = String::new();\n    let mut pos = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result = word.to_string();\n            break;\n        }\n        pos += word.len() + 1;\n    }\n    if result.is_empty() {\n        return \"No adverbs found\".to_string();\n    }\n    format!(\"{} {}\", result, pos)",
    "    let mut result = String::new();\n    let mut iter = text.split_whitespace();\n    while let Some(word) = iter.next() {\n        if word.ends_with(\"ly\") {\n            result.push_str(word);\n            result.push_str(\" \");\n            result.push_str(&word.len().to_string());\n            result.push_str(\" \");\n            result.push_str(&text.find(word).unwrap().to_string());\n            result.push_str(\" \");\n            result.push_str(&(text.find(word).unwrap() + word.len()).to_string());\n            break;\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut pos = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result = word.to_string();\n            break;\n        }\n        pos += word.len() + 1;\n    }\n    format!(\"{} {}\", result, pos)",
    "    let mut result = String::new();\n    let mut pos = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result = word.to_string();\n            break;\n        }\n        pos += word.len() + 1;\n    }\n    if result.is_empty() {\n        return \"No adverbs found\".to_string();\n    }\n    format!(\"{} at position {}\", result, pos)"
  ]
}