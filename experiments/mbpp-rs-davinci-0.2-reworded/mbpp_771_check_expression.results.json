{
  "name": "mbpp_771_check_expression",
  "language": "rs",
  "prompt": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpr62qbzvq.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpr62qbzvq.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpr62qbzvq.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '{' | '[' | '(' => stack.push(c),\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpr62qbzvq.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        if c == '(' || c == '{' || c == '[' {\n            stack.push(c);\n        } else {\n            if stack.is_empty() {\n                return false;\n            }\n            let top = stack.pop().unwrap();\n            if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                return false;\n            }\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '[' | '{' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '{' | '(' | '[' => stack.push(c),\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpl34yy825.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpr62qbzvq.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '{' | '[' | '(' => stack.push(c),\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        if c == '(' || c == '{' || c == '[' {\n            stack.push(c);\n        } else if c == ')' || c == '}' || c == ']' {\n            if stack.is_empty() {\n                return false;\n            }\n            let top = stack.pop().unwrap();\n            if !((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')) {\n                return false;\n            }\n        }\n    }\n    return stack.is_empty();\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => {\n                stack.push(c);\n            }\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    return stack.is_empty();\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmp5po_62j9.rs:14:21\n   |\n14 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpr62qbzvq.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    let mut balanced = true;\n\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    balanced = false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    balanced = false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    balanced = false;\n                }\n            }\n            _ => (),\n        }\n    }\n\n    balanced && stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        if c == '(' || c == '{' || c == '[' {\n            stack.push(c);\n        } else if c == ')' || c == '}' || c == ']' {\n            if stack.len() == 0 {\n                return false;\n            }\n            let top = stack.pop().unwrap();\n            if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                return false;\n            }\n        }\n    }\n    return stack.len() == 0;\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '{' | '[' | '(' => stack.push(c),\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if let Some(x) = stack.pop() {\n                    if x != '(' {\n                        return false;\n                    }\n                } else {\n                    return false;\n                }\n            }\n            '}' => {\n                if let Some(x) = stack.pop() {\n                    if x != '{' {\n                        return false;\n                    }\n                } else {\n                    return false;\n                }\n            }\n            ']' => {\n                if let Some(x) = stack.pop() {\n                    if x != '[' {\n                        return false;\n                    }\n                } else {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '{' | '[' | '(' => stack.push(c),\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpl34yy825.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for ch in exp.chars() {\n        match ch {\n            '(' | '{' | '[' => stack.push(ch),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpr62qbzvq.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    let mut balanced = true;\n    let mut index = 0;\n\n    while index < exp.len() && balanced {\n        let symbol = exp.chars().nth(index).unwrap();\n\n        if symbol == '(' || symbol == '[' || symbol == '{' {\n            stack.push(symbol);\n        } else if symbol == ')' || symbol == ']' || symbol == '}' {\n            if stack.is_empty() {\n                balanced = false;\n            } else {\n                let top = stack.pop().unwrap();\n                if !matches(top, symbol) {\n                    balanced = false;\n                }\n            }\n        }\n        index += 1;\n    }\n\n    if stack.is_empty() && balanced {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "error[E0423]: expected function, found macro `matches`\n  --> /tmp/tmpsbfppynl.rs:17:21\n   |\n17 |                 if !matches(top, symbol) {\n   |                     ^^^^^^^ not a function\n   |\nhelp: use `!` to invoke the macro\n   |\n17 |                 if !matches!(top, symbol) {\n   |                            +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '{' | '[' | '(' => stack.push(c),\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpmbi0b3k0.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpr62qbzvq.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '[' | '{' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpr62qbzvq.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '{' | '[' | '(' => stack.push(c),\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        if c == '(' || c == '{' || c == '[' {\n            stack.push(c);\n        } else if c == ')' || c == '}' || c == ']' {\n            if stack.len() == 0 {\n                return false;\n            }\n            let top = stack.pop().unwrap();\n            if c == ')' && top != '(' {\n                return false;\n            } else if c == '}' && top != '{' {\n                return false;\n            } else if c == ']' && top != '[' {\n                return false;\n            }\n        }\n    }\n    stack.len() == 0\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n\n    return stack.is_empty();\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpez_by_ff.rs:13:21\n   |\n13 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpmbi0b3k0.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for ch in exp.chars() {\n        match ch {\n            '(' | '{' | '[' => stack.push(ch),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpl34yy825.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    let mut balanced = true;\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    balanced = false;\n                    break;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    balanced = false;\n                    break;\n                }\n            }\n            _ => (),\n        }\n    }\n    if !stack.is_empty() {\n        balanced = false;\n    }\n    balanced\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpxiv1rwx7.rs:14:21\n   |\n14 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => {\n                stack.push(c);\n            }\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '[' | '{' => stack.push(c),\n            ')' | ']' | '}' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((top == '(' && c == ')') || (top == '[' && c == ']') || (top == '{' && c == '}')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpmbi0b3k0.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '[' | '{' => stack.push(c),\n            ')' | ']' | '}' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        if c == '(' || c == '{' || c == '[' {\n            stack.push(c);\n        } else if c == ')' || c == '}' || c == ']' {\n            if stack.is_empty() {\n                return false;\n            }\n            let top = stack.pop().unwrap();\n            if !((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')) {\n                return false;\n            }\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpr62qbzvq.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '{' | '[' | '(' => stack.push(c),\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '[' | '{' => stack.push(c),\n            ')' | ']' | '}' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmps2i619e7.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '{' | '[' | '(' => stack.push(c),\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        if c == '(' || c == '{' || c == '[' {\n            stack.push(c);\n        } else if c == ')' || c == '}' || c == ']' {\n            if stack.is_empty() {\n                return false;\n            }\n            let top = stack.pop().unwrap();\n            if (top == '(' && c != ')') || (top == '{' && c != '}') || (top == '[' && c != ']') {\n                return false;\n            }\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '{' | '[' | '(' => stack.push(c),\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for ch in exp.chars() {\n        match ch {\n            '(' | '{' | '[' => stack.push(ch),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpr62qbzvq.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '{' | '[' | '(' => stack.push(c),\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpr62qbzvq.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for ch in exp.chars() {\n        match ch {\n            '(' | '{' | '[' => stack.push(ch),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, ch) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpbb7tmkof.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, ch) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for ch in exp.chars() {\n        match ch {\n            '(' | '{' | '[' => stack.push(ch),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpr62qbzvq.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmp0zw101ja.rs:13:21\n   |\n13 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n\n    for c in exp.chars() {\n        if c == '(' || c == '{' || c == '[' {\n            stack.push(c);\n        } else if c == ')' || c == '}' || c == ']' {\n            if stack.is_empty() {\n                return false;\n            }\n\n            let top = stack.pop().unwrap();\n\n            if c == ')' && top != '(' {\n                return false;\n            } else if c == '}' && top != '{' {\n                return false;\n            } else if c == ']' && top != '[' {\n                return false;\n            }\n        }\n    }\n\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpr62qbzvq.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '[' | '{' | '(' => stack.push(c),\n            ']' | '}' | ')' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ']' && top == '[') || (c == '}' && top == '{') || (c == ')' && top == '(')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        if c == '(' || c == '{' || c == '[' {\n            stack.push(c);\n        } else if c == ')' || c == '}' || c == ']' {\n            if stack.is_empty() {\n                return false;\n            }\n            let top = stack.pop().unwrap();\n            if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                return false;\n            }\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '{' | '(' | '[' => stack.push(c),\n            '}' | ')' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpzwjw0uf3.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    let mut balanced = true;\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    balanced = false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    balanced = false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    balanced = false;\n                }\n            }\n            _ => (),\n        }\n    }\n    balanced && stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        if c == '(' || c == '{' || c == '[' {\n            stack.push(c);\n        } else if c == ')' || c == '}' || c == ']' {\n            if stack.is_empty() {\n                return false;\n            }\n            let top = stack.pop().unwrap();\n            if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                return false;\n            }\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpmbi0b3k0.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpr62qbzvq.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        if c == '(' || c == '{' || c == '[' {\n            stack.push(c);\n        } else if c == ')' || c == '}' || c == ']' {\n            if stack.is_empty() {\n                return false;\n            }\n            let last = stack.pop().unwrap();\n            if (c == ')' && last != '(') || (c == '}' && last != '{') || (c == ']' && last != '[') {\n                return false;\n            }\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpmbi0b3k0.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '{' | '[' | '(' => stack.push(c),\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '[' | '{' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '{' | '[' | '(' => stack.push(c),\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '[' | '{' => stack.push(c),\n            ')' | ']' | '}' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((top == '(' && c == ')') || (top == '[' && c == ']') || (top == '{' && c == '}')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '[' | '{' => stack.push(c),\n            ')' | ']' | '}' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((top == '(' && c == ')') || (top == '[' && c == ']') || (top == '{' && c == '}')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    return stack.is_empty();\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        if c == '(' || c == '{' || c == '[' {\n            stack.push(c);\n        } else if c == ')' || c == '}' || c == ']' {\n            if stack.is_empty() {\n                return false;\n            }\n            let top = stack.pop().unwrap();\n            if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                return false;\n            }\n        }\n    }\n    return stack.is_empty();\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpr62qbzvq.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpmbi0b3k0.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if let Some(x) = stack.pop() {\n                    if x != '(' {\n                        return false;\n                    }\n                }\n            }\n            '}' => {\n                if let Some(x) = stack.pop() {\n                    if x != '{' {\n                        return false;\n                    }\n                }\n            }\n            ']' => {\n                if let Some(x) = stack.pop() {\n                    if x != '[' {\n                        return false;\n                    }\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '{' | '[' | '(' => stack.push(c),\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '{' | '(' | '[' => stack.push(c),\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    let mut balanced = true;\n    let mut index = 0;\n\n    while index < exp.len() && balanced {\n        let symbol = exp.chars().nth(index).unwrap();\n        if symbol == '(' || symbol == '[' || symbol == '{' {\n            stack.push(symbol);\n        } else if symbol == ')' || symbol == ']' || symbol == '}' {\n            if stack.is_empty() {\n                balanced = false;\n            } else {\n                let top = stack.pop().unwrap();\n                if !matches(top, symbol) {\n                    balanced = false;\n                }\n            }\n        }\n        index += 1;\n    }\n    balanced && stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "error[E0423]: expected function, found macro `matches`\n  --> /tmp/tmpls98q9c3.rs:16:21\n   |\n16 |                 if !matches(top, symbol) {\n   |                     ^^^^^^^ not a function\n   |\nhelp: use `!` to invoke the macro\n   |\n16 |                 if !matches!(top, symbol) {\n   |                            +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpr62qbzvq.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    let mut balanced = true;\n    let mut index = 0;\n\n    while index < exp.len() && balanced {\n        let symbol = exp.chars().nth(index).unwrap();\n        if symbol == '(' || symbol == '[' || symbol == '{' {\n            stack.push(symbol);\n        } else if symbol == ')' || symbol == ']' || symbol == '}' {\n            if stack.is_empty() {\n                balanced = false;\n            } else {\n                let top = stack.pop().unwrap();\n                if !matches(top, symbol) {\n                    balanced = false;\n                }\n            }\n        }\n        index += 1;\n    }\n    balanced && stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "error[E0423]: expected function, found macro `matches`\n  --> /tmp/tmpls98q9c3.rs:16:21\n   |\n16 |                 if !matches(top, symbol) {\n   |                     ^^^^^^^ not a function\n   |\nhelp: use `!` to invoke the macro\n   |\n16 |                 if !matches!(top, symbol) {\n   |                            +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = vec![];\n    for ch in exp.chars() {\n        if ch == '(' || ch == '{' || ch == '[' {\n            stack.push(ch);\n        } else if ch == ')' || ch == '}' || ch == ']' {\n            if stack.is_empty() {\n                return false;\n            }\n            let top = stack.pop().unwrap();\n            if (top == '(' && ch != ')') || (top == '{' && ch != '}') || (top == '[' && ch != ']') {\n                return false;\n            }\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpontz5x2f.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '[' | '{' => stack.push(c),\n            ')' | ']' | '}' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpr62qbzvq.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '[' | '{' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '[' | '{' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        if c == '(' || c == '{' || c == '[' {\n            stack.push(c);\n        } else if c == ')' || c == '}' || c == ']' {\n            if stack.len() == 0 {\n                return false;\n            }\n            let top = stack.pop().unwrap();\n            if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                return false;\n            }\n        }\n    }\n    if stack.len() == 0 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpmbi0b3k0.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if let Some(x) = stack.pop() {\n                    if x != '(' {\n                        return false;\n                    }\n                } else {\n                    return false;\n                }\n            }\n            '}' => {\n                if let Some(x) = stack.pop() {\n                    if x != '{' {\n                        return false;\n                    }\n                } else {\n                    return false;\n                }\n            }\n            ']' => {\n                if let Some(x) = stack.pop() {\n                    if x != '[' {\n                        return false;\n                    }\n                } else {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n\n    if stack.len() == 0 {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpmbi0b3k0.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    let mut balanced = true;\n    let mut i = 0;\n\n    while i < exp.len() && balanced {\n        let c = exp.chars().nth(i).unwrap();\n        match c {\n            '(' | '[' | '{' => stack.push(c),\n            ')' => {\n                if stack.is_empty() || stack.pop().unwrap() != '(' {\n                    balanced = false;\n                }\n            }\n            ']' => {\n                if stack.is_empty() || stack.pop().unwrap() != '[' {\n                    balanced = false;\n                }\n            }\n            '}' => {\n                if stack.is_empty() || stack.pop().unwrap() != '{' {\n                    balanced = false;\n                }\n            }\n            _ => (),\n        }\n        i += 1;\n    }\n\n    balanced && stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        if c == '(' || c == '{' || c == '[' {\n            stack.push(c);\n        } else if c == ')' || c == '}' || c == ']' {\n            if stack.len() == 0 {\n                return false;\n            }\n            let top = stack.pop().unwrap();\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    stack.len() == 0\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    let mut balanced = true;\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    balanced = false;\n                    break;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    balanced = false;\n                    break;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    balanced = false;\n                    break;\n                }\n            }\n            _ => (),\n        }\n    }\n    balanced && stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    let mut balanced = true;\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    balanced = false;\n                    break;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    balanced = false;\n                    break;\n                }\n            }\n            _ => (),\n        }\n    }\n    if !stack.is_empty() {\n        balanced = false;\n    }\n    balanced\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmp0etzncl4.rs:14:21\n   |\n14 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        if c == '(' || c == '{' || c == '[' {\n            stack.push(c);\n        } else if c == ')' {\n            if stack.pop() != Some('(') {\n                return false;\n            }\n        } else if c == '}' {\n            if stack.pop() != Some('{') {\n                return false;\n            }\n        } else if c == ']' {\n            if stack.pop() != Some('[') {\n                return false;\n            }\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpr62qbzvq.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for ch in exp.chars() {\n        match ch {\n            '(' | '{' | '[' => stack.push(ch),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((top == '(' && ch == ')') || (top == '{' && ch == '}') || (top == '[' && ch == ']')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        if c == '(' || c == '{' || c == '[' {\n            stack.push(c);\n        } else if c == ')' || c == '}' || c == ']' {\n            if stack.is_empty() {\n                return false;\n            }\n            let top = stack.pop().unwrap();\n            if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                return false;\n            }\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpr62qbzvq.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpr62qbzvq.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '{' | '[' | '(' => stack.push(c),\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    return stack.is_empty();\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    let mut balanced = true;\n    for c in exp.chars() {\n        match c {\n            '{' | '(' | '[' => stack.push(c),\n            '}' | ')' | ']' => {\n                if stack.is_empty() {\n                    balanced = false;\n                    break;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    balanced = false;\n                    break;\n                }\n            }\n            _ => (),\n        }\n    }\n    if !stack.is_empty() {\n        balanced = false;\n    }\n    balanced\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpdpo7h5fb.rs:14:21\n   |\n14 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '[' | '{' => stack.push(c),\n            ')' | ']' | '}' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpye5u4omk.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '{' | '[' | '(' => stack.push(c),\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpmbi0b3k0.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.len() == 0 {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.len() == 0\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_matching_pair` in this scope\n  --> /tmp/tmpa2kdqlff.rs:12:21\n   |\n12 |                 if !is_matching_pair(top, c) {\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}