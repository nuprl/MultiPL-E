{
  "name": "mbpp_723_count_same_pair",
  "language": "rs",
  "prompt": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    if nums1.len() != nums2.len() {\n        return 0;\n    }\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `1`', /tmp/tmpeszsb55p.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    nums1.iter().zip(nums2.iter()).filter(|&(x, y)| x == y).count() as isize\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    nums1.iter()\n        .zip(nums2.iter())\n        .filter(|&(x, y)| x == y)\n        .count() as isize\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        if i == j {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        if i == j {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        if i == j {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    nums1.iter().zip(nums2.iter()).filter(|&(x, y)| x == y).count() as isize\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        if i == j {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    nums1.iter()\n        .zip(nums2.iter())\n        .filter(|&(a, b)| a == b)\n        .count() as isize\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        if i == j {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    nums1.iter().zip(nums2.iter()).filter(|&(x, y)| x == y).count() as isize\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count: isize = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    nums1.iter().zip(nums2.iter()).filter(|&(x, y)| x == y).count() as isize\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    nums1.iter().zip(nums2.iter()).filter(|&(a, b)| a == b).count() as isize\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        if i == j {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        if i == j {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    nums1.iter().zip(nums2.iter()).filter(|&(x, y)| x == y).count() as isize\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        if i == j {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        if i == j {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        if i == j {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    nums1.iter().zip(nums2.iter()).filter(|&(a, b)| a == b).count() as isize\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    nums1.iter().zip(nums2.iter()).filter(|&(a, b)| a == b).count() as isize\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        if i == j {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        if i == j {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        if i == j {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    nums1.iter().zip(nums2.iter()).filter(|(x, y)| x == y).count() as isize\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    nums1.iter().zip(nums2.iter()).filter(|&(x, y)| x == y).count() as isize\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        if i == j {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    nums1.iter().zip(nums2.iter()).filter(|&(x, y)| x == y).count() as isize\n}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}