{
  "name": "mbpp_245_max_sum",
  "language": "rs",
  "prompt": "/// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nfn max_sum(arr: Vec<isize>) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = max_sum;\n    assert_eq!(candidate(vec![1, 15, 51, 45, 33, 100, 12, 18, 9]), 194);\n    assert_eq!(candidate(vec![80, 60, 30, 40, 20, 10]), 210);\n    assert_eq!(candidate(vec![2, 3, 14, 16, 21, 23, 29, 30]), 138);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut max = 0;\n    for i in 0..arr.len() {\n        let mut sum = 0;\n        let mut j = i;\n        while j < arr.len() {\n            sum += arr[j];\n            j += 1;\n        }\n        if sum > max {\n            max = sum;\n        }\n    }\n    max",
    "    let mut max_sum = 0;\n    for i in 0..arr.len() {\n        let mut sum = 0;\n        let mut increasing = true;\n        for j in i..arr.len() {\n            if increasing {\n                if arr[j] < arr[j - 1] {\n                    increasing = false;\n                }\n            }\n            sum += arr[j];\n        }\n        if sum > max_sum {\n            max_sum = sum;\n        }\n    }\n    max_sum",
    "    let mut max_sum = 0;\n    let mut max_sum_left = vec![0; arr.len()];\n    let mut max_sum_right = vec![0; arr.len()];\n\n    for i in 0..arr.len() {\n        max_sum_left[i] = arr[i];\n        for j in 0..i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i];\n            }\n        }\n    }\n\n    for i in (0..arr.len()).rev() {\n        max_sum_right[i] = arr[i];\n        for j in (i + 1)..arr.len() {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i];\n            }\n        }\n    }\n\n    for i in 0..arr.len() {\n        if max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] {\n            max_sum = max_sum_left[i] + max_sum_right[i] - arr[i];\n        }\n    }\n\n    max_sum",
    "    let mut max_sum = 0;\n    let mut sum = 0;\n    let mut max_sum_left = vec![0; arr.len()];\n    let mut max_sum_right = vec![0; arr.len()];\n\n    for i in 0..arr.len() {\n        sum += arr[i];\n        if sum < 0 {\n            sum = 0;\n        }\n        max_sum_left[i] = sum;\n    }\n\n    sum = 0;\n    for i in (0..arr.len()).rev() {\n        sum += arr[i];\n        if sum < 0 {\n            sum = 0;\n        }\n        max_sum_right[i] = sum;\n    }\n\n    for i in 0..arr.len() {\n        max_sum = max_sum.max(max_sum_left[i] + max_sum_right[i] - arr[i]);\n    }\n\n    max_sum",
    "    let mut max_sum = 0;\n    let mut max_sum_left = vec![0; arr.len()];\n    let mut max_sum_right = vec![0; arr.len()];\n\n    for i in 0..arr.len() {\n        max_sum_left[i] = arr[i];\n        for j in 0..i {\n            if arr[j] < arr[i] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i];\n            }\n        }\n    }\n\n    for i in (0..arr.len()).rev() {\n        max_sum_right[i] = arr[i];\n        for j in (i + 1)..arr.len() {\n            if arr[j] < arr[i] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i];\n            }\n        }\n    }\n\n    for i in 0..arr.len() {\n        if max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] {\n            max_sum = max_sum_left[i] + max_sum_right[i] - arr[i];\n        }\n    }\n\n    max_sum",
    "    let mut max = 0;\n    for i in 0..arr.len() {\n        let mut sum = 0;\n        let mut j = i;\n        while j < arr.len() {\n            sum += arr[j];\n            max = std::cmp::max(max, sum);\n            j += 1;\n        }\n    }\n    max",
    "    let mut dp = vec![0; arr.len()];\n    let mut dp2 = vec![0; arr.len()];\n    dp[0] = arr[0];\n    dp2[0] = arr[0];\n    for i in 1..arr.len() {\n        dp[i] = arr[i] + dp[i - 1];\n        dp2[i] = arr[i] + dp2[i - 1];\n    }\n    for i in 1..arr.len() {\n        for j in 0..i {\n            if arr[i] > arr[j] {\n                dp[i] = std::cmp::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    for i in 1..arr.len() {\n        for j in 0..i {\n            if arr[i] < arr[j] {\n                dp2[i] = std::cmp::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    let mut max = 0;\n    for i in 0..arr.len() {\n        max = std::cmp::max(max, dp[i] + dp2[i] - arr[i]);\n    }\n    max",
    "    let mut max_sum = 0;\n    let mut max_sum_left = vec![0; arr.len()];\n    let mut max_sum_right = vec![0; arr.len()];\n\n    for i in 0..arr.len() {\n        max_sum_left[i] = arr[i];\n        max_sum_right[i] = arr[i];\n    }\n\n    for i in 1..arr.len() {\n        for j in 0..i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i];\n            }\n        }\n    }\n\n    for i in (0..arr.len() - 1).rev() {\n        for j in (i + 1)..arr.len() {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i];\n            }\n        }\n    }\n\n    for i in 0..arr.len() {\n        if max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] {\n            max_sum = max_sum_left[i] + max_sum_right[i] - arr[i];\n        }\n    }\n\n    max_sum",
    "    let mut max_sum = 0;\n    let mut sum = 0;\n    let mut prev = 0;\n    let mut inc = true;\n    for i in 0..arr.len() {\n        if inc {\n            if arr[i] > prev {\n                sum += arr[i];\n            } else {\n                inc = false;\n                sum += arr[i];\n            }\n        } else {\n            if arr[i] < prev {\n                sum += arr[i];\n            } else {\n                inc = true;\n                sum += arr[i];\n            }\n        }\n        prev = arr[i];\n        if sum > max_sum {\n            max_sum = sum;\n        }\n    }\n    max_sum",
    "    let mut dp = vec![0; arr.len()];\n    let mut dp_rev = vec![0; arr.len()];\n\n    for i in 0..arr.len() {\n        dp[i] = arr[i];\n        for j in 0..i {\n            if arr[j] < arr[i] {\n                dp[i] = std::cmp::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n\n    for i in (0..arr.len()).rev() {\n        dp_rev[i] = arr[i];\n        for j in (i + 1..arr.len()).rev() {\n            if arr[j] < arr[i] {\n                dp_rev[i] = std::cmp::max(dp_rev[i], dp_rev[j] + arr[i]);\n            }\n        }\n    }\n\n    let mut max = 0;\n    for i in 0..arr.len() {\n        max = std::cmp::max(max, dp[i] + dp_rev[i] - arr[i]);\n    }\n    max",
    "    let mut max_sum = 0;\n    for i in 0..arr.len() {\n        let mut sum = 0;\n        let mut j = i;\n        while j < arr.len() && arr[j] > arr[j - 1] {\n            sum += arr[j];\n            j += 1;\n        }\n        while j < arr.len() && arr[j] < arr[j - 1] {\n            sum += arr[j];\n            j += 1;\n        }\n        if sum > max_sum {\n            max_sum = sum;\n        }\n    }\n    max_sum",
    "    let mut max_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut max_sum_so_far_rev = 0;\n    let mut max_sum_so_far_rev_arr = vec![0; arr.len()];\n    for i in (0..arr.len()).rev() {\n        max_sum_so_far_rev += arr[i];\n        max_sum_so_far_rev_arr[i] = max_sum_so_far_rev;\n    }\n    for i in 0..arr.len() {\n        max_sum_so_far += arr[i];\n        max_sum_so_far_rev -= arr[i];\n        max_sum = max(max_sum, max_sum_so_far + max_sum_so_far_rev_arr[i]);\n    }\n    max_sum",
    "    let mut max_sum = 0;\n    for i in 0..arr.len() {\n        let mut sum = 0;\n        let mut j = i;\n        while j < arr.len() && arr[j] > arr[j - 1] {\n            sum += arr[j];\n            j += 1;\n        }\n        while j < arr.len() && arr[j] < arr[j - 1] {\n            sum += arr[j];\n            j += 1;\n        }\n        if sum > max_sum {\n            max_sum = sum;\n        }\n    }\n    max_sum",
    "    let mut inc = vec![0; arr.len()];\n    let mut dec = vec![0; arr.len()];\n\n    inc[0] = arr[0];\n    for i in 1..arr.len() {\n        for j in 0..i {\n            if arr[j] < arr[i] && inc[j] > inc[i] {\n                inc[i] = inc[j];\n            }\n        }\n        inc[i] += arr[i];\n    }\n\n    dec[arr.len() - 1] = arr[arr.len() - 1];\n    for i in (0..arr.len() - 1).rev() {\n        for j in (i + 1)..arr.len() {\n            if arr[j] < arr[i] && dec[j] > dec[i] {\n                dec[i] = dec[j];\n            }\n        }\n        dec[i] += arr[i];\n    }\n\n    let mut max = 0;\n    for i in 0..arr.len() {\n        if inc[i] + dec[i] - arr[i] > max {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n\n    max",
    "    let mut max_sum = 0;\n    let mut max_sum_left = vec![0; arr.len()];\n    let mut max_sum_right = vec![0; arr.len()];\n\n    for i in 0..arr.len() {\n        max_sum_left[i] = arr[i];\n        if i > 0 && max_sum_left[i - 1] > 0 {\n            max_sum_left[i] += max_sum_left[i - 1];\n        }\n    }\n\n    for i in (0..arr.len()).rev() {\n        max_sum_right[i] = arr[i];\n        if i < arr.len() - 1 && max_sum_right[i + 1] > 0 {\n            max_sum_right[i] += max_sum_right[i + 1];\n        }\n    }\n\n    for i in 0..arr.len() {\n        max_sum = max_sum.max(max_sum_left[i] + max_sum_right[i] - arr[i]);\n    }\n\n    max_sum",
    "    let mut max = 0;\n    for i in 0..arr.len() {\n        let mut sum = 0;\n        let mut j = i;\n        while j < arr.len() {\n            sum += arr[j];\n            if sum > max {\n                max = sum;\n            }\n            j += 1;\n        }\n    }\n    max",
    "    let mut max_sum = 0;\n    let mut max_sum_left = vec![0; arr.len()];\n    let mut max_sum_right = vec![0; arr.len()];\n\n    for i in 0..arr.len() {\n        max_sum_left[i] = arr[i];\n        max_sum_right[i] = arr[i];\n    }\n\n    for i in 1..arr.len() {\n        for j in 0..i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i];\n            }\n        }\n    }\n\n    for i in (0..arr.len() - 1).rev() {\n        for j in (i + 1)..arr.len() {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i];\n            }\n        }\n    }\n\n    for i in 0..arr.len() {\n        if max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] {\n            max_sum = max_sum_left[i] + max_sum_right[i] - arr[i];\n        }\n    }\n\n    max_sum",
    "    let mut max_sum = 0;\n    let mut max_sum_left = vec![0; arr.len()];\n    let mut max_sum_right = vec![0; arr.len()];\n\n    for i in 0..arr.len() {\n        max_sum_left[i] = arr[i];\n        for j in 0..i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i];\n            }\n        }\n    }\n\n    for i in (0..arr.len()).rev() {\n        max_sum_right[i] = arr[i];\n        for j in (i + 1)..arr.len() {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i];\n            }\n        }\n    }\n\n    for i in 0..arr.len() {\n        if max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] {\n            max_sum = max_sum_left[i] + max_sum_right[i] - arr[i];\n        }\n    }\n\n    max_sum",
    "    let mut max = arr[0];\n    let mut sum = arr[0];\n    let mut i = 1;\n    while i < arr.len() {\n        sum += arr[i];\n        if sum > max {\n            max = sum;\n        }\n        i += 1;\n    }\n    max",
    "    let mut max_sum = 0;\n    let mut max_sum_left = vec![0; arr.len()];\n    let mut max_sum_right = vec![0; arr.len()];\n    let mut max_sum_left_right = vec![0; arr.len()];\n\n    for i in 0..arr.len() {\n        max_sum_left[i] = arr[i];\n        if i > 0 && arr[i] > arr[i - 1] {\n            max_sum_left[i] += max_sum_left[i - 1];\n        }\n    }\n\n    for i in (0..arr.len()).rev() {\n        max_sum_right[i] = arr[i];\n        if i < arr.len() - 1 && arr[i] > arr[i + 1] {\n            max_sum_right[i] += max_sum_right[i + 1];\n        }\n    }\n\n    for i in 0..arr.len() {\n        max_sum_left_right[i] = max_sum_left[i] + max_sum_right[i] - arr[i];\n    }\n\n    for i in 0..arr.len() {\n        if max_sum_left_right[i] > max_sum {\n            max_sum = max_sum_left_right[i];\n        }\n    }\n\n    max_sum"
  ]
}