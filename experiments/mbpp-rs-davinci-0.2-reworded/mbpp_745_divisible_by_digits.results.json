{
  "name": "mbpp_745_divisible_by_digits",
  "language": "rs",
  "prompt": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpu2__id0a.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpohmm6bqj.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpohmm6bqj.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            x.to_string()\n                .chars()\n                .all(|c| x % c.to_digit(10).unwrap() as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut is_divisible = true;\n        for j in i.to_string().chars() {\n            if j == '0' {\n                is_divisible = false;\n                break;\n            }\n            if i % (j.to_digit(10).unwrap() as isize) != 0 {\n                is_divisible = false;\n                break;\n            }\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpq8ophkp8.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            let mut x = x;\n            while x > 0 {\n                let digit = x % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                x /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 21, 22]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmp036x88yf.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<char> = i.to_string().chars().collect();\n        let mut divisible = true;\n        for digit in digits {\n            if i % digit.to_digit(10).unwrap() as isize != 0 {\n                divisible = false;\n                break;\n            }\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp6szjjlts.rs:8:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3g4pc2t0.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3g4pc2t0.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut is_divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmp_08vj_kn.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| d != 0 && x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp5weo5mhj.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| d != 0 && x % d == 0)\n  |             ------------------------------------ borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp5weo5mhj.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| d != 0 && x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut digits = x.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpjuijoqd7.rs:5:30\n  |\n5 |             let mut digits = x.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize);\n  |                              ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                              |\n  |                              creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0716`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut divisible = true;\n        for c in i.to_string().chars() {\n            if i % c.to_digit(10).unwrap() as isize != 0 {\n                divisible = false;\n                break;\n            }\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpjamf9mu3.rs:7:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in startnum..endnum {\n        let mut digits = Vec::new();\n        let mut num_copy = num;\n        while num_copy > 0 {\n            digits.push(num_copy % 10);\n            num_copy /= 10;\n        }\n        if digits.iter().all(|d| num % d == 0) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3g4pc2t0.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3g4pc2t0.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut is_divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmp_08vj_kn.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<isize> = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n        if digits.iter().all(|d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let mut is_divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if i % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpp44divnk.rs:9:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3g4pc2t0.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3g4pc2t0.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            let mut digits = x;\n            while digits > 0 {\n                let digit = digits % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                digits /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum+1)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp1v5fbf4x.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp1v5fbf4x.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3g4pc2t0.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3g4pc2t0.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|&d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpu6r5kvdm.rs:6:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in startnum..endnum {\n        let mut divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit != 0 && i % digit != 0 {\n                divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmp7d6yyh8u.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut digits = x;\n            while digits > 0 {\n                let digit = digits % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                digits /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmphoru61m8.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut x = x;\n            while x > 0 {\n                let digit = x % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                x /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 21]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmptcgn_hqj.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let digits = i.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum + 1)\n        .filter(|x| {\n            let mut digits = x.clone();\n            while digits > 0 {\n                let digit = digits % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                digits /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            let mut digits = x;\n            while digits != 0 {\n                let digit = digits % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                digits /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpafbo1vj4.rs:6:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut digits = Vec::new();\n        let mut num = i;\n        while num > 0 {\n            digits.push(num % 10);\n            num /= 10;\n        }\n        if digits.iter().all(|d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut divisible = true;\n        for d in i.to_string().chars() {\n            if i % d.to_digit(10).unwrap() as isize != 0 {\n                divisible = false;\n                break;\n            }\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpldxtdihx.rs:7:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&n| {\n            let mut digits = Vec::new();\n            let mut n = n;\n            while n > 0 {\n                digits.push(n % 10);\n                n /= 10;\n            }\n            digits.iter().all(|&d| d != 0 && n % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmp05qj4aqc.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize);\n            digits.all(|digit| x % digit == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpy2qbe82s.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|digit| x % digit == 0)\n  |             ---------------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpy2qbe82s.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|digit| x % digit == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|num| {\n            let digits = num.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|digit| num % digit == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp2bkjr0w6.rs:5:26\n  |\n5 |             let digits = num.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|digit| num % digit == 0)\n  |             ------------------------------------ borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp2bkjr0w6.rs:6:13\n  |\n5 |             let digits = num.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|digit| num % digit == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp1f4d7wb7.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp1f4d7wb7.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            let mut x = x;\n            while x > 0 {\n                if x % 10 == 0 || x % 10 > x {\n                    return false;\n                }\n                if x % (x % 10) != 0 {\n                    return false;\n                }\n                x /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 21, 22]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmp5_512jfy.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmplpv2vf6e.rs:5:30\n  |\n5 |             let mut digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                              ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                              |\n  |                              creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0716`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut is_divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmp_08vj_kn.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum + 1)\n        .filter(|&x| {\n            let digits: Vec<_> = x.to_string().chars().map(|c| c.to_digit(10).unwrap()).collect();\n            digits.iter().all(|&d| x % d as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpx9qekv4r.rs:6:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n            digits.iter().all(|&y| x % y == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpp33rypbc.rs:6:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3g4pc2t0.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3g4pc2t0.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let digits: Vec<isize> = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n        if digits.iter().all(|&d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp2uo6kzky.rs:6:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmplpv2vf6e.rs:5:30\n  |\n5 |             let mut digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                              ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                              |\n  |                              creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0716`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        if i.to_string().chars().all(|c| i % c.to_digit(10).unwrap() as isize == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmphvya6u71.rs:5:42\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let mut is_divisible = true;\n        for c in i.to_string().chars() {\n            if c == '0' {\n                is_divisible = false;\n                break;\n            }\n            if i % (c as isize - '0' as isize) != 0 {\n                is_divisible = false;\n                break;\n            }\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|&d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpu6r5kvdm.rs:6:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<isize> = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n        if digits.iter().all(|d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in startnum..endnum {\n        let mut flag = true;\n        for j in i.to_string().chars() {\n            if i % j.to_digit(10).unwrap() as isize != 0 {\n                flag = false;\n                break;\n            }\n        }\n        if flag {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp1uv5k231.rs:7:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3g4pc2t0.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3g4pc2t0.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3g4pc2t0.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3g4pc2t0.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n            digits.iter().all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut digits = x.clone();\n            while digits > 0 {\n                let digit = digits % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                digits /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpnb5ut919.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize);\n            digits.all(|x| x != 0 && *x % x == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmp3ki0ce_e.rs:6:38\n  |\n6 |             digits.all(|x| x != 0 && *x % x == 0)\n  |                                      ^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpu2__id0a.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpu2__id0a.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            x.to_string()\n                .chars()\n                .all(|c| x % c.to_digit(10).unwrap() as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpxk5_kme5.rs:7:26\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in startnum..=endnum {\n        let digits: Vec<_> = num.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n        if digits.iter().all(|&d| num % d == 0) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp09fty84t.rs:6:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in startnum..endnum {\n        let digits: Vec<char> = i.to_string().chars().collect();\n        let mut divisible = true;\n        for digit in digits {\n            if i % digit.to_digit(10).unwrap() as isize != 0 {\n                divisible = false;\n                break;\n            }\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpvci5o2ou.rs:8:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3g4pc2t0.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3g4pc2t0.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut x = x;\n            while x > 0 {\n                let digit = x % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                x /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 21]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmptcgn_hqj.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize);\n            digits.all(|digit| x % digit == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmphoaarw80.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|digit| x % digit == 0)\n  |             ---------------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmphoaarw80.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|digit| x % digit == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|&d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp7kzweu1d.rs:6:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits: Vec<_> = x.to_string().chars().map(|c| c.to_digit(10).unwrap()).collect();\n            digits.iter().all(|&d| x % d as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp_sdilhrn.rs:6:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            let mut digits = x;\n            while digits > 0 {\n                let digit = digits % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                digits /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&n| {\n            let digits = n.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| n % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpxjfq84h8.rs:5:26\n  |\n5 |             let digits = n.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| n % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpxjfq84h8.rs:6:13\n  |\n5 |             let digits = n.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| n % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits: Vec<isize> = x\n                .to_string()\n                .chars()\n                .map(|c| c.to_digit(10).unwrap() as isize)\n                .collect();\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpxhjqle30.rs:10:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<isize> = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n        if digits.iter().all(|d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp1f4d7wb7.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp1f4d7wb7.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in startnum..=endnum {\n        let digits: Vec<isize> = num\n            .to_string()\n            .chars()\n            .map(|c| c.to_digit(10).unwrap() as isize)\n            .collect();\n        if digits.iter().all(|d| num % d == 0) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in startnum..endnum {\n        let mut digits: Vec<isize> = Vec::new();\n        let mut temp = i;\n        while temp > 0 {\n            digits.push(temp % 10);\n            temp = temp / 10;\n        }\n        if digits.iter().all(|x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<isize> = i.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize).collect();\n        if digits.iter().all(|d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits: Vec<_> = x.to_string().chars().map(|c| c.to_digit(10).unwrap()).collect();\n            digits.iter().all(|&d| x % d as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp_sdilhrn.rs:6:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in startnum..endnum {\n        let mut divisible = true;\n        for j in i.to_string().chars() {\n            if i % j.to_digit(10).unwrap() as isize != 0 {\n                divisible = false;\n                break;\n            }\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmplohekw9e.rs:7:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut is_divisible = true;\n        for digit in i.to_string().chars() {\n            let digit = digit.to_string().parse::<isize>().unwrap();\n            if digit == 0 {\n                is_divisible = false;\n                break;\n            }\n            if i % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmptn9i3o0y.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize);\n            digits.all(|x| x != 0 && *x != 1 && x % *x == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpk8ot8s28.rs:6:38\n  |\n6 |             digits.all(|x| x != 0 && *x != 1 && x % *x == 0)\n  |                                      ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpk8ot8s28.rs:6:53\n  |\n6 |             digits.all(|x| x != 0 && *x != 1 && x % *x == 0)\n  |                                                     ^^\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut is_divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmp_08vj_kn.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpn9g8a5u2.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpn9g8a5u2.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut is_divisible = true;\n        for j in i.to_string().chars() {\n            if i % j.to_digit(10).unwrap() as isize != 0 {\n                is_divisible = false;\n                break;\n            }\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpncvba2s5.rs:7:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut digits = x;\n            while digits > 0 {\n                let digit = digits % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                digits /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmphoru61m8.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for n in startnum..=endnum {\n        let digits = n.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n        if digits.all(|d| n % d == 0) {\n            result.push(n);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp_8xk29pc.rs:5:22\n  |\n5 |         let digits = n.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                      ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                      |\n  |                      creates a temporary which is freed while still in use\n6 |         if digits.all(|d| n % d == 0) {\n  |            -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp_8xk29pc.rs:6:12\n  |\n5 |         let digits = n.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |             ------ help: consider changing this to be mutable: `mut digits`\n6 |         if digits.all(|d| n % d == 0) {\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|&x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp3ndtvz9_.rs:6:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3g4pc2t0.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3g4pc2t0.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|num| {\n            let digits = num.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|digit| num % digit == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpdq9hfsdj.rs:5:26\n  |\n5 |             let digits = num.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|digit| num % digit == 0)\n  |             ------------------------------------ borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpdq9hfsdj.rs:6:13\n  |\n5 |             let digits = num.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|digit| num % digit == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum).filter(|n| {\n        let mut n = *n;\n        while n > 0 {\n            let digit = n % 10;\n            if digit == 0 || *n % digit != 0 {\n                return false;\n            }\n            n /= 10;\n        }\n        true\n    }).collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmp6kigi116.rs:7:30\n  |\n7 |             if digit == 0 || *n % digit != 0 {\n  |                              ^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&num| {\n            let digits = num.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize);\n            digits.all(|d| num % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp8o8fcvzq.rs:5:26\n  |\n5 |             let digits = num.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| num % d == 0)\n  |             ---------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp8o8fcvzq.rs:6:13\n  |\n5 |             let digits = num.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| num % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<char> = i.to_string().chars().collect();\n        let mut is_divisible = true;\n        for digit in digits {\n            if digit == '0' {\n                is_divisible = false;\n                break;\n            }\n            if i % (digit as isize - '0' as isize) != 0 {\n                is_divisible = false;\n                break;\n            }\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|x| {\n            let digits: Vec<_> = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n            digits.iter().all(|&d| d != 0 && x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            x.to_string()\n                .chars()\n                .all(|c| x % c.to_digit(10).unwrap() as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in startnum..endnum {\n        let digits = num.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n        if digits.all(|d| num % d == 0) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpghmxgs83.rs:5:22\n  |\n5 |         let digits = num.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                      ^^^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                      |\n  |                      creates a temporary which is freed while still in use\n6 |         if digits.all(|d| num % d == 0) {\n  |            ---------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpghmxgs83.rs:6:12\n  |\n5 |         let digits = num.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |             ------ help: consider changing this to be mutable: `mut digits`\n6 |         if digits.all(|d| num % d == 0) {\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                divisible = false;\n                break;\n            }\n            num = num / 10;\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpcvg9bd0k.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| x.to_string().chars().all(|c| x % (c as isize - '0' as isize) == 0))\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp1ux7pjwq.rs:4:52\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let digits: Vec<_> = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            let mut digits = x;\n            while digits > 0 {\n                let digit = digits % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                digits /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let mut divisible = true;\n        for digit in i.to_string().chars() {\n            if i % digit.to_digit(10).unwrap() as isize != 0 {\n                divisible = false;\n                break;\n            }\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpbogv37j8.rs:7:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut x = x;\n            let mut digits = Vec::new();\n            while x > 0 {\n                digits.push(x % 10);\n                x /= 10;\n            }\n            digits.iter().all(|&d| d != 0 && x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmp1a1e5ocg.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let digits: Vec<_> = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n            digits.iter().all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let digits: Vec<_> = i.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize).collect();\n        if digits.iter().all(|&d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmppo8nuz6m.rs:6:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|&d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpu6r5kvdm.rs:6:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in startnum..endnum {\n        let mut is_divisible = true;\n        let mut num_copy = num;\n        while num_copy > 0 {\n            let digit = num_copy % 10;\n            if digit == 0 || num % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n            num_copy /= 10;\n        }\n        if is_divisible {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmppboj6rko.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut x = x;\n            while x > 0 {\n                let digit = x % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                x /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 21]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmptcgn_hqj.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| x.to_string().chars().all(|c| x % c.to_digit(10).unwrap() as isize == 0))\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpqfa_06_t.rs:4:52\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmph4gu058z.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmph4gu058z.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<isize> = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n        if digits.iter().all(|d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in startnum..endnum {\n        let mut is_divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpl2ufrixj.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|n| {\n            let mut digits = Vec::new();\n            let mut num = *n;\n            while num > 0 {\n                digits.push(num % 10);\n                num /= 10;\n            }\n            digits.iter().all(|d| n % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = vec![];\n    for num in startnum..endnum {\n        let mut is_divisible = true;\n        let mut num_copy = num;\n        while num_copy > 0 {\n            let digit = num_copy % 10;\n            if digit == 0 || num % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n            num_copy /= 10;\n        }\n        if is_divisible {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpmprgck49.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let digits = i\n            .to_string()\n            .chars()\n            .map(|c| c.to_digit(10).unwrap() as isize)\n            .collect::<Vec<isize>>();\n        let divisible = digits.iter().all(|&d| i % d == 0);\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpuq25_h1c.rs:10:48\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpohmm6bqj.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpohmm6bqj.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum + 1)\n        .filter(|&x| {\n            let mut digits = Vec::new();\n            let mut x = x;\n            while x > 0 {\n                digits.push(x % 10);\n                x /= 10;\n            }\n            digits.iter().all(|&d| d != 0 && x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpcznb5s3q.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in startnum..endnum + 1 {\n        let mut is_divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<isize> = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n        if digits.iter().all(|d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in startnum..endnum {\n        let mut divisible = true;\n        let mut num_copy = num;\n        while num_copy > 0 {\n            let digit = num_copy % 10;\n            if digit == 0 || num % digit != 0 {\n                divisible = false;\n                break;\n            }\n            num_copy /= 10;\n        }\n        if divisible {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmphdf_dh53.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut is_divisible = true;\n        for c in i.to_string().chars() {\n            let digit = c.to_digit(10).unwrap();\n            if digit != 0 && i % digit as isize != 0 {\n                is_divisible = false;\n                break;\n            }\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpaqwpgggx.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<_>>();\n            digits.iter().all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut is_divisible = true;\n        let mut number = i;\n        while number > 0 {\n            let digit = number % 10;\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n            number /= 10;\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmps7i0m4py.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp1f4d7wb7.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp1f4d7wb7.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3g4pc2t0.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3g4pc2t0.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3g4pc2t0.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3g4pc2t0.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n            digits.iter().all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            x.to_string()\n                .chars()\n                .all(|c| x % c.to_digit(10).unwrap() as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp6n4xvl99.rs:7:26\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in startnum..endnum {\n        let mut divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpuy8cqqy1.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            let mut x = x;\n            while x > 0 {\n                let digit = x % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                x /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 21, 22]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmp036x88yf.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum + 1)\n        .filter(|x| {\n            let mut digits = Vec::new();\n            let mut x = *x;\n            while x > 0 {\n                digits.push(x % 10);\n                x /= 10;\n            }\n            digits.iter().all(|y| *y != 0 && *x % y == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp6ezwgv6o.rs:11:46\n   |\n11 |             digits.iter().all(|y| *y != 0 && *x % y == 0)\n   |                                              ^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpohmm6bqj.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpohmm6bqj.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let mut divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut x = x;\n            while x > 0 {\n                let digit = x % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                x /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 21]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmptcgn_hqj.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            x.to_string()\n                .chars()\n                .all(|c| x % (c.to_digit(10).unwrap() as isize) == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmplpr153as.rs:7:26\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3g4pc2t0.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3g4pc2t0.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|digit| x % digit == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpcxfy30zr.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|digit| x % digit == 0)\n  |             ---------------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpcxfy30zr.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|digit| x % digit == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut divisible = true;\n        for digit in i.to_string().chars() {\n            if i % digit.to_digit(10).unwrap() as isize != 0 {\n                divisible = false;\n                break;\n            }\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp8pg3qf9q.rs:7:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let mut digits = x.to_string().chars();\n            digits.all(|d| x % d.to_digit(10).unwrap() as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpo4pc3woq.rs:5:30\n  |\n5 |             let mut digits = x.to_string().chars();\n  |                              ^^^^^^^^^^^^^        - temporary value is freed at the end of this statement\n  |                              |\n  |                              creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d.to_digit(10).unwrap() as isize == 0)\n  |             --------------------------------------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0716`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpu2__id0a.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<isize> = i.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize).collect();\n        if digits.iter().all(|&x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpsk3uw4ns.rs:6:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3g4pc2t0.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3g4pc2t0.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut digits = Vec::new();\n        let mut num = i;\n        while num > 0 {\n            digits.push(num % 10);\n            num /= 10;\n        }\n        if digits.iter().all(|&x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp40h3fgpm.rs:11:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpm5ffgx7q.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpm5ffgx7q.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<char> = i.to_string().chars().collect();\n        let mut is_divisible = true;\n        for digit in digits {\n            if digit == '0' {\n                is_divisible = false;\n                break;\n            }\n            if i % digit.to_digit(10).unwrap() as isize != 0 {\n                is_divisible = false;\n                break;\n            }\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for n in startnum..endnum {\n        let mut divisible = true;\n        let mut num = n;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || n % digit != 0 {\n                divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if divisible {\n            result.push(n);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmp9147l75h.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum + 1)\n        .filter(|&x| {\n            let digits: Vec<isize> = x\n                .to_string()\n                .chars()\n                .map(|d| d.to_digit(10).unwrap() as isize)\n                .collect();\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmphfkmffn5.rs:10:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let mut digits = Vec::new();\n            let mut num = *x;\n            while num > 0 {\n                digits.push(num % 10);\n                num /= 10;\n            }\n            digits.iter().all(|x| x != &0 && *x != 1 && *x != 2 && *x != 5 && *x != 6 && *x != 8 && *x != 9)\n        })\n        .filter(|x| {\n            let mut digits = Vec::new();\n            let mut num = *x;\n            while num > 0 {\n                digits.push(num % 10);\n                num /= 10;\n            }\n            digits.iter().all(|x| *x != 0 && *x != 1 && *x != 2 && *x != 5 && *x != 6 && *x != 8 && *x != 9)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[3, 4, 7]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmp_dk4b35r.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut is_divisible = true;\n        let digits: Vec<_> = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n        for digit in digits {\n            if i % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpuj94duhs.rs:8:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let digits: Vec<isize> = i.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize).collect();\n        if digits.iter().all(|&d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpeq186ius.rs:6:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let digits: Vec<isize> = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n        if digits.iter().all(|d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let mut digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmppjo6a71d.rs:5:30\n  |\n5 |             let mut digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                              ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                              |\n  |                              creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0716`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n            digits.iter().all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n            digits.iter().all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut is_divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if i % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp71yltaya.rs:9:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            let digits: Vec<_> = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp2puuucbw.rs:6:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<_>>();\n            digits.iter().all(|y| x % y == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            x.to_string()\n                .chars()\n                .all(|c| x % c.to_digit(10).unwrap() as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let mut is_divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<_> = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n        let divisible = digits.iter().all(|d| i % d == 0);\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut digits = Vec::new();\n        let mut num = i;\n        while num > 0 {\n            digits.push(num % 10);\n            num /= 10;\n        }\n        if digits.iter().all(|x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in startnum..=endnum {\n        let digits = num.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|d| num % d == 0) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpu2__id0a.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3g4pc2t0.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3g4pc2t0.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            let mut digits = x;\n            while digits > 0 {\n                let digit = digits % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                digits /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&n| {\n            let digits = n.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| n % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpy6og1omf.rs:5:26\n  |\n5 |             let digits = n.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| n % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpy6og1omf.rs:6:13\n  |\n5 |             let digits = n.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| n % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let mut x = *x;\n            while x > 0 {\n                let digit = x % 10;\n                if digit == 0 || *x % digit != 0 {\n                    return false;\n                }\n                x /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpl6nodpd4.rs:8:34\n  |\n8 |                 if digit == 0 || *x % digit != 0 {\n  |                                  ^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            x.to_string()\n                .chars()\n                .all(|c| x % c.to_digit(10).unwrap() as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp6n4xvl99.rs:7:26\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in startnum..endnum {\n        let mut divisible = true;\n        for j in i.to_string().chars() {\n            if i % j.to_digit(10).unwrap() as isize != 0 {\n                divisible = false;\n                break;\n            }\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmplohekw9e.rs:7:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3g4pc2t0.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3g4pc2t0.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&n| {\n            let digits = n.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| n % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpxjfq84h8.rs:5:26\n  |\n5 |             let digits = n.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| n % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpxjfq84h8.rs:6:13\n  |\n5 |             let digits = n.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| n % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut x = x;\n            let mut digits = Vec::new();\n            while x > 0 {\n                digits.push(x % 10);\n                x /= 10;\n            }\n            digits.iter().all(|&d| d != 0 && x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmp1a1e5ocg.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<char> = i.to_string().chars().collect();\n        let mut divisible = true;\n        for digit in digits {\n            if digit == '0' {\n                divisible = false;\n                break;\n            }\n            if i % (digit as isize - '0' as isize) != 0 {\n                divisible = false;\n                break;\n            }\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for num in startnum..=endnum {\n        let digits: Vec<char> = num.to_string().chars().collect();\n        let mut divisible = true;\n        for digit in digits {\n            if digit == '0' {\n                divisible = false;\n                break;\n            }\n            if num % (digit.to_digit(10).unwrap() as isize) != 0 {\n                divisible = false;\n                break;\n            }\n        }\n        if divisible {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let mut digits = Vec::new();\n            let mut x = *x;\n            while x > 0 {\n                digits.push(x % 10);\n                x /= 10;\n            }\n            digits.iter().all(|y| *y != 0 && *x % *y == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpo_qjvtyk.rs:11:46\n   |\n11 |             digits.iter().all(|y| *y != 0 && *x % *y == 0)\n   |                                              ^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            let digits: Vec<_> = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp2puuucbw.rs:6:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3g4pc2t0.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3g4pc2t0.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let mut divisible = true;\n        for digit in i.to_string().chars() {\n            if i % digit.to_digit(10).unwrap() as isize != 0 {\n                divisible = false;\n                break;\n            }\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpbogv37j8.rs:7:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n        if digits.all(|d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp5eb7zops.rs:5:22\n  |\n5 |         let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                      ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                      |\n  |                      creates a temporary which is freed while still in use\n6 |         if digits.all(|d| i % d == 0) {\n  |            -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp5eb7zops.rs:6:12\n  |\n5 |         let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |             ------ help: consider changing this to be mutable: `mut digits`\n6 |         if digits.all(|d| i % d == 0) {\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            x.to_string()\n                .chars()\n                .all(|c| x % c.to_digit(10).unwrap() as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpxk5_kme5.rs:7:26\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|x| {\n            let digits: Vec<_> = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n            digits.iter().all(|&d| d != 0 && x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in startnum..endnum {\n        let digits: Vec<char> = i.to_string().chars().collect();\n        let mut divisible = true;\n        for d in digits {\n            if d != '0' {\n                if i % (d as isize - '0' as isize) != 0 {\n                    divisible = false;\n                    break;\n                }\n            }\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpz4j5orr_.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3g4pc2t0.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3g4pc2t0.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3g4pc2t0.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3g4pc2t0.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            let mut digits = Vec::new();\n            let mut n = x;\n            while n > 0 {\n                digits.push(n % 10);\n                n /= 10;\n            }\n            digits.iter().all(|&d| d != 0 && x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|digit| x % digit == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpcxfy30zr.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|digit| x % digit == 0)\n  |             ---------------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpcxfy30zr.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|digit| x % digit == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum + 1)\n        .filter(|&x| {\n            x.to_string()\n                .chars()\n                .all(|c| x % (c as isize - '0' as isize) == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp6e2mzgjc.rs:7:26\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let mut is_divisible = true;\n        for digit in i.to_string().chars() {\n            if i % digit.to_digit(10).unwrap() as isize != 0 {\n                is_divisible = false;\n                break;\n            }\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp591a7i4l.rs:7:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpohmm6bqj.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpohmm6bqj.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3g4pc2t0.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3g4pc2t0.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpu2__id0a.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3g4pc2t0.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3g4pc2t0.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n            digits.iter().all(|d| x % d == 0)\n        })\n        .collect::<Vec<isize>>()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3g4pc2t0.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3g4pc2t0.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in startnum..endnum {\n        let digits = num.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|&d| num % d == 0) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp5h25uzwx.rs:6:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for n in startnum..=endnum {\n        let mut divisible = true;\n        for d in n.to_string().chars() {\n            if n % d.to_digit(10).unwrap() as isize != 0 {\n                divisible = false;\n                break;\n            }\n        }\n        if divisible {\n            result.push(n);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp644x7f5y.rs:7:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in startnum..endnum {\n        let mut divisible = true;\n        let mut num_copy = num;\n        while num_copy > 0 {\n            let digit = num_copy % 10;\n            if digit == 0 || num % digit != 0 {\n                divisible = false;\n                break;\n            }\n            num_copy /= 10;\n        }\n        if divisible {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmphdf_dh53.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum + 1)\n        .filter(|&x| {\n            let digits: Vec<isize> = x\n                .to_string()\n                .chars()\n                .map(|c| c.to_digit(10).unwrap() as isize)\n                .collect();\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpdwoocqu6.rs:10:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in startnum..=endnum {\n        let digits = num.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|d| num % d == 0) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut digits = Vec::new();\n        let mut num = i;\n        while num > 0 {\n            digits.push(num % 10);\n            num = num / 10;\n        }\n        if digits.iter().all(|x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmplpv2vf6e.rs:5:30\n  |\n5 |             let mut digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                              ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                              |\n  |                              creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0716`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3g4pc2t0.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3g4pc2t0.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&n| {\n            let digits = n.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| n % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpxjfq84h8.rs:5:26\n  |\n5 |             let digits = n.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| n % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpxjfq84h8.rs:6:13\n  |\n5 |             let digits = n.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| n % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<isize> = i.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize).collect();\n        if digits.iter().all(|x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut divisible = true;\n        for digit in i.to_string().chars() {\n            if digit == '0' {\n                divisible = false;\n                break;\n            }\n            if i % digit.to_digit(10).unwrap() as isize != 0 {\n                divisible = false;\n                break;\n            }\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpkruley8f.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|x| {\n            let digits: Vec<_> = x.to_string().chars().map(|c| c.to_digit(10).unwrap()).collect();\n            digits.iter().all(|&d| x % d as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut is_divisible = true;\n        for j in i.to_string().chars() {\n            if i % j.to_digit(10).unwrap() as isize != 0 {\n                is_divisible = false;\n                break;\n            }\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpncvba2s5.rs:7:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum+1)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<_>>();\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpnd72g6qu.rs:6:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}