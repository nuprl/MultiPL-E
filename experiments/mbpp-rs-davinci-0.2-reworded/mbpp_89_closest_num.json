{
  "name": "mbpp_89_closest_num",
  "language": "rs",
  "prompt": "/// Write a function to find the closest smaller number than n.\nfn closest_num(N: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = closest_num;\n    assert_eq!(candidate(11), 10);\n    assert_eq!(candidate(7), 6);\n    assert_eq!(candidate(12), 11);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut num = N;\n    let mut bit_count = 0;\n    let mut bit_pos = 0;\n    let mut bit_pos_found = false;\n    while num > 0 {\n        if (num & 1) == 1 {\n            bit_count += 1;\n            if !bit_pos_found && (num & 2) == 0 {\n                bit_pos_found = true;\n                bit_pos = bit_count;\n            }\n        }\n        num >>= 1;\n    }\n    if bit_pos_found {\n        N & !((1 << bit_pos) - 1) | (1 << (bit_pos - 1)) - 1\n    } else {\n        0\n    }",
    "    let mut n = N;\n    let mut i = 0;\n    while n > 0 {\n        if n % 2 == 1 {\n            break;\n        }\n        n = n >> 1;\n        i += 1;\n    }\n    return N - (1 << i);",
    "    let mut n = N;\n    let mut i = 0;\n    let mut j = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            j = i;\n        }\n        i += 1;\n        n >>= 1;\n    }\n    return N & !(1 << j);",
    "    let mut n = N;\n    let mut count = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            break;\n        }\n        count += 1;\n        n >>= 1;\n    }\n    N - (1 << count)",
    "    let mut n = N;\n    let mut i = 0;\n    let mut j = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            j = i;\n        }\n        i += 1;\n        n >>= 1;\n    }\n    N & !(1 << j)",
    "    let mut n = N;\n    let mut count = 0;\n    while n > 0 {\n        if n % 2 == 1 {\n            break;\n        }\n        n = n >> 1;\n        count += 1;\n    }\n    N - (1 << count)",
    "    let mut n = N;\n    let mut count = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            break;\n        }\n        count += 1;\n        n >>= 1;\n    }\n    N & !((1 << count) - 1)",
    "    let mut n = N;\n    let mut i = 0;\n    let mut j = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            i = j;\n        }\n        j += 1;\n        n >>= 1;\n    }\n    N & !(1 << i)",
    "    let mut n = N;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            break;\n        }\n        n >>= 1;\n        i += 1;\n    }\n    n &= !(1 << i);\n    n |= 1 << (i - 1);\n    n",
    "    let mut n = N;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            break;\n        }\n        i += 1;\n        n >>= 1;\n    }\n    n &= !(1 << i);\n    n |= 1 << (i - 1);\n    n",
    "    let mut n = N;\n    let mut i = 0;\n    let mut j = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            i = j;\n        }\n        j += 1;\n        n >>= 1;\n    }\n    N & !(1 << i)",
    "    let mut n = N;\n    let mut c = 0;\n    while n > 0 {\n        n >>= 1;\n        c += 1;\n    }\n    let mut res = 0;\n    for i in 0..c {\n        res |= 1 << i;\n    }\n    res",
    "    let mut n = N;\n    let mut i = 0;\n    let mut j = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            j = i;\n        }\n        i += 1;\n        n >>= 1;\n    }\n    N & !(1 << j)",
    "    let mut n = N;\n    let mut result = 0;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            result += 1 << i;\n        } else {\n            result += 1 << (i - 1);\n        }\n        i += 1;\n        n >>= 1;\n    }\n    result",
    "    let mut n = N;\n    let mut i = 0;\n    let mut j = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            i = j;\n        }\n        j += 1;\n        n >>= 1;\n    }\n    N & !(1 << i)",
    "    let mut n = N;\n    let mut count = 0;\n    while n > 0 {\n        n = n >> 1;\n        count += 1;\n    }\n    let mut result = 0;\n    for i in 0..count {\n        result = result << 1;\n        result += 1;\n    }\n    result",
    "    let mut n = N;\n    let mut res = 0;\n    let mut bit = 1;\n    while n > 0 {\n        if n & 1 == 0 {\n            res |= bit;\n        } else {\n            bit <<= 1;\n        }\n        n >>= 1;\n    }\n    res",
    "    let mut num = N;\n    let mut bit_pos = 0;\n    let mut prev_bit_pos = 0;\n    while num > 0 {\n        if num & 1 == 1 {\n            prev_bit_pos = bit_pos;\n        }\n        bit_pos += 1;\n        num >>= 1;\n    }\n    N & !(1 << prev_bit_pos)",
    "    let mut n = N;\n    let mut res = 0;\n    let mut bit = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            res |= 1 << bit;\n        } else {\n            res |= 1 << (bit + 1);\n            break;\n        }\n        bit += 1;\n        n >>= 1;\n    }\n    res",
    "    let mut n = N;\n    let mut i = 0;\n    let mut j = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            i = j;\n        }\n        n >>= 1;\n        j += 1;\n    }\n    N & !(1 << i)"
  ]
}