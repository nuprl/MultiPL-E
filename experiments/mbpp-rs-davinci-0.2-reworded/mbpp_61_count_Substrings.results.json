{
  "name": "mbpp_61_count_Substrings",
  "language": "rs",
  "prompt": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count: isize = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let mut sum: isize = 0;\n            for c in sub.chars() {\n                sum += c.to_digit(10).unwrap() as isize;\n            }\n            if sum == sub.len() as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count: isize = 0;\n    let mut sum: isize = 0;\n    let mut len: isize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut n: usize = s.len();\n    let mut arr: Vec<isize> = Vec::new();\n    let mut arr_str: Vec<String> = Vec::new();\n    let mut arr_str_len: Vec<isize> = Vec::new();\n    let mut arr_str_sum: Vec<isize> = Vec::new();\n\n    for c in s.chars() {\n        arr.push(c.to_digit(10).unwrap() as isize);\n    }\n\n    while i < n {\n        j = i;\n        sum = 0;\n        len = 0;\n        while j < n {\n            sum += arr[j];\n            len += 1;\n            arr_str.push(s[i..j + 1].to_string());\n            arr_str_len.push(len);\n            arr_str_sum.push(sum);\n            j += 1;\n        }\n        i += 1;\n    }\n\n    for i in 0..arr_str.len() {\n        if arr_str_sum[i] == arr_str_len[i] {\n            count += 1;\n        }\n    }\n\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        let num = c.to_digit(10).unwrap();\n        sum += num;\n        len += 1;\n        if sum == len {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpnw_ccos7.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let mut sum = 0;\n            for k in i..=j {\n                sum += s.chars().nth(k).unwrap().to_digit(10).unwrap() as isize;\n            }\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = s.len();\n    let mut str = s.as_bytes();\n    while i < n {\n        while j < n {\n            sum += (str[j] - 48) as isize;\n            length += 1;\n            if sum == length {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i;\n        sum = 0;\n        length = 0;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let digit = c.to_digit(10).unwrap();\n        sum += digit;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpkuokrq5g.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let sum = sub.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let s_vec: Vec<char> = s.chars().collect();\n    let mut sum = 0;\n    for i in 0..s_vec.len() {\n        sum = 0;\n        for j in i..s_vec.len() {\n            sum += s_vec[j].to_digit(10).unwrap() as isize;\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count: isize = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub_str = &s[i..j + 1];\n            let sum = sub_str.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub_str.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let mut sum = 0;\n            for k in i..=j {\n                sum += s.chars().nth(k).unwrap().to_digit(10).unwrap() as isize;\n            }\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let digit = c.to_digit(10).unwrap();\n        sum += digit;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpkuokrq5g.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let substr = &s[i..j + 1];\n            if substr.len() == sum_digits(substr) {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `sum_digits` in this scope\n --> /tmp/tmpu4t4c3a_.rs:7:32\n  |\n7 |             if substr.len() == sum_digits(substr) {\n  |                                ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = s.len();\n    let mut s = s.chars().collect::<Vec<char>>();\n    while i < n {\n        while j < n {\n            sum += s[j].to_digit(10).unwrap() as isize;\n            length += 1;\n            if sum == length {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i;\n        sum = 0;\n        length = 0;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let num = c.to_digit(10).unwrap();\n        sum += num;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpmz3olkrc.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let sum = sub.chars().map(|c| c.to_digit(10).unwrap() as isize).sum::<isize>();\n            if sum == sub.len() as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let num = c.to_digit(10).unwrap();\n        sum += num;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpmz3olkrc.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut chars: Vec<char> = s.chars().collect();\n    while i < chars.len() {\n        while j < chars.len() {\n            sum += chars[j].to_digit(10).unwrap() as isize;\n            length += 1;\n            if sum == length {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i;\n        sum = 0;\n        length = 0;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = s.len();\n    let mut v: Vec<char> = s.chars().collect();\n    while i < n {\n        while j < n {\n            sum += v[j].to_digit(10).unwrap() as isize;\n            length += 1;\n            if sum == length {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i;\n        sum = 0;\n        length = 0;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        let digit = c.to_digit(10).unwrap() as isize;\n        sum += digit;\n        len += 1;\n        if sum == len {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpgvltbenp.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let sum = sub.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sub.len() as u32 == sum {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        let num = c.to_digit(10).unwrap();\n        sum += num;\n        len += 1;\n        if sum == len {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpnw_ccos7.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count: isize = 0;\n    let mut sum: isize = 0;\n    let mut len: isize = 0;\n    for c in s.chars() {\n        let digit = c.to_digit(10).unwrap() as isize;\n        sum += digit;\n        len += 1;\n        if sum == len {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmppwa7bz1a.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let num = c.to_digit(10).unwrap() as isize;\n        sum += num;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpf33_17rh.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut chars = s.chars();\n    while let Some(c) = chars.next() {\n        let d = c.to_digit(10).unwrap() as isize;\n        sum += d;\n        length += 1;\n        while sum > length {\n            let c = chars.next().unwrap();\n            let d = c.to_digit(10).unwrap() as isize;\n            sum -= d;\n            length -= 1;\n        }\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `6`', /tmp/tmpdbnv14x0.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        if c.is_digit(10) {\n            sum += c.to_digit(10).unwrap() as isize;\n            length += 1;\n        } else {\n            if sum == length {\n                count += 1;\n            }\n            sum = 0;\n            length = 0;\n        }\n    }\n    if sum == length {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmp678obhz6.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut chars = s.chars();\n    while let Some(c) = chars.next() {\n        if c.is_numeric() {\n            sum += c.to_digit(10).unwrap() as isize;\n            length += 1;\n        } else {\n            if sum == length {\n                count += 1;\n            }\n            sum = 0;\n            length = 0;\n        }\n        i += 1;\n    }\n    if sum == length {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmp8jrbzuuj.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        if c.is_digit(10) {\n            sum += c.to_digit(10).unwrap() as isize;\n            len += 1;\n        } else {\n            if sum == len {\n                count += 1;\n            }\n            sum = 0;\n            len = 0;\n        }\n    }\n    if sum == len {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmp5tyayzlc.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let digit = c.to_digit(10).unwrap();\n        sum += digit;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpkuokrq5g.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        if c.is_numeric() {\n            sum += c.to_digit(10).unwrap() as isize;\n            len += 1;\n        } else {\n            if sum == len {\n                count += 1;\n            }\n            sum = 0;\n            len = 0;\n        }\n    }\n    if sum == len {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmph7ycc9ge.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let mut sum = 0;\n            for c in sub.chars() {\n                sum += c.to_digit(10).unwrap();\n            }\n            if sum == sub.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count: isize = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let mut sum: isize = 0;\n            for k in i..=j {\n                sum += (s.chars().nth(k).unwrap() as u8 - '0' as u8) as isize;\n            }\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..=j];\n            let sum = sub.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub_str = &s[i..j + 1];\n            let sum = sub_str.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub_str.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sum = s[i..=j].chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == (j - i + 1) as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            sum += s.chars().nth(j).unwrap().to_digit(10).unwrap() as isize;\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n        sum = 0;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let digit = c.to_digit(10).unwrap();\n        sum += digit;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpkuokrq5g.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count: isize = 0;\n    let mut sum: isize = 0;\n    let mut len: isize = 0;\n    for c in s.chars() {\n        let n = c.to_digit(10).unwrap() as isize;\n        sum += n;\n        len += 1;\n        if sum == len {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpgwh7wvtf.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let mut sum = 0;\n            for k in i..=j {\n                sum += s.chars().nth(k).unwrap().to_digit(10).unwrap();\n            }\n            if sum == (j - i + 1) as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        if c.is_digit(10) {\n            sum += c.to_digit(10).unwrap() as isize;\n            len += 1;\n        } else {\n            if sum == len {\n                count += 1;\n            }\n            sum = 0;\n            len = 0;\n        }\n    }\n    if sum == len {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmp5tyayzlc.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub_str = &s[i..j + 1];\n            let mut sum = 0;\n            for c in sub_str.chars() {\n                sum += c.to_digit(10).unwrap() as isize;\n            }\n            if sum == sub_str.len() as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let sum = sub.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let mut sum = 0;\n            for k in i..=j {\n                sum += (s.chars().nth(k).unwrap() as u8 - '0' as u8) as isize;\n            }\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut chars = s.chars();\n    while let Some(c) = chars.next() {\n        if c.is_digit(10) {\n            sum += c.to_digit(10).unwrap() as isize;\n            length += 1;\n        } else {\n            i = j;\n            j += 1;\n            sum = 0;\n            length = 0;\n        }\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmp37iebi2i.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..=j];\n            let sum = sub.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count: isize = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let mut sum: isize = 0;\n            for k in i..=j {\n                sum += s.chars().nth(k).unwrap().to_digit(10).unwrap() as isize;\n            }\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub_str = &s[i..=j];\n            if sub_str.len() == sum_digits(sub_str) {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `sum_digits` in this scope\n --> /tmp/tmpxp33zbuj.rs:7:33\n  |\n7 |             if sub_str.len() == sum_digits(sub_str) {\n  |                                 ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i + 1..s.len() + 1 {\n            let sub_str = &s[i..j];\n            let sum = sub_str.chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub_str.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = s.len();\n    let mut v: Vec<char> = s.chars().collect();\n    while i < n && j < n {\n        sum += v[j].to_digit(10).unwrap() as isize;\n        if sum == (j - i + 1) as isize {\n            count += 1;\n        }\n        j += 1;\n        if j == n {\n            i += 1;\n            j = i;\n            sum = 0;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    let mut i = 0;\n    while i < s.len() {\n        let mut j = i;\n        sum = 0;\n        length = 0;\n        while j < s.len() {\n            let c = s.chars().nth(j).unwrap();\n            sum += c.to_digit(10).unwrap() as isize;\n            length += 1;\n            if sum == length {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub_str = &s[i..j + 1];\n            let mut sum = 0;\n            for c in sub_str.chars() {\n                sum += c.to_digit(10).unwrap() as isize;\n            }\n            if sum == sub_str.len() as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut chars = s.chars();\n    while let Some(c) = chars.next() {\n        if c.is_numeric() {\n            sum += c.to_digit(10).unwrap() as isize;\n            length += 1;\n        } else {\n            if sum == length {\n                count += 1;\n            }\n            sum = 0;\n            length = 0;\n        }\n    }\n    if sum == length {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmpnet31mnm.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    let mut v: Vec<char> = s.chars().collect();\n    while i < v.len() {\n        sum = 0;\n        len = 0;\n        j = i;\n        while j < v.len() {\n            sum += v[j].to_digit(10).unwrap();\n            len += 1;\n            if sum == len as u32 {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        let i = c.to_digit(10).unwrap() as isize;\n        sum += i;\n        len += 1;\n        if sum == len {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpoqckw82r.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        let num = c.to_digit(10).unwrap();\n        sum += num;\n        len += 1;\n        if sum == len {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpnw_ccos7.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub_str = &s[i..j + 1];\n            let sum = sub_str.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub_str.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        let n = c.to_digit(10).unwrap();\n        sum += n;\n        len += 1;\n        if sum == len {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpyku0al1j.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    while i < s.len() {\n        while j < s.len() {\n            let ch = s.chars().nth(j).unwrap();\n            sum += ch.to_digit(10).unwrap() as isize;\n            len += 1;\n            if sum == len {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i;\n        sum = 0;\n        len = 0;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        let n = c.to_digit(10).unwrap();\n        sum += n;\n        len += 1;\n        if sum == len {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpyku0al1j.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let mut sum = 0;\n            for k in i..=j {\n                sum += s.chars().nth(k).unwrap().to_digit(10).unwrap() as isize;\n            }\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        let n = c.to_digit(10).unwrap() as isize;\n        sum += n;\n        len += 1;\n        if sum == len {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmps1zc9pwk.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let mut sum = 0;\n            for k in i..=j {\n                sum += s.chars().nth(k).unwrap().to_digit(10).unwrap() as isize;\n            }\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let mut sum = 0;\n            for c in sub.chars() {\n                sum += c.to_digit(10).unwrap() as isize;\n            }\n            if sum == sub.len() as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub_str = &s[i..j + 1];\n            let sum = sub_str.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub_str.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        sum += c.to_digit(10).unwrap() as isize;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmprwoap5wp.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..=j];\n            let sum: isize = sub.chars().map(|c| c.to_digit(10).unwrap() as isize).sum();\n            if sub.len() as isize == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        if c.is_digit(10) {\n            sum += c.to_digit(10).unwrap() as isize;\n            length += 1;\n        } else {\n            if sum == length {\n                count += 1;\n            }\n            sum = 0;\n            length = 0;\n        }\n    }\n    if sum == length {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmp678obhz6.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let sum = sub.chars().map(|c| c.to_digit(10).unwrap() as isize).sum();\n            if sum == sub.len() as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpz7mbchg3.rs:7:17\n  |\n7 |             let sum = sub.chars().map(|c| c.to_digit(10).unwrap() as isize).sum();\n  |                 ^^^ consider giving `sum` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let sum = sub.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let n = c.to_digit(10).unwrap();\n        sum += n;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpger7ga40.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        sum += c.to_digit(10).unwrap() as isize;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmprwoap5wp.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let sum = sub.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub_str = &s[i..j + 1];\n            let sum = sub_str.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub_str.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        sum += c.to_digit(10).unwrap() as isize;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmprwoap5wp.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = s.len();\n    let mut arr = s.chars().collect::<Vec<char>>();\n    while i < n {\n        while j < n {\n            sum += arr[j].to_digit(10).unwrap() as isize;\n            len += 1;\n            if sum == len {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i;\n        sum = 0;\n        len = 0;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        sum += c.to_digit(10).unwrap() as isize;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmprwoap5wp.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        sum += c.to_digit(10).unwrap() as isize;\n        len += 1;\n        if sum == len {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpo242okrv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        if c.is_digit(10) {\n            sum += c.to_digit(10).unwrap() as isize;\n            len += 1;\n        } else {\n            if sum == len {\n                count += 1;\n            }\n            sum = 0;\n            len = 0;\n        }\n    }\n    if sum == len {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmp5tyayzlc.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        if c.is_numeric() {\n            sum += c.to_digit(10).unwrap() as isize;\n            len += 1;\n        } else {\n            if sum == len {\n                count += 1;\n            }\n            sum = 0;\n            len = 0;\n        }\n    }\n    if sum == len {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmph7ycc9ge.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count: isize = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub_str = &s[i..=j];\n            let sum = sub_str.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sub_str.len() as u32 == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let sum = sub.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let sum = sub.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 1..s.len() + 1 {\n        for j in 0..s.len() - i + 1 {\n            let sub = &s[j..j + i];\n            let mut sum = 0;\n            for c in sub.chars() {\n                sum += c.to_digit(10).unwrap() as isize;\n            }\n            if sum == i as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let digit = c.to_digit(10).unwrap();\n        sum += digit;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpkuokrq5g.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let num = c.to_digit(10).unwrap();\n        sum += num;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpmz3olkrc.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = s.len();\n    let mut v: Vec<char> = s.chars().collect();\n    while i < n {\n        while j < n {\n            sum += v[j].to_digit(10).unwrap() as isize;\n            len += 1;\n            if sum == len {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i;\n        sum = 0;\n        len = 0;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let mut sum = 0;\n            for c in sub.chars() {\n                sum += c.to_digit(10).unwrap();\n            }\n            if sum == sub.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..=j];\n            let mut sum = 0;\n            for c in sub.chars() {\n                sum += c.to_digit(10).unwrap();\n            }\n            if sum == sub.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let digit = c.to_digit(10).unwrap();\n        sum += digit;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpkuokrq5g.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let num = c.to_digit(10).unwrap();\n        sum += num;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpmz3olkrc.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let sum = sub.chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let mut sum = 0;\n            let mut len = 0;\n            for k in i..=j {\n                sum += s.chars().nth(k).unwrap().to_digit(10).unwrap() as isize;\n                len += 1;\n            }\n            if sum == len as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = s.len();\n    let mut v: Vec<isize> = vec![0; n];\n    for i in 0..n {\n        v[i] = s.chars().nth(i).unwrap().to_digit(10).unwrap() as isize;\n    }\n    while i < n {\n        sum = 0;\n        j = i;\n        while j < n {\n            sum += v[j];\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let num = c.to_digit(10).unwrap() as isize;\n        sum += num;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpf33_17rh.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let mut sum = 0;\n            for k in i..=j {\n                sum += (s.chars().nth(k).unwrap() as u8 - '0' as u8) as isize;\n            }\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut chars = s.chars();\n    while let Some(c) = chars.next() {\n        sum += c.to_digit(10).unwrap() as isize;\n        length += 1;\n        end += 1;\n        if sum == length {\n            count += 1;\n        }\n        while sum > length {\n            sum -= s[start..end].chars().next().unwrap().to_digit(10).unwrap() as isize;\n            length -= 1;\n            start += 1;\n            if sum == length {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `6`', /tmp/tmpflp0aoph.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        sum += c.to_digit(10).unwrap() as isize;\n        len += 1;\n        if sum == len {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpo242okrv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = s.len();\n    let mut v: Vec<char> = s.chars().collect();\n    while i < n {\n        while j < n && sum <= j - i {\n            sum += v[j].to_digit(10).unwrap() as isize;\n            j += 1;\n        }\n        if sum == j - i {\n            count += 1;\n        }\n        sum -= v[i].to_digit(10).unwrap() as isize;\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp48q5ah1q.rs:11:20\n   |\n11 |             sum += v[j].to_digit(10).unwrap() as isize;\n   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot add-assign `isize` to `usize`\n  --> /tmp/tmp48q5ah1q.rs:11:17\n   |\n11 |             sum += v[j].to_digit(10).unwrap() as isize;\n   |                 ^^ no implementation for `usize += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp48q5ah1q.rs:17:16\n   |\n17 |         sum -= v[i].to_digit(10).unwrap() as isize;\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract-assign `isize` from `usize`\n  --> /tmp/tmp48q5ah1q.rs:17:13\n   |\n17 |         sum -= v[i].to_digit(10).unwrap() as isize;\n   |             ^^ no implementation for `usize -= isize`\n   |\n   = help: the trait `SubAssign<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `SubAssign<Rhs>`:\n             <f32 as SubAssign<&f32>>\n             <f32 as SubAssign>\n             <f64 as SubAssign<&f64>>\n             <f64 as SubAssign>\n             <i128 as SubAssign<&i128>>\n             <i128 as SubAssign>\n             <i16 as SubAssign<&i16>>\n             <i16 as SubAssign>\n           and 20 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        if c.is_digit(10) {\n            sum += c.to_digit(10).unwrap() as isize;\n            len += 1;\n        } else {\n            if sum == len {\n                count += 1;\n            }\n            sum = 0;\n            len = 0;\n        }\n    }\n    if sum == len {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmp5tyayzlc.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut chars = s.chars();\n    while let Some(c) = chars.next() {\n        sum += c.to_digit(10).unwrap() as isize;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n        i += 1;\n        if i == s.len() {\n            break;\n        }\n        while sum > length {\n            sum -= s.chars().nth(j).unwrap().to_digit(10).unwrap() as isize;\n            length -= 1;\n            j += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpbk4lr1wp.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        let n = c.to_digit(10).unwrap() as isize;\n        sum += n;\n        len += 1;\n        if sum == len {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmps1zc9pwk.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let mut sum = 0;\n            for k in i..=j {\n                sum += s.chars().nth(k).unwrap().to_digit(10).unwrap() as isize;\n            }\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        let digit = c.to_digit(10).unwrap();\n        sum += digit;\n        len += 1;\n        if sum == len {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmp6a2743cc.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let sum = sub.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = s.len();\n    let mut arr = s.chars().collect::<Vec<char>>();\n    while i < n {\n        sum = 0;\n        length = 0;\n        j = i;\n        while j < n {\n            sum += arr[j].to_digit(10).unwrap() as isize;\n            length += 1;\n            if sum == length as isize {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut chars = s.chars();\n    while let Some(c) = chars.next() {\n        if c.is_digit(10) {\n            sum += c.to_digit(10).unwrap() as isize;\n            length += 1;\n        } else {\n            i = j;\n            j += 1;\n            sum = 0;\n            length = 0;\n        }\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmp37iebi2i.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        let n = c.to_digit(10).unwrap();\n        sum += n;\n        len += 1;\n        if sum == len {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpyku0al1j.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut sum = 0;\n    let mut n = s.len();\n    let mut v: Vec<char> = s.chars().collect();\n    while i < n {\n        j = i;\n        sum = 0;\n        while j < n {\n            sum += v[j].to_digit(10).unwrap() as isize;\n            if sum == j as isize - i as isize + 1 {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut chars = s.chars();\n    while i < s.len() {\n        let c = chars.next().unwrap();\n        if c.is_numeric() {\n            sum += c.to_digit(10).unwrap() as isize;\n            length += 1;\n        } else {\n            if sum == length {\n                count += 1;\n            }\n            sum = 0;\n            length = 0;\n        }\n        i += 1;\n    }\n    if sum == length {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmpkk3edejf.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut sum = 0;\n    let mut n = s.len();\n    let mut v: Vec<char> = s.chars().collect();\n    while i < n {\n        while j < n && i <= j {\n            sum += v[j].to_digit(10).unwrap() as isize;\n            j += 1;\n        }\n        if sum == j as isize - i as isize {\n            count += 1;\n        }\n        sum = 0;\n        i += 1;\n        j = i;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmpl9n45olv.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let sum = sub.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    for c in s.chars() {\n        sum += c.to_digit(10).unwrap() as isize;\n    }\n    if sum == s.len() as isize {\n        count += 1;\n    }\n    for i in 0..s.len() {\n        for j in i + 1..s.len() {\n            let mut sum = 0;\n            for k in i..j + 1 {\n                sum += s.chars().nth(k).unwrap().to_digit(10).unwrap() as isize;\n            }\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpf67yb6f7.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let num = c.to_digit(10).unwrap();\n        sum += num;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpmz3olkrc.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = s.len();\n    let mut arr: Vec<char> = s.chars().collect();\n    while i < n {\n        while j < n && sum <= length {\n            sum += arr[j].to_digit(10).unwrap() as isize;\n            length += 1;\n            j += 1;\n        }\n        if sum == length {\n            count += 1;\n        }\n        sum -= arr[i].to_digit(10).unwrap() as isize;\n        length -= 1;\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmpd_mo_0_g.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count: isize = 0;\n    let mut sum: isize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut n: usize = s.len();\n    let mut v: Vec<isize> = vec![0; n + 1];\n    for i in 0..n {\n        v[i + 1] = v[i] + (s.chars().nth(i).unwrap() as isize - '0' as isize);\n    }\n    for i in 0..n {\n        for j in i + 1..n + 1 {\n            if v[j] - v[i] == (j - i) as isize {\n                count += 1;\n            }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = s.len();\n    let mut arr: Vec<char> = s.chars().collect();\n    while i < n {\n        while j < n && sum <= len {\n            sum += arr[j].to_digit(10).unwrap() as isize;\n            len += 1;\n            j += 1;\n        }\n        if sum == len {\n            count += 1;\n        }\n        sum -= arr[i].to_digit(10).unwrap() as isize;\n        len -= 1;\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmpnfni7bt_.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        let mut j = i + 1;\n        while j <= s.len() {\n            let sub = &s[i..j];\n            let mut sum = 0;\n            for c in sub.chars() {\n                sum += c.to_digit(10).unwrap() as isize;\n            }\n            if sum == sub.len() as isize {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        let n = c.to_digit(10).unwrap();\n        sum += n;\n        len += 1;\n        if sum == len {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpyku0al1j.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub_str = &s[i..j + 1];\n            let sum = sub_str.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub_str.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub_str = &s[i..j + 1];\n            let sum = sub_str.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub_str.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut n = s.len();\n    let mut i = 0;\n    let mut j = 0;\n    let mut v: Vec<char> = s.chars().collect();\n\n    while i < n && j < n {\n        sum = sum + v[j].to_digit(10).unwrap() as isize;\n        if sum == j as isize - i as isize + 1 {\n            count = count + 1;\n        }\n        if sum > j as isize - i as isize + 1 {\n            sum = sum - v[i].to_digit(10).unwrap() as isize;\n            i = i + 1;\n        } else {\n            j = j + 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmp9ksez2lz.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = s.len();\n    let mut v: Vec<char> = s.chars().collect();\n    while i < n && j < n {\n        sum += v[j].to_digit(10).unwrap() as isize;\n        if sum == (j - i + 1) as isize {\n            count += 1;\n        }\n        j += 1;\n        if j == n && i < n - 1 {\n            i += 1;\n            j = i;\n            sum = 0;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            if sub.len() == sum_of_digits(sub) {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `sum_of_digits` in this scope\n --> /tmp/tmpdzzfk2bv.rs:7:29\n  |\n7 |             if sub.len() == sum_of_digits(sub) {\n  |                             ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let mut sum = 0;\n            for k in i..=j {\n                sum += (s.chars().nth(k).unwrap() as u8 - '0' as u8) as isize;\n            }\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    let mut arr = s.chars().collect::<Vec<char>>();\n    while i < arr.len() {\n        sum = 0;\n        len = 0;\n        j = i;\n        while j < arr.len() {\n            sum += arr[j].to_digit(10).unwrap() as isize;\n            len += 1;\n            if sum == len as isize {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        let num = c.to_digit(10).unwrap();\n        sum += num;\n        len += 1;\n        if sum == len {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpnw_ccos7.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        let num = c.to_digit(10).unwrap();\n        sum += num;\n        len += 1;\n        if sum == len {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpnw_ccos7.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub_str = &s[i..j + 1];\n            let mut sum = 0;\n            for c in sub_str.chars() {\n                sum += c.to_digit(10).unwrap() as isize;\n            }\n            if sum == sub_str.len() as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub_str = &s[i..j + 1];\n            let sum = sub_str.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub_str.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        if c.is_digit(10) {\n            sum += c.to_digit(10).unwrap() as isize;\n            len += 1;\n        } else {\n            if sum == len {\n                count += 1;\n            }\n            sum = 0;\n            len = 0;\n        }\n    }\n    if sum == len {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmp5tyayzlc.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..=j];\n            let sum = sub.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sub.len() as u32 == sum {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        if c.is_numeric() {\n            sum += c.to_digit(10).unwrap() as isize;\n            len += 1;\n        } else {\n            if sum == len {\n                count += 1;\n            }\n            sum = 0;\n            len = 0;\n        }\n    }\n    if sum == len {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmph7ycc9ge.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = s.len();\n    let mut arr = s.chars().collect::<Vec<char>>();\n    while i < n {\n        sum = 0;\n        len = 0;\n        j = i;\n        while j < n {\n            sum += (arr[j] as u8 - '0' as u8) as isize;\n            len += 1;\n            if sum == len {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count: isize = 0;\n    let mut sum: isize = 0;\n    let mut len: isize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut v: Vec<char> = s.chars().collect();\n    while i < v.len() {\n        sum = 0;\n        len = 0;\n        j = i;\n        while j < v.len() {\n            sum += v[j].to_digit(10).unwrap() as isize;\n            len += 1;\n            if sum == len {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        if c.is_numeric() {\n            sum += c.to_digit(10).unwrap() as isize;\n            length += 1;\n        } else {\n            if sum == length {\n                count += 1;\n            }\n            sum = 0;\n            length = 0;\n        }\n    }\n    if sum == length {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmpz9v1z0kf.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut chars = s.chars();\n    while let Some(c) = chars.next() {\n        let n = c.to_digit(10).unwrap() as isize;\n        sum += n;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n        i += 1;\n        while j < i {\n            let n = s.chars().nth(j).unwrap().to_digit(10).unwrap() as isize;\n            sum -= n;\n            length -= 1;\n            if sum == length {\n                count += 1;\n            }\n            j += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `10`,\n right: `6`', /tmp/tmpypgwppvw.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count: isize = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let mut sum: isize = 0;\n            for k in i..=j {\n                sum += s.chars().nth(k).unwrap().to_digit(10).unwrap() as isize;\n            }\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        if c.is_numeric() {\n            sum += c.to_digit(10).unwrap() as isize;\n            length += 1;\n        } else {\n            if sum == length {\n                count += 1;\n            }\n            sum = 0;\n            length = 0;\n        }\n    }\n    if sum == length {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmpz9v1z0kf.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub_str = &s[i..=j];\n            let mut sum = 0;\n            for c in sub_str.chars() {\n                sum += c.to_digit(10).unwrap();\n            }\n            if sum == sub_str.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let num = c.to_digit(10).unwrap() as isize;\n        sum += num;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpf33_17rh.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    for (i, c) in s.chars().enumerate() {\n        sum += c.to_digit(10).unwrap() as isize;\n        if sum == (i + 1) as isize {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpvb9lom1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count: isize = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let mut sum: isize = 0;\n            for k in i..=j {\n                sum += s.chars().nth(k).unwrap().to_digit(10).unwrap() as isize;\n            }\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let mut sum = 0;\n            for k in i..=j {\n                sum += (s.chars().nth(k).unwrap() as u8 - '0' as u8) as isize;\n            }\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        if c.is_digit(10) {\n            sum += c.to_digit(10).unwrap() as isize;\n            length += 1;\n        } else {\n            if sum == length {\n                count += 1;\n            }\n            sum = 0;\n            length = 0;\n        }\n    }\n    if sum == length {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmp678obhz6.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = s.len();\n    let mut v: Vec<i32> = s.chars().map(|c| c.to_digit(10).unwrap() as i32).collect();\n    while j < n {\n        sum += v[j];\n        if sum == j - i + 1 {\n            count += 1;\n        }\n        if sum > j - i + 1 {\n            while i < j && sum > j - i + 1 {\n                sum -= v[i];\n                i += 1;\n            }\n            if sum == j - i + 1 {\n                count += 1;\n            }\n        }\n        j += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfnr5_4hq.rs:11:19\n   |\n11 |         if sum == j - i + 1 {\n   |                   ^^^^^^^^^ expected `i32`, found `usize`\n   |\nhelp: you can convert a `usize` to an `i32` and panic if the converted value doesn't fit\n   |\n11 |         if sum == (j - i + 1).try_into().unwrap() {\n   |                   +         +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfnr5_4hq.rs:14:18\n   |\n14 |         if sum > j - i + 1 {\n   |                  ^^^^^^^^^ expected `i32`, found `usize`\n   |\nhelp: you can convert a `usize` to an `i32` and panic if the converted value doesn't fit\n   |\n14 |         if sum > (j - i + 1).try_into().unwrap() {\n   |                  +         +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfnr5_4hq.rs:15:34\n   |\n15 |             while i < j && sum > j - i + 1 {\n   |                                  ^^^^^^^^^ expected `i32`, found `usize`\n   |\nhelp: you can convert a `usize` to an `i32` and panic if the converted value doesn't fit\n   |\n15 |             while i < j && sum > (j - i + 1).try_into().unwrap() {\n   |                                  +         +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfnr5_4hq.rs:19:23\n   |\n19 |             if sum == j - i + 1 {\n   |                       ^^^^^^^^^ expected `i32`, found `usize`\n   |\nhelp: you can convert a `usize` to an `i32` and panic if the converted value doesn't fit\n   |\n19 |             if sum == (j - i + 1).try_into().unwrap() {\n   |                       +         +++++++++++++++++++++\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count: isize = 0;\n    let mut sum: isize = 0;\n    let mut len: isize = 0;\n    let mut i: isize = 0;\n    let mut j: isize = 0;\n    let mut k: isize = 0;\n    let mut l: isize = 0;\n    let mut m: isize = 0;\n    let mut n: isize = 0;\n    let mut o: isize = 0;\n    let mut p: isize = 0;\n    let mut q: isize = 0;\n    let mut r: isize = 0;\n    let mut s: isize = 0;\n    let mut t: isize = 0;\n    let mut u: isize = 0;\n    let mut v: isize = 0;\n    let mut w: isize = 0;\n    let mut x: isize = 0;\n    let mut y: isize = 0;\n    let mut z: isize = 0;\n    let mut a: isize = 0;\n    let mut b: isize = 0;\n    let mut c: isize = 0;\n    let mut d: isize = 0;\n    let mut e: isize = 0;\n    let mut f: isize = 0;\n    let mut g: isize = 0;\n    let mut h: isize = 0;\n    let mut ii: isize = 0;\n    let mut jj: isize = 0;\n    let mut kk: isize = 0;\n    let mut ll: isize = 0;\n    let mut mm: isize = 0;\n    let mut nn: isize = 0;\n    let mut oo: isize = 0;\n    let mut pp: isize = 0;\n    let mut qq: isize = 0;\n    let mut rr: isize = 0;\n    let mut ss: isize = 0;\n    let mut tt: isize = 0;\n    let mut uu: isize = 0;\n    let mut vv: isize = 0;\n    let mut ww: isize = 0;\n    let mut xx: isize = 0;\n    let mut yy:\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "error: expected type, found `}`\n  --> /tmp/tmpaumx6eer.rs:49:1\n   |\n48 |     let mut yy:\n   |         ------ while parsing the type for `mut yy`\n49 | }\n   | ^ expected type\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let digit = c.to_digit(10).unwrap();\n        sum += digit;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpkuokrq5g.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub_str = &s[i..j + 1];\n            let sum = sub_str.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub_str.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = s.len();\n    let mut v: Vec<char> = s.chars().collect();\n    while i < n {\n        sum = 0;\n        length = 0;\n        j = i;\n        while j < n {\n            sum += v[j].to_digit(10).unwrap() as isize;\n            length += 1;\n            if sum == length {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let mut sum = 0;\n            for c in sub.chars() {\n                sum += c.to_digit(10).unwrap();\n            }\n            if sum == sub.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..=j];\n            let sum = sub.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count: isize = 0;\n    let mut sum: isize = 0;\n    let mut len: isize = 0;\n    let mut arr: Vec<isize> = Vec::new();\n    let mut i: usize = 0;\n    while i < s.len() {\n        let mut j: usize = i;\n        sum = 0;\n        len = 0;\n        while j < s.len() {\n            let c: char = s.chars().nth(j).unwrap();\n            let n: isize = c.to_digit(10).unwrap() as isize;\n            sum += n;\n            len += 1;\n            if sum == len {\n                count += 1;\n                arr.push(sum);\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count: isize = 0;\n    let mut sum: isize = 0;\n    let mut len: isize = 0;\n    for c in s.chars() {\n        sum += c.to_digit(10).unwrap() as isize;\n        len += 1;\n        if sum == len {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmp0ew68sso.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let mut sum = 0;\n            for k in i..=j {\n                sum += s.chars().nth(k).unwrap().to_digit(10).unwrap() as isize;\n            }\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut chars = s.chars();\n    while let Some(c) = chars.next() {\n        let digit = c.to_digit(10).unwrap();\n        sum += digit;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n        i += 1;\n        while sum > length {\n            let c = s.chars().nth(j).unwrap();\n            let digit = c.to_digit(10).unwrap();\n            sum -= digit;\n            length -= 1;\n            j += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpfbtuplce.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut sum = 0;\n    let mut n = s.len();\n    let mut v: Vec<char> = s.chars().collect();\n    while i < n {\n        while j < n {\n            sum += (v[j] as u8 - '0' as u8) as isize;\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i;\n        sum = 0;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let num = c.to_digit(10).unwrap() as isize;\n        sum += num;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpf33_17rh.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count: isize = 0;\n    let mut sum: isize = 0;\n    let mut length: isize = 0;\n    for c in s.chars() {\n        sum += c.to_digit(10).unwrap() as isize;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpzo1r8r92.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    while i < s.len() {\n        j = i;\n        sum = 0;\n        len = 0;\n        while j < s.len() {\n            let c = s.chars().nth(j).unwrap();\n            sum += c.to_digit(10).unwrap() as isize;\n            len += 1;\n            if sum == len as isize {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count: isize = 0;\n    let mut sum: isize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut n: usize = s.len();\n    let mut v: Vec<isize> = vec![0; n + 1];\n    for i in 0..n {\n        v[i + 1] = v[i] + (s.chars().nth(i).unwrap().to_digit(10).unwrap() as isize);\n    }\n    for i in 0..n {\n        for j in i..n {\n            sum = v[j + 1] - v[i];\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let sum = sub.chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let sum = sub.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        if c.is_numeric() {\n            sum += c.to_digit(10).unwrap() as isize;\n            length += 1;\n        } else {\n            if sum == length {\n                count += 1;\n            }\n            sum = 0;\n            length = 0;\n        }\n    }\n    if sum == length {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmpz9v1z0kf.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        if c.is_numeric() {\n            sum += c.to_digit(10).unwrap() as isize;\n            len += 1;\n        } else {\n            if sum == len {\n                count += 1;\n            }\n            sum = 0;\n            len = 0;\n        }\n    }\n    if sum == len {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmph7ycc9ge.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count: isize = 0;\n    let mut sum: isize = 0;\n    let mut len: isize = 0;\n    let mut i: isize = 0;\n    let mut j: isize = 0;\n    let mut k: isize = 0;\n    let mut l: isize = 0;\n    let mut m: isize = 0;\n    let mut n: isize = 0;\n    let mut o: isize = 0;\n    let mut p: isize = 0;\n    let mut q: isize = 0;\n    let mut r: isize = 0;\n    let mut s: isize = 0;\n    let mut t: isize = 0;\n    let mut u: isize = 0;\n    let mut v: isize = 0;\n    let mut w: isize = 0;\n    let mut x: isize = 0;\n    let mut y: isize = 0;\n    let mut z: isize = 0;\n    let mut a: isize = 0;\n    let mut b: isize = 0;\n    let mut c: isize = 0;\n    let mut d: isize = 0;\n    let mut e: isize = 0;\n    let mut f: isize = 0;\n    let mut g: isize = 0;\n    let mut h: isize = 0;\n    let mut ii: isize = 0;\n    let mut jj: isize = 0;\n    let mut kk: isize = 0;\n    let mut ll: isize = 0;\n    let mut mm: isize = 0;\n    let mut nn: isize = 0;\n    let mut oo: isize = 0;\n    let mut pp: isize = 0;\n    let mut qq: isize = 0;\n    let mut rr: isize = 0;\n    let mut ss: isize = 0;\n    let mut tt: isize = 0;\n    let mut uu: isize = 0;\n    let mut vv: isize = 0;\n    let mut ww: isize = 0;\n    let mut xx: isize = 0;\n    let mut yy:\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "error: expected type, found `}`\n  --> /tmp/tmpaumx6eer.rs:49:1\n   |\n48 |     let mut yy:\n   |         ------ while parsing the type for `mut yy`\n49 | }\n   | ^ expected type\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count: isize = 0;\n    let mut sum: isize = 0;\n    let mut len: isize = 0;\n    for c in s.chars() {\n        let n = c.to_digit(10).unwrap() as isize;\n        sum += n;\n        len += 1;\n        if sum == len {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpgwh7wvtf.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        if c.is_numeric() {\n            sum += c.to_digit(10).unwrap() as isize;\n            length += 1;\n        } else {\n            if sum == length {\n                count += 1;\n            }\n            sum = 0;\n            length = 0;\n        }\n    }\n    if sum == length {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmpz9v1z0kf.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    let mut i = 0;\n    while i < s.len() {\n        sum += s.chars().nth(i).unwrap().to_digit(10).unwrap() as isize;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmphg_caqd6.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub_str = &s[i..j + 1];\n            let mut sum = 0;\n            for c in sub_str.chars() {\n                sum += c.to_digit(10).unwrap() as isize;\n            }\n            if sum == sub_str.len() as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let num = c.to_digit(10).unwrap();\n        sum += num;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpmz3olkrc.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub_str = &s[i..j + 1];\n            let sum = sub_str.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub_str.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = s.len();\n    let mut arr: Vec<char> = s.chars().collect();\n    while i < n {\n        sum = 0;\n        len = 0;\n        j = i;\n        while j < n {\n            sum += arr[j].to_digit(10).unwrap() as isize;\n            len += 1;\n            if sum == len {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let mut sum = 0;\n            for c in sub.chars() {\n                sum += c.to_digit(10).unwrap();\n            }\n            if sum == sub.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let num = c.to_digit(10).unwrap();\n        sum += num;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpmz3olkrc.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let mut sum = 0;\n            for k in i..=j {\n                sum += s.chars().nth(k).unwrap().to_digit(10).unwrap() as isize;\n            }\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let num = c.to_digit(10).unwrap() as isize;\n        sum += num;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpf33_17rh.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let digit = c.to_digit(10).unwrap();\n        sum += digit;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmped_10a38.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let mut sum = 0;\n            for k in i..=j {\n                sum += s.chars().nth(k).unwrap().to_digit(10).unwrap() as isize;\n            }\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j+1];\n            let sum = sub.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..=j];\n            let sum = sub.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>() as usize;\n            if sum == sub.len() {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count: isize = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let mut sum: isize = 0;\n            for k in i..=j {\n                sum += (s.chars().nth(k).unwrap() as isize) - 48;\n            }\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let mut sum = 0;\n            for k in i..=j {\n                sum += s.chars().nth(k).unwrap().to_digit(10).unwrap() as isize;\n            }\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = s.len();\n    let mut arr = s.chars().collect::<Vec<char>>();\n    while i < n {\n        sum = 0;\n        len = 0;\n        j = i;\n        while j < n {\n            sum += arr[j].to_digit(10).unwrap() as isize;\n            len += 1;\n            if sum == len {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count: isize = 0;\n    let mut sum: isize = 0;\n    let mut len: isize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut k: usize = 0;\n    let mut l: usize = 0;\n    let mut m: usize = 0;\n    let mut n: usize = 0;\n    let mut o: usize = 0;\n    let mut p: usize = 0;\n    let mut q: usize = 0;\n    let mut r: usize = 0;\n    let mut s: usize = 0;\n    let mut t: usize = 0;\n    let mut u: usize = 0;\n    let mut v: usize = 0;\n    let mut w: usize = 0;\n    let mut x: usize = 0;\n    let mut y: usize = 0;\n    let mut z: usize = 0;\n    let mut a: usize = 0;\n    let mut b: usize = 0;\n    let mut c: usize = 0;\n    let mut d: usize = 0;\n    let mut e: usize = 0;\n    let mut f: usize = 0;\n    let mut g: usize = 0;\n    let mut h: usize = 0;\n    let mut i1: usize = 0;\n    let mut j1: usize = 0;\n    let mut k1: usize = 0;\n    let mut l1: usize = 0;\n    let mut m1: usize = 0;\n    let mut n1: usize = 0;\n    let mut o1: usize = 0;\n    let mut p1: usize = 0;\n    let mut q1: usize = 0;\n    let mut r1: usize = 0;\n    let mut s1: usize = 0;\n    let mut t1: usize = 0;\n    let mut u1: usize = 0;\n    let mut v1: usize = 0;\n    let mut w1: usize = 0;\n    let mut x1: usize = 0;\n\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp_ldv0n8w.rs:2:35\n  |\n2 | fn count_Substrings(s: String) -> isize {\n  |    ----------------               ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut arr = s.chars().collect::<Vec<char>>();\n    while i < arr.len() {\n        if arr[i].is_digit(10) {\n            sum += arr[i].to_digit(10).unwrap() as isize;\n            len += 1;\n            if sum == len {\n                count += 1;\n            }\n        } else {\n            sum = 0;\n            len = 0;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpe9hkqh0a.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let sum = sub.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n\n    for i in s.chars() {\n        if i.is_digit(10) {\n            sum += i.to_digit(10).unwrap() as isize;\n            length += 1;\n        } else {\n            if sum == length {\n                count += 1;\n            }\n            sum = 0;\n            length = 0;\n        }\n    }\n\n    if sum == length {\n        count += 1;\n    }\n\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmpe4td4fvr.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = s.len();\n    let mut v: Vec<char> = s.chars().collect();\n    while i < n {\n        while j < n && sum <= j - i {\n            sum += v[j].to_digit(10).unwrap() as isize;\n            j += 1;\n        }\n        if sum == j - i {\n            count += 1;\n        }\n        sum -= v[i].to_digit(10).unwrap() as isize;\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp48q5ah1q.rs:11:20\n   |\n11 |             sum += v[j].to_digit(10).unwrap() as isize;\n   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot add-assign `isize` to `usize`\n  --> /tmp/tmp48q5ah1q.rs:11:17\n   |\n11 |             sum += v[j].to_digit(10).unwrap() as isize;\n   |                 ^^ no implementation for `usize += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp48q5ah1q.rs:17:16\n   |\n17 |         sum -= v[i].to_digit(10).unwrap() as isize;\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract-assign `isize` from `usize`\n  --> /tmp/tmp48q5ah1q.rs:17:13\n   |\n17 |         sum -= v[i].to_digit(10).unwrap() as isize;\n   |             ^^ no implementation for `usize -= isize`\n   |\n   = help: the trait `SubAssign<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `SubAssign<Rhs>`:\n             <f32 as SubAssign<&f32>>\n             <f32 as SubAssign>\n             <f64 as SubAssign<&f64>>\n             <f64 as SubAssign>\n             <i128 as SubAssign<&i128>>\n             <i128 as SubAssign>\n             <i16 as SubAssign<&i16>>\n             <i16 as SubAssign>\n           and 20 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count: isize = 0;\n    let mut sum: isize = 0;\n    let mut length: isize = 0;\n    let mut i: usize = 0;\n    while i < s.len() {\n        let c = s.chars().nth(i).unwrap();\n        if c.is_digit(10) {\n            sum += c.to_digit(10).unwrap() as isize;\n            length += 1;\n        } else {\n            if sum == length {\n                count += 1;\n            }\n            sum = 0;\n            length = 0;\n        }\n        i += 1;\n    }\n    if sum == length {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmp2ghotenf.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub_str = &s[i..j + 1];\n            let sum = sub_str.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub_str.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let num = c.to_digit(10).unwrap();\n        sum += num;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpmz3olkrc.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let sum = sub.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let sum = sub.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut v: Vec<char> = s.chars().collect();\n    let mut n = v.len();\n    while i < n {\n        while j < n {\n            sum += v[j].to_digit(10).unwrap() as isize;\n            len += 1;\n            if sum == len {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i;\n        sum = 0;\n        len = 0;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut chars = s.chars();\n    while let Some(c) = chars.next() {\n        let digit = c.to_digit(10).unwrap() as isize;\n        sum += digit;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n        i += 1;\n        while sum > length {\n            let digit = s.chars().nth(j).unwrap().to_digit(10).unwrap() as isize;\n            sum -= digit;\n            length -= 1;\n            j += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp56ei038s.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub_str = &s[i..j + 1];\n            let mut sum = 0;\n            for c in sub_str.chars() {\n                sum += c.to_digit(10).unwrap() as isize;\n            }\n            if sum == sub_str.len() as isize {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub_str = &s[i..j + 1];\n            let sum = sub_str.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub_str.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let mut sum = 0;\n            for k in i..=j {\n                sum += s.chars().nth(k).unwrap().to_digit(10).unwrap();\n            }\n            if sum == j - i + 1 {\n                count += 1;\n            }\n        }\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpymqyg8jb.rs:10:23\n   |\n10 |             if sum == j - i + 1 {\n   |                       ^^^^^^^^^ expected `u32`, found `usize`\n   |\nhelp: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit\n   |\n10 |             if sum == (j - i + 1).try_into().unwrap() {\n   |                       +         +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count: isize = 0;\n    let mut sum: isize = 0;\n    let mut length: isize = 0;\n    let mut temp: String = String::new();\n    for c in s.chars() {\n        if c.is_digit(10) {\n            temp.push(c);\n            sum += c.to_digit(10).unwrap() as isize;\n            length += 1;\n        } else {\n            if sum == length {\n                count += 1;\n            }\n            sum = 0;\n            length = 0;\n            temp = String::new();\n        }\n    }\n    if sum == length {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmplf09r4eh.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        let num = c.to_digit(10).unwrap();\n        sum += num;\n        len += 1;\n        if sum == len {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpnw_ccos7.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let num = c.to_digit(10).unwrap() as isize;\n        sum += num;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpf33_17rh.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}