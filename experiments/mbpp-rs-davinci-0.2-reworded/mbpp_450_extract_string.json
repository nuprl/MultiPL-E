{
  "name": "mbpp_450_extract_string",
  "language": "rs",
  "prompt": "/// Write a function to extract specified size of strings from a given vector of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut res = vec![];\n    for s in str {\n        if s.len() as isize == l {\n            res.push(s);\n        }\n    }\n    res",
    "    let mut new_vec: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            new_vec.push(i);\n        }\n    }\n    new_vec",
    "    let mut new_vec = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            new_vec.push(i);\n        }\n    }\n    new_vec",
    "    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i)\n        }\n    }\n    res",
    "    let mut v: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            v.push(i);\n        }\n    }\n    v",
    "    let mut v = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            v.push(s);\n        }\n    }\n    v",
    "    let mut v: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            v.push(i);\n        }\n    }\n    v",
    "    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res",
    "    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res",
    "    let mut result: Vec<String> = Vec::new();\n    for i in 0..str.len() {\n        if str[i].len() as isize == l {\n            result.push(str[i].clone());\n        }\n    }\n    result",
    "    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res",
    "    let mut v = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            v.push(i);\n        }\n    }\n    v",
    "    let mut res = Vec::new();\n    for i in 0..str.len() {\n        if str[i].len() as isize == l {\n            res.push(str[i].clone());\n        }\n    }\n    res",
    "    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res",
    "    let mut v = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            v.push(i);\n        }\n    }\n    v",
    "    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res",
    "    let mut res = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            res.push(s);\n        }\n    }\n    res",
    "    let mut result = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            result.push(s);\n        }\n    }\n    result",
    "    let mut res = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            res.push(s);\n        }\n    }\n    res",
    "    str.into_iter()\n        .filter(|s| s.len() as isize == l)\n        .collect()"
  ]
}