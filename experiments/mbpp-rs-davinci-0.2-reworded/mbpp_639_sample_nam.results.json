{
  "name": "mbpp_639_sample_nam",
  "language": "rs",
  "prompt": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if !name.starts_with(char::is_lowercase) {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().nth(0).unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if !name.chars().next().unwrap().is_lowercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().nth(0).unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if !name.chars().next().unwrap().is_lowercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    sample_names.iter().filter(|x| x.chars().next().unwrap().is_uppercase()).map(|x| x.len() as isize).sum()\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    sample_names.iter().filter(|x| x.chars().next().unwrap().is_uppercase()).map(|x| x.len() as isize).sum()\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.starts_with(|c: char| c.is_uppercase()) {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().nth(0).unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if !name.starts_with(|c: char| c.is_lowercase()) {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().nth(0).unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names.iter() {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().nth(0).unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if !name.starts_with(char::is_lowercase) {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut total_length = 0;\n    for name in sample_names {\n        if name.chars().nth(0).unwrap().is_uppercase() {\n            total_length += name.len() as isize;\n        }\n    }\n    total_length\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if !name.starts_with(|c: char| c.is_lowercase()) {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for sample_name in sample_names {\n        if sample_name.chars().next().unwrap().is_uppercase() {\n            sum += sample_name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names.iter() {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().nth(0).unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().nth(0).unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().nth(0).unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    sample_names.iter().filter(|x| x.chars().next().unwrap().is_uppercase()).map(|x| x.len() as isize).sum()\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().nth(0).unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum: isize = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().nth(0).unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    sample_names.iter().filter(|name| name.chars().next().unwrap().is_uppercase()).map(|name| name.len() as isize).sum()\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum: isize = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for i in sample_names {\n        if i.chars().next().unwrap().is_uppercase() {\n            sum += i.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().nth(0).unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if !name.starts_with(char::is_lowercase) {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().nth(0).unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    sample_names.iter().filter(|x| x.chars().next().unwrap().is_uppercase()).map(|x| x.len() as isize).sum()\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if !name.chars().next().unwrap().is_lowercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if !name.starts_with(|c: char| c.is_lowercase()) {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().nth(0).unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    sample_names.iter()\n        .filter(|name| name.chars().nth(0).unwrap().is_uppercase())\n        .fold(0, |acc, name| acc + name.len() as isize)\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.starts_with(char::is_lowercase) {\n            continue;\n        }\n        sum += name.len() as isize;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().nth(0).unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if !name.starts_with(|c: char| c.is_lowercase()) {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().nth(0).unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    sample_names.iter()\n        .filter(|name| name.chars().next().unwrap().is_uppercase())\n        .map(|name| name.len() as isize)\n        .sum()\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    sample_names\n        .iter()\n        .filter(|x| x.chars().next().unwrap().is_uppercase())\n        .map(|x| x.len() as isize)\n        .sum()\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1666122769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n    for name in sample_names {\n        if name.chars().next().unwrap().is_uppercase() {\n            sum += name.len() as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}