{
  "name": "mbpp_436_neg_nos",
  "language": "rs",
  "prompt": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).map(|x| x.clone()).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut neg_list = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_list.push(i);\n        }\n    }\n    neg_list\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).map(|x| *x).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).map(|&x| x).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut neg_list = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_list.push(i);\n        }\n    }\n    neg_list\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| x < &0).cloned().collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut neg_nos: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_nos.push(i);\n        }\n    }\n    neg_nos\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut neg_list: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_list.push(i);\n        }\n    }\n    neg_list\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).cloned().collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).map(|x| *x).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| x < &0).cloned().collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).map(|&x| x).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).cloned().collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut neg_list = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_list.push(i);\n        }\n    }\n    neg_list\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut neg_list: Vec<isize> = Vec::new();\n    for i in list1.iter() {\n        if *i < 0 {\n            neg_list.push(*i);\n        }\n    }\n    neg_list\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).map(|&x| x).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).cloned().collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|x| **x < 0).map(|x| *x).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).cloned().collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).cloned().collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| x < &0).cloned().collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut neg_nos = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_nos.push(i);\n        }\n    }\n    neg_nos\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|x| x < &0).map(|x| *x).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpdbopy4ux.rs:3:33\n  |\n3 |     list1.iter().filter(|x| x < &0).map(|x| *x).collect()\n  |                                 ^^ expected `&isize`, found integer\n  |\n  = note: expected reference `&&isize`\n             found reference `&{integer}`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).cloned().collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| x < &0).cloned().collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut neg_nos: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_nos.push(i);\n        }\n    }\n    neg_nos\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut neg_list = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_list.push(i);\n        }\n    }\n    neg_list\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut neg_list = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_list.push(i);\n        }\n    }\n    neg_list\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).map(|x| *x).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| x < &0).map(|x| *x).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).map(|&x| x).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).map(|&x| x).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut neg_list: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_list.push(i);\n        }\n    }\n    neg_list\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).cloned().collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).map(|x| *x).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut neg_list: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_list.push(i);\n        }\n    }\n    neg_list\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| x < &0).map(|x| x.clone()).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).map(|x| *x).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| x < &0).cloned().collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut neg_list = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_list.push(i);\n        }\n    }\n    neg_list\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut neg_nos = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_nos.push(i);\n        }\n    }\n    neg_nos\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).cloned().collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|x| **x < 0).map(|x| *x).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).cloned().collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut neg_nos = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_nos.push(i);\n        }\n    }\n    neg_nos\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| x < &0).map(|x| x.clone()).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut neg_list: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_list.push(i);\n        }\n    }\n    neg_list\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).map(|&x| x).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).map(|x| *x).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut neg_nos = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_nos.push(i);\n        }\n    }\n    neg_nos\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut neg_list = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_list.push(i);\n        }\n    }\n    neg_list\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).map(|&x| x).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut neg_list = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_list.push(i);\n        }\n    }\n    neg_list\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut neg_list = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_list.push(i);\n        }\n    }\n    neg_list\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| x < &0).cloned().collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut neg_list: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_list.push(i);\n        }\n    }\n    neg_list\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut neg_list = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_list.push(i);\n        }\n    }\n    neg_list\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| *x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut neg_list = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_list.push(i);\n        }\n    }\n    neg_list\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).cloned().collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1666122761,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.iter().filter(|&x| *x < 0).map(|&x| x).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|&x| x < 0).collect()\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut list2 = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            list2.push(i);\n        }\n    }\n    list2\n}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
      "timestamp": 1665510069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}