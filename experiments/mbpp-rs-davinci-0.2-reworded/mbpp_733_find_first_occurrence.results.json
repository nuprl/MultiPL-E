{
  "name": "mbpp_733_find_first_occurrence",
  "language": "rs",
  "prompt": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            result = m as isize;\n            r = m - 1;\n        } else if A[m] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] < x {\n            l = m + 1;\n        } else if A[m as usize] > x {\n            r = m - 1;\n        } else {\n            if m == 0 || A[(m - 1) as usize] < x {\n                return m;\n            } else {\n                r = m - 1;\n            }\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut res = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            res = m as isize;\n            r = m - 1;\n        } else if A[m] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            result = m as isize;\n            r = m - 1;\n        } else if A[m] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut result = -1;\n\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            result = m as isize;\n            r = m - 1;\n        } else if A[m] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            result = m as isize;\n            r = m - 1;\n        } else if A[m] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            result = m as isize;\n            r = m - 1;\n        } else if A[m] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut res = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            res = m as isize;\n            r = m - 1;\n        } else if A[m] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n\n    while left <= right {\n        let mid = (left + right) / 2;\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid as isize;\n            } else {\n                right = mid - 1;\n            }\n        } else if A[mid] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut res = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            res = m as isize;\n            r = m - 1;\n        } else if A[m] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            result = m as isize;\n            r = m - 1;\n        } else if A[m] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = A.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            high = mid - 1;\n        } else if A[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            result = m as isize;\n            r = m - 1;\n        } else if A[m] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = (left + right) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = A.len() - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            high = mid - 1;\n        } else if A[mid] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            result = m as isize;\n            r = m - 1;\n        } else if A[m] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            result = m as isize;\n            r = m - 1;\n        } else if A[m] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            result = m as isize;\n            r = m - 1;\n        } else if A[m] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            result = m as isize;\n            r = m - 1;\n        } else if A[m] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] < x {\n            l = m + 1;\n        } else if A[m] > x {\n            r = m - 1;\n        } else {\n            if m == 0 || A[m - 1] < x {\n                return m as isize;\n            } else {\n                r = m - 1;\n            }\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = (left + right) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            result = m as isize;\n            r = m - 1;\n        } else if A[m] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            result = m as isize;\n            r = m - 1;\n        } else if A[m] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            result = m as isize;\n            r = m - 1;\n        } else if A[m] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = A.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            high = mid - 1;\n        } else if A[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            result = m as isize;\n            r = m - 1;\n        } else if A[m] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            result = m as isize;\n            r = m - 1;\n        } else if A[m] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = (left + right) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = (left + right) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] > x {\n            r = m - 1;\n        } else if A[m] == x {\n            result = m as isize;\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            result = m as isize;\n            r = m - 1;\n        } else if A[m] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = (left + right) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = A.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            high = mid - 1;\n        } else if A[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            result = m as isize;\n            r = m - 1;\n        } else if A[m] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = A.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            high = mid - 1;\n        } else if A[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = A.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            high = mid - 1;\n        } else if A[mid] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize;\n    while left < right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            right = mid;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    if left == A.len() as isize || A[left as usize] != x {\n        -1\n    } else {\n        left\n    }\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = A.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            high = mid - 1;\n        } else if A[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = A.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            high = mid - 1;\n        } else if A[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = A.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            high = mid - 1;\n        } else if A[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            result = m as isize;\n            r = m - 1;\n        } else if A[m] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            if m == 0 || A[(m - 1) as usize] != x {\n                return m;\n            } else {\n                r = m - 1;\n            }\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            result = m as isize;\n            r = m - 1;\n        } else if A[m] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = A.len() - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            high = mid - 1;\n        } else if A[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = (l + r) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut res = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            res = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = (left + right) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] > x {\n            r = m - 1;\n        } else if A[m] == x {\n            result = m as isize;\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if x < A[mid as usize] {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = A.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            high = mid - 1;\n        } else if A[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            result = m as isize;\n            r = m - 1;\n        } else if A[m] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = A.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            high = mid - 1;\n        } else if A[mid] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = A.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            high = mid - 1;\n        } else if A[mid] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            if m == 0 || A[(m - 1) as usize] != x {\n                return m;\n            }\n            r = m - 1;\n        } else if A[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m] == x {\n            result = m as isize;\n            r = m - 1;\n        } else if A[m] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = (left + right) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            if m == 0 || A[(m - 1) as usize] != x {\n                return m;\n            }\n            r = m - 1;\n        } else if A[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = A.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            high = mid - 1;\n        } else if A[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            right = mid - 1;\n        } else if A[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = A.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if A[mid as usize] == x {\n            result = mid;\n            high = mid - 1;\n        } else if A[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = A.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if A[m as usize] == x {\n            result = m;\n            r = m - 1;\n        } else if A[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1665517230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = (left + right) / 2;\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}