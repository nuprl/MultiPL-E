{
  "name": "mbpp_557_toggle_string",
  "language": "rs",
  "prompt": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_ascii_uppercase() {\n            result.push(c.to_ascii_lowercase());\n        } else {\n            result.push(c.to_ascii_uppercase());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| c.to_ascii_lowercase()).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python\"`,\n right: `\"pYTHON\"`', /tmp/tmpj7v_ef5r.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| c.to_ascii_lowercase()).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python\"`,\n right: `\"pYTHON\"`', /tmp/tmpj7v_ef5r.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_ascii_uppercase() {\n            result.push(c.to_ascii_lowercase());\n        } else {\n            result.push(c.to_ascii_uppercase());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| match c {\n            'a'..='z' => c.to_ascii_uppercase(),\n            'A'..='Z' => c.to_ascii_lowercase(),\n            _ => c,\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut new_string = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            new_string.push(c.to_lowercase().next().unwrap());\n        } else {\n            new_string.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut new_string = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            new_string.push(c.to_lowercase().next().unwrap());\n        } else {\n            new_string.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| {\n            if c.is_ascii_uppercase() {\n                c.to_ascii_lowercase()\n            } else {\n                c.to_ascii_uppercase()\n            }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        match c {\n            'a'...'z' => c.to_uppercase().next().unwrap(),\n            'A'...'Z' => c.to_lowercase().next().unwrap(),\n            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_ascii_lowercase() {\n            result.push(c.to_ascii_uppercase());\n        } else {\n            result.push(c.to_ascii_lowercase());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_ascii_uppercase() {\n        c.to_ascii_lowercase()\n    } else {\n        c.to_ascii_uppercase()\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n        } else {\n            c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp526bzoa2.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| match c {\n            'a'..='z' => c.to_ascii_uppercase(),\n            'A'..='Z' => c.to_ascii_lowercase(),\n            _ => c,\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut new_string = String::new();\n\n    for c in string.chars() {\n        if c.is_lowercase() {\n            new_string.push(c.to_uppercase().next().unwrap());\n        } else {\n            new_string.push(c.to_lowercase().next().unwrap());\n        }\n    }\n\n    new_string\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut new_string = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            new_string.push(c.to_lowercase().next().unwrap());\n        } else {\n            new_string.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| match c {\n            'a'..='z' => c.to_ascii_uppercase(),\n            'A'..='Z' => c.to_ascii_lowercase(),\n            _ => c,\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_ascii_uppercase() } else { c.to_ascii_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_ascii_uppercase() {\n        c.to_ascii_lowercase()\n    } else {\n        c.to_ascii_uppercase()\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| c.to_ascii_uppercase().to_ascii_lowercase()).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python\"`,\n right: `\"pYTHON\"`', /tmp/tmpbnonz34v.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpzvfncx7v.rs:3:76\n  |\n3 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()\n  |                                                  ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`, found struct `ToLowercase`\n  |                                                  |\n  |                                                  expected because of this\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| c.to_ascii_lowercase()).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python\"`,\n right: `\"pYTHON\"`', /tmp/tmpj7v_ef5r.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpzvfncx7v.rs:3:76\n  |\n3 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()\n  |                                                  ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`, found struct `ToLowercase`\n  |                                                  |\n  |                                                  expected because of this\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        match c {\n            'a'...'z' => (c as u8 - b'a' + b'A') as char,\n            'A'...'Z' => (c as u8 - b'A' + b'a') as char,\n            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_ascii_lowercase() {\n        c.to_ascii_uppercase()\n    } else {\n        c.to_ascii_lowercase()\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_lowercase() {\n            result.push(c.to_uppercase().next().unwrap());\n        } else {\n            result.push(c.to_lowercase().next().unwrap());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| c.to_ascii_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"PYTHON\"`,\n right: `\"pYTHON\"`', /tmp/tmp8069gckz.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n        } else {\n            c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_lowercase() { c.to_uppercase().next().unwrap() } else { c.to_lowercase().next().unwrap() })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| c.to_ascii_lowercase()).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python\"`,\n right: `\"pYTHON\"`', /tmp/tmpj7v_ef5r.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_ascii_uppercase() {\n        c.to_ascii_lowercase()\n    } else {\n        c.to_ascii_uppercase()\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| c.to_ascii_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"PYTHON\"`,\n right: `\"pYTHON\"`', /tmp/tmp8069gckz.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_ascii_uppercase() {\n        c.to_ascii_lowercase()\n    } else {\n        c.to_ascii_uppercase()\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| match c {\n            'a'..='z' => c.to_ascii_uppercase(),\n            'A'..='Z' => c.to_ascii_lowercase(),\n            _ => c,\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_ascii_uppercase() {\n            result.push(c.to_ascii_lowercase());\n        } else {\n            result.push(c.to_ascii_uppercase());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpzvfncx7v.rs:3:76\n  |\n3 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()\n  |                                                  ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`, found struct `ToLowercase`\n  |                                                  |\n  |                                                  expected because of this\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut new_string = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            new_string.push(c.to_lowercase().next().unwrap());\n        } else {\n            new_string.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut new_string = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            new_string.push(c.to_lowercase().next().unwrap());\n        } else {\n            new_string.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_ascii_uppercase() {\n            result.push(c.to_ascii_lowercase());\n        } else {\n            result.push(c.to_ascii_uppercase());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut new_string = String::new();\n    for c in string.chars() {\n        if c.is_ascii_lowercase() {\n            new_string.push(c.to_ascii_uppercase());\n        } else if c.is_ascii_uppercase() {\n            new_string.push(c.to_ascii_lowercase());\n        } else {\n            new_string.push(c);\n        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmp6slf_19y.rs:5:66\n  |\n5 |         .map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() })\n  |                                        ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`, found struct `ToLowercase`\n  |                                        |\n  |                                        expected because of this\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| c.to_ascii_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"PYTHON\"`,\n right: `\"pYTHON\"`', /tmp/tmp8069gckz.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmp6slf_19y.rs:5:66\n  |\n5 |         .map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() })\n  |                                        ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`, found struct `ToLowercase`\n  |                                        |\n  |                                        expected because of this\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| {\n            if c.is_ascii_uppercase() {\n                c.to_ascii_lowercase()\n            } else {\n                c.to_ascii_uppercase()\n            }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n        } else {\n            c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_ascii_lowercase() {\n        c.to_ascii_uppercase()\n    } else {\n        c.to_ascii_lowercase()\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_lowercase() {\n            result.push(c.to_uppercase().next().unwrap());\n        } else if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| c.to_ascii_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"PYTHON\"`,\n right: `\"pYTHON\"`', /tmp/tmp8069gckz.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n        } else {\n            c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n    } else {\n        c.to_lowercase().next().unwrap()\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpzvfncx7v.rs:3:76\n  |\n3 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()\n  |                                                  ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`, found struct `ToLowercase`\n  |                                                  |\n  |                                                  expected because of this\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n    } else {\n        c.to_lowercase().next().unwrap()\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut new_string = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            new_string.push(c.to_lowercase().next().unwrap());\n        } else {\n            new_string.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut new_string = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            new_string.push(c.to_lowercase().next().unwrap());\n        } else {\n            new_string.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpzvfncx7v.rs:3:76\n  |\n3 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()\n  |                                                  ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`, found struct `ToLowercase`\n  |                                                  |\n  |                                                  expected because of this\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| c.to_ascii_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"PYTHON\"`,\n right: `\"pYTHON\"`', /tmp/tmp8069gckz.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n        } else {\n            c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n        } else {\n            c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| c.to_ascii_lowercase()).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python\"`,\n right: `\"pYTHON\"`', /tmp/tmpj7v_ef5r.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut new_string = String::new();\n    for c in string.chars() {\n        if c.is_ascii_uppercase() {\n            new_string.push(c.to_ascii_lowercase());\n        } else {\n            new_string.push(c.to_ascii_uppercase());\n        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n        } else {\n            c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_lowercase() {\n        c.to_ascii_uppercase()\n    } else {\n        c.to_ascii_lowercase()\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut new_string = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            new_string.push(c.to_lowercase().next().unwrap());\n        } else {\n            new_string.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| c.to_ascii_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"PYTHON\"`,\n right: `\"pYTHON\"`', /tmp/tmp8069gckz.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_ascii_uppercase() {\n        c.to_ascii_lowercase()\n    } else {\n        c.to_ascii_uppercase()\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_ascii_uppercase() {\n        c.to_ascii_lowercase()\n    } else {\n        c.to_ascii_uppercase()\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n        } else {\n            c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_ascii_uppercase() {\n            result.push(c.to_ascii_lowercase());\n        } else {\n            result.push(c.to_ascii_uppercase());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_ascii_uppercase() { c.to_ascii_lowercase() } else { c.to_ascii_uppercase() })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut chars = string.chars();\n    let mut result = String::new();\n    while let Some(c) = chars.next() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"PYTHON\"`,\n right: `\"pYTHON\"`', /tmp/tmp612drwo2.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpzvfncx7v.rs:3:76\n  |\n3 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()\n  |                                                  ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`, found struct `ToLowercase`\n  |                                                  |\n  |                                                  expected because of this\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars()\n        .map(|c| if c.is_ascii_uppercase() { c.to_ascii_lowercase() } else { c.to_ascii_uppercase() })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n        } else {\n            c.to_lowercase().next().unwrap()\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars().map(|c| if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n    }).collect()\n}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}