{
  "name": "mbpp_59_is_octagonal",
  "language": "rs",
  "prompt": "/// Write a function to find the nth octagonal number.\nfn is_octagonal(n: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = is_octagonal;\n    assert_eq!(candidate(5), 65);\n    assert_eq!(candidate(10), 280);\n    assert_eq!(candidate(15), 645);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut i = 1;\n    let mut oct = 1;\n    while oct < n {\n        i += 1;\n        oct = i * (3 * i - 2);\n    }\n    if oct == n {\n        oct\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        j += 1;\n        i = j * (3 * j - 2);\n    }\n    if i == n {\n        return j;\n    }\n    return 0;",
    "    let mut i = 1;\n    let mut oct = 1;\n    while oct < n {\n        i += 1;\n        oct = i * (3 * i - 2);\n    }\n    if oct == n {\n        oct\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        i = (3 * j * j - j) / 2;\n        j += 1;\n    }\n    if i == n {\n        return i;\n    }\n    return 0;",
    "    let mut i = 1;\n    let mut nth = 1;\n    while nth < n {\n        i += 1;\n        nth = i * (3 * i - 2);\n    }\n    if nth == n {\n        nth\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        i = i + j * 3;\n        j += 1;\n    }\n    if i == n {\n        return j;\n    }\n    return 0;",
    "    let x = (1.0 + (1.0 + 24.0 * n as f64).sqrt()) / 6.0;\n    if x == x.floor() {\n        n\n    } else {\n        0\n    }",
    "    let mut i = 0;\n    let mut j = 0;\n    loop {\n        j = i * (3 * i - 2);\n        if j == n {\n            return i;\n        }\n        if j > n {\n            return 0;\n        }\n        i += 1;\n    }",
    "    let mut i = 0;\n    let mut j = 0;\n    while i < n {\n        j += 1;\n        i = j * (3 * j - 2);\n    }\n    if i == n {\n        return j;\n    }\n    return 0;",
    "    let mut n = n;\n    let mut i = 1;\n    while n > 0 {\n        n -= i;\n        i += 3;\n    }\n    if n == 0 {\n        return i - 3;\n    }\n    return 0;",
    "    let mut i = 1;\n    let mut oct = 1;\n    while oct < n {\n        i += 1;\n        oct = i * (3 * i - 2);\n    }\n    if oct == n {\n        oct\n    } else {\n        0\n    }",
    "    let mut i = 0;\n    let mut oct = 0;\n    while oct < n {\n        i += 1;\n        oct = i * (3 * i - 2);\n    }\n    oct",
    "    let n = (n as f64).sqrt();\n    let n = n as isize;\n    if n * n * (3 * n - 2) == n {\n        n\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        i\n    } else {\n        0\n    }",
    "    let n = n as f64;\n    let x = (1.0 + (1.0 + 24.0 * n).sqrt()) / 6.0;\n    if x.fract() == 0.0 {\n        x as isize\n    } else {\n        0\n    }",
    "    let mut i = 0;\n    let mut j = 0;\n    while i < n {\n        i = 3 * j * j - j + 1;\n        j += 1;\n    }\n    if i == n {\n        n\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut octagonal = 0;\n    while octagonal < n {\n        octagonal = i * (3 * i - 2);\n        i += 1;\n    }\n    octagonal",
    "    let mut i = 1;\n    let mut oct = 1;\n    while oct < n {\n        i += 1;\n        oct = i * (3 * i - 2);\n    }\n    if oct == n {\n        oct\n    } else {\n        0\n    }",
    "    let n = n as f64;\n    let n = n.sqrt();\n    let n = n.ceil();\n    let n = n as isize;\n    let n = n * (3 * n - 2);\n    n",
    "    let mut i = 1;\n    let mut oct = 0;\n    while oct < n {\n        oct = i * (3 * i - 2);\n        i += 1;\n    }\n    oct"
  ]
}