{
  "name": "mbpp_277_dict_filter",
  "language": "rs",
  "prompt": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_277_dict_filter.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut result = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            result.insert(key, value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut result = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            result.insert(key, value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, val) in dict {\n        if val >= n {\n            new_dict.insert(key, val);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut filtered_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            filtered_dict.insert(key, value);\n        }\n    }\n    filtered_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (k, v) in dict {\n        if v >= n {\n            new_dict.insert(k, v);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict: HashMap<String, isize> = HashMap::new();\n    for (key, value) in dict.iter() {\n        if *value >= n {\n            new_dict.insert(key.to_string(), *value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1666122638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict.iter() {\n        if *value >= n {\n            new_dict.insert(key.to_string(), *value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1666122638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut result = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            result.insert(key, value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    dict.into_iter().filter(|&(_, v)| v >= n).collect()\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1666122638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict.iter() {\n        if value >= &n {\n            new_dict.insert(key.to_string(), *value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1666122638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict.iter() {\n        if *value >= n {\n            new_dict.insert(key.clone(), *value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1666122638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut filtered_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            filtered_dict.insert(key, value);\n        }\n    }\n    filtered_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (k, v) in dict {\n        if v >= n {\n            new_dict.insert(k, v);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict.iter() {\n        if *value >= n {\n            new_dict.insert(key.clone(), *value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1666122638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut result = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            result.insert(key, value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut filtered_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            filtered_dict.insert(key, value);\n        }\n    }\n    filtered_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (k, v) in dict {\n        if v >= n {\n            new_dict.insert(k, v);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    dict.into_iter().filter(|&(_, v)| v >= n).collect()\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1666122638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (k, v) in dict.iter() {\n        if *v >= n {\n            new_dict.insert(k.to_string(), *v);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1666122638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict.iter() {\n        if *value >= n {\n            new_dict.insert(key.clone(), value.clone());\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1666122638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict.iter() {\n        if *value >= n {\n            new_dict.insert(key.to_string(), *value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1666122638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    dict.into_iter().filter(|&(_, v)| v >= n).collect()\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1666122638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict: HashMap<String, isize> = HashMap::new();\n    for (key, value) in dict.iter() {\n        if *value >= n {\n            new_dict.insert(key.to_string(), *value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1666122638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut filtered_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            filtered_dict.insert(key, value);\n        }\n    }\n    filtered_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (k, v) in dict {\n        if v >= n {\n            new_dict.insert(k, v);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut filtered_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            filtered_dict.insert(key, value);\n        }\n    }\n    filtered_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict.iter() {\n        if *value >= n {\n            new_dict.insert(key.clone(), value.clone());\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1666122638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut filtered_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            filtered_dict.insert(key, value);\n        }\n    }\n    filtered_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            result.insert(key, value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1666122638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict {\n        if value >= n {\n            new_dict.insert(key, value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (k, v) in dict {\n        if v >= n {\n            new_dict.insert(k, v);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1665510114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    for (key, value) in dict.iter() {\n        if *value >= n {\n            new_dict.insert(key.to_string(), *value);\n        }\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n",
      "timestamp": 1666122638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}