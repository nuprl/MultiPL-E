{
  "name": "mbpp_452_loss_amount",
  "language": "rs",
  "prompt": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if sale_amount < actual_cost {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpcfq8m1lc.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if sale_amount < actual_cost {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpcfq8m1lc.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if sale_amount < actual_cost {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpcfq8m1lc.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount;\n    }\n    0\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpyfkwdcvi.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if sale_amount < actual_cost {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpcfq8m1lc.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if sale_amount < actual_cost {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpcfq8m1lc.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        actual_cost - sale_amount\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `300`,\n right: `0`', /tmp/tmpxd2k56kf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}