{
  "name": "mbpp_735_toggle_middle_bits",
  "language": "rs",
  "prompt": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask < n {\n        let bit = (n & mask) >> i;\n        result |= bit << i;\n        mask <<= 2;\n        i += 2;\n    }\n    result |= n & mask;\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `15`', /tmp/tmpl3tporvy.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask <= n {\n        result |= (mask ^ n) & mask;\n        mask <<= 1;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmpuhjrr48t.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 1;\n    let mut result = n;\n    while mask < n {\n        result = result ^ mask;\n        mask = mask << 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmpgb_3hx8b.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpnwj31_4m.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b10;\n    while mask < 0b100000000 {\n        n = n ^ mask;\n        mask = mask << 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `247`,\n right: `15`', /tmp/tmp9f2glun2.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpnwj31_4m.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 1;\n    let mut result = n;\n    while mask < n {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmp07df_3q5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b10;\n    let mut result = n;\n    while mask < 0b100000000 {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `247`,\n right: `15`', /tmp/tmpajma6sph.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b10;\n    let mut result = n;\n    for _ in 0..(n.count_ones() - 2) {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `15`', /tmp/tmp3n8skwks.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask <= n {\n        result |= (n ^ mask);\n        mask <<= 1;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `13`,\n right: `12`', /tmp/tmpl82_vd3a.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpnwj31_4m.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 0;\n    while i < (size_of::<isize>() * 8 - 2) {\n        let bit = (m & (1 << i)) >> i;\n        if bit == 1 {\n            m = m & !(1 << i);\n        } else {\n            m = m | (1 << i);\n        }\n        i += 1;\n    }\n    m\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `size_of` in this scope\n --> /tmp/tmpc5udu0qc.rs:5:16\n  |\n5 |     while i < (size_of::<isize>() * 8 - 2) {\n  |                ^^^^^^^ not found in this scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::intrinsics::size_of;\n  |\n1 | use std::mem::size_of;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 0;\n    while m > 0 {\n        if i != 0 && i != (m.count_ones() - 1) {\n            n ^= 1 << i;\n        }\n        m >>= 1;\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpxzcipcon.rs:7:13\n  |\n2 | fn toggle_middle_bits(n: isize) -> isize {\n  |                       - help: consider making this binding mutable: `mut n`\n...\n7 |             n ^= 1 << i;\n  |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 1;\n    while i < 64 {\n        m = m ^ (1 << i);\n        i += 2;\n    }\n    m\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-6148914691236517213`,\n right: `15`', /tmp/tmp_399sc80.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = n;\n    let mut i = 0;\n    while i < (std::mem::size_of::<isize>() * 8 - 2) {\n        if (n & mask) == 0 {\n            result |= mask;\n        } else {\n            result &= !mask;\n        }\n        mask <<= 1;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9223372036854775794`,\n right: `15`', /tmp/tmpuprt52eb.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while i < n.count_zeros() {\n        let bit = (n & mask) >> i;\n        result |= bit << i;\n        mask <<= 2;\n        i += 2;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `15`', /tmp/tmpce2wsn7m.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 1;\n    while i < 63 {\n        m = m ^ (1 << i);\n        i += 2;\n    }\n    m\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3074457345618258595`,\n right: `15`', /tmp/tmpqlgsjpiu.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b10;\n    let mut result = n;\n    while mask < n {\n        result = result ^ mask;\n        mask = mask << 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpjnmxk_4g.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n = n ^ mask;\n        mask = mask << 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpchddricu.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mask = (1 << (n.leading_zeros() - 1)) - 1;\n    n ^ mask\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `576460752303423478`,\n right: `15`', /tmp/tmpibw22_1m.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    while mask < n {\n        n ^= mask;\n        mask <<= 2;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `10`,\n right: `15`', /tmp/tmp6mjmeytn.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = n;\n    let mut i = 1;\n    while mask < n {\n        let bit = n & mask;\n        if bit == 0 {\n            result |= mask;\n        } else {\n            result &= !mask;\n        }\n        mask <<= 1;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14`,\n right: `15`', /tmp/tmptwez5juz.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 1;\n    let mut result = n;\n    while mask < n {\n        result = result ^ mask;\n        mask = mask << 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmpgb_3hx8b.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 1;\n    let mut res = n;\n    while mask < n {\n        res ^= mask;\n        mask <<= 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmpne6nbut7.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpnwj31_4m.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let first_bit = n & 1;\n    let last_bit = n & (1 << (n.count_ones() - 1));\n    let mask = (1 << (n.count_ones() - 1)) - 1;\n    (n ^ mask) | (first_bit << (n.count_ones() - 1)) | last_bit\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `10`,\n right: `15`', /tmp/tmp66_188p4.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask <= n {\n        result |= (n ^ mask);\n        mask <<= 1;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `13`,\n right: `12`', /tmp/tmpl82_vd3a.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0;\n    let mut i = 1;\n    while i < 63 {\n        mask |= 1 << i;\n        i += 2;\n    }\n    n ^= mask;\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3074457345618258595`,\n right: `15`', /tmp/tmpsgr2h8gc.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut result = n;\n    let mut i = 1;\n    while i < (n.count_zeros() - 1) {\n        result ^= 1 << i;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2305843009213693943`,\n right: `15`', /tmp/tmpj3b9n6ge.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 0;\n    while m != 0 {\n        if i == 0 || i == 31 {\n            m = m >> 1;\n            i += 1;\n            continue;\n        }\n        m = m ^ (1 << i);\n        m = m >> 1;\n        i += 1;\n    }\n    m\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to shift left with overflow', /tmp/tmpy5vm01nz.rs:11:17\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask: isize = 0b11;\n    let mut result: isize = 0;\n    let mut i: isize = 1;\n    while i < n.count_zeros() - 1 {\n        mask = (mask << 1) | 0b1;\n        i += 1;\n    }\n    result = n ^ mask;\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpa8c_kreh.rs:6:15\n  |\n6 |     while i < n.count_zeros() - 1 {\n  |               ^^^^^^^^^^^^^^^^^^^ expected `isize`, found `u32`\n  |\nhelp: you can convert a `u32` to an `isize` and panic if the converted value doesn't fit\n  |\n6 |     while i < (n.count_zeros() - 1).try_into().unwrap() {\n  |               +                   +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut mask = 0;\n    let mut result = 0;\n\n    while m != 0 {\n        if i == 0 {\n            l = m & 1;\n        }\n        if i == 1 {\n            k = m & 1;\n        }\n        if i == 2 {\n            j = m & 1;\n        }\n        m = m >> 1;\n        i += 1;\n    }\n\n    if j == 1 {\n        mask = 1 << (i - 3);\n        result = n ^ mask;\n    } else {\n        mask = 1 << (i - 3);\n        result = n | mask;\n    }\n\n    if k == 1 {\n        mask = 1 << (i - 2);\n        result = result ^ mask;\n    } else {\n        mask = 1 << (i - 2);\n        result = result | mask;\n    }\n\n    if l == 1 {\n        mask = 1 << (i - 1);\n        result = result ^ mask;\n    } else {\n        mask = 1 << (i - 1);\n        result = result | mask;\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmp_et29vkb.rs:54:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut result = n;\n    let mut mask = 0b10;\n    while mask < n {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmph28aoi1p.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 1;\n    while i < 64 {\n        m = m ^ (1 << i);\n        i += 2;\n    }\n    m\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-6148914691236517213`,\n right: `15`', /tmp/tmp_399sc80.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpnwj31_4m.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    let mut i = 1;\n    while i < n.count_ones() {\n        n = n ^ mask;\n        mask = mask << 1;\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `10`,\n right: `15`', /tmp/tmpsobjhvn0.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 1 << 1;\n    while mask < (1 << (n.leading_zeros() - 1)) {\n        n = n ^ mask;\n        mask = mask << 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4294967287`,\n right: `15`', /tmp/tmpmm789uxn.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b10;\n    let mut result = n;\n    while mask < 0b100000000 {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `247`,\n right: `15`', /tmp/tmpajma6sph.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut result = n;\n    let mut i = 1;\n    while i < (n.count_ones() - 1) {\n        result ^= 1 << i;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `15`', /tmp/tmpewmugk6v.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpnwj31_4m.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 1;\n    let mut result = n;\n    while mask < n {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmp07df_3q5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0;\n    let mut i = 1;\n    while i < n.count_ones() {\n        mask |= 1 << i;\n        i += 1;\n    }\n    n ^ mask\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `11`,\n right: `15`', /tmp/tmp5hwf_pac.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask: isize = 0b11;\n    let mut result: isize = 0;\n    let mut i: isize = 0;\n    while mask < n {\n        let bit: isize = (n & mask) ^ (n & (mask << 1));\n        result |= bit << i;\n        mask <<= 2;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `15`', /tmp/tmpn5qga7t4.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask: isize = 0b10;\n    let mut result: isize = 0;\n    while mask < n {\n        result = result ^ mask;\n        mask = mask << 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14`,\n right: `15`', /tmp/tmpmb6r1ab6.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut result = n;\n    let mut i = 1;\n    while i < (size_of::<isize>() * 8 - 2) {\n        result ^= 1 << i;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `size_of` in this scope\n --> /tmp/tmp70qhdy5x.rs:5:16\n  |\n5 |     while i < (size_of::<isize>() * 8 - 2) {\n  |                ^^^^^^^ not found in this scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::intrinsics::size_of;\n  |\n1 | use std::mem::size_of;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 1;\n    let mut result = n;\n    while mask < n {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmp07df_3q5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 0;\n    while m > 0 {\n        if i != 0 && i != 31 {\n            m ^= 1 << i;\n        }\n        i += 1;\n        m >>= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `15`', /tmp/tmpf_8w3iz7.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpnwj31_4m.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut x = n;\n    let mut mask = 0b11;\n    let mut res = 0;\n    while x > 0 {\n        res = res | (x & mask);\n        x = x >> 2;\n        mask = mask << 2;\n    }\n    res\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `15`', /tmp/tmp2mqx0ucs.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b10;\n    let mut result = n;\n    while mask < n {\n        result = result ^ mask;\n        mask = mask << 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpjnmxk_4g.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    let mut i = 1;\n    while i < n.count_ones() as isize {\n        mask = (mask << 1) | 1;\n        i += 1;\n    }\n    n ^ mask\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14`,\n right: `15`', /tmp/tmp_xiubz5w.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut result = n;\n    let mut i = 1;\n    let mut j = 0;\n    while i < 63 {\n        let mut mask = 1 << i;\n        result = result ^ mask;\n        i += 1;\n        j += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9223372036854775799`,\n right: `15`', /tmp/tmp3g3rxhlf.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    let mut i = 1;\n    while i < n.count_ones() {\n        mask = (mask << 1) | 0b1;\n        i += 1;\n    }\n    n ^ mask\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14`,\n right: `15`', /tmp/tmp77kfwv_y.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 1;\n    let mut result = n;\n    while mask < n {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmp07df_3q5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut num = n;\n    let mut mask = 1;\n    while mask < num {\n        num ^= mask;\n        mask <<= 1;\n    }\n    num\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmpl44_5pny.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = n;\n    while mask < n {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `12`,\n right: `15`', /tmp/tmpjfnwv6bj.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mask = (1 << (n.trailing_zeros() - 1)) - 1;\n    n ^ mask\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpb6qfhqab.rs:3:22\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b10;\n    let mut result = n;\n    while mask < (1 << (n.trailing_zeros() - 1)) {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmprsxr_0nk.rs:5:24\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut result = n;\n    let mut i = 1;\n    while i < 64 {\n        result ^= 1 << i;\n        i += 2;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-6148914691236517213`,\n right: `15`', /tmp/tmp87egydz2.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b10;\n    let mut res = n;\n    while mask < 0b100000000 {\n        res ^= mask;\n        mask <<= 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `247`,\n right: `15`', /tmp/tmpbfwq_xxv.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask < n {\n        let bit = (n & mask) ^ mask;\n        result |= bit;\n        mask <<= 2;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `15`', /tmp/tmpxmeda2_u.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 0;\n    while i < 31 {\n        m = m ^ (1 << i);\n        i += 1;\n    }\n    m\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2147483638`,\n right: `15`', /tmp/tmpqv7x0fky.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 0;\n    while i < 31 {\n        m = m ^ (1 << i);\n        i += 2;\n    }\n    m\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1431655772`,\n right: `15`', /tmp/tmp33u5cq5o.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    while mask < n {\n        result = result | mask;\n        mask = mask << 2;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `15`', /tmp/tmpht_iw9ot.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut n = n;\n    while n > 0 {\n        n ^= mask;\n        mask <<= 2;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-10`,\n right: `15`', /tmp/tmpo2k_n1cn.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    while mask < n {\n        n ^= mask;\n        mask <<= 2;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `10`,\n right: `15`', /tmp/tmp6mjmeytn.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 1;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmpekmmsrke.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut result = n;\n    let mut i = 1;\n    while i < (n.count_ones() - 1) {\n        result ^= 1 << i;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `15`', /tmp/tmpewmugk6v.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    while mask < n {\n        n ^= mask;\n        mask <<= 2;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `10`,\n right: `15`', /tmp/tmp6mjmeytn.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask < n {\n        let bit = (n & mask) ^ mask;\n        result |= bit;\n        mask <<= 2;\n        i += 1;\n    }\n    result | (n & 0b11)\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `15`', /tmp/tmppl2d2m4c.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut num = n;\n    let mut mask = 0b11;\n    let mut count = 0;\n    while num > 0 {\n        num >>= 1;\n        mask <<= 1;\n        count += 1;\n    }\n    mask = mask - 1;\n    n ^ mask\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `38`,\n right: `15`', /tmp/tmp_mrm_5ad.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut result = n;\n    let mut i = 1;\n    while i < 64 {\n        result ^= 1 << i;\n        i += 2;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-6148914691236517213`,\n right: `15`', /tmp/tmp87egydz2.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask <= n {\n        result |= (n ^ mask);\n        mask <<= 1;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `13`,\n right: `12`', /tmp/tmpl82_vd3a.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 1;\n    while i < (n.count_ones() - 1) {\n        m ^= 1 << i;\n        i += 1;\n    }\n    m\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `15`', /tmp/tmpsvtf0wek.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask < n {\n        let bit = (n & mask) >> i;\n        result |= bit << i;\n        mask <<= 1;\n        i += 1;\n    }\n    result |= n & mask;\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `15`', /tmp/tmptvtexyzv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b10;\n    let mut result = 0;\n    while mask < n {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14`,\n right: `15`', /tmp/tmpi6rd1u58.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b1011;\n    let mut i = 0;\n    while n > 0 {\n        if i > 0 && i < (size_of::<isize>() * 8 - 1) {\n            n = n ^ mask;\n        }\n        mask = mask << 1;\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `size_of` in this scope\n --> /tmp/tmpctnztmlj.rs:7:26\n  |\n7 |         if i > 0 && i < (size_of::<isize>() * 8 - 1) {\n  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::intrinsics::size_of;\n  |\n1 | use std::mem::size_of;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut i = 1;\n    let mut j = 1;\n    while i < (n as f64).log2().floor() as isize {\n        i = i << 1;\n        j = j << 1;\n    }\n    while i > 0 {\n        n = n ^ i;\n        i = i >> 1;\n        j = j >> 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14`,\n right: `15`', /tmp/tmp1674xwlz.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 1;\n    let mut result = n;\n    while mask < n {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmp07df_3q5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 1;\n    let mut result = n;\n    while mask < n {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmp07df_3q5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut num = n;\n    let mut mask = 0b10;\n    while mask < num {\n        num = num ^ mask;\n        mask = mask << 1;\n    }\n    num\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpsjpk1am6.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 0;\n    while i < 31 {\n        m = m ^ (1 << i);\n        i += 2;\n    }\n    m\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1431655772`,\n right: `15`', /tmp/tmp33u5cq5o.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    let mut i = 1;\n    while i < 64 {\n        n ^= mask;\n        mask <<= 2;\n        i += 2;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-10`,\n right: `15`', /tmp/tmpnkkt9yqp.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b10;\n    let mut result = n;\n    while mask < (1 << (n.leading_zeros() - 1)) {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `576460752303423479`,\n right: `15`', /tmp/tmpoqbjp4n6.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 0;\n    while i < (size_of::<isize>() * 8 - 2) {\n        m = m ^ (1 << i);\n        i += 1;\n    }\n    m\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `size_of` in this scope\n --> /tmp/tmp9ny6drlf.rs:5:16\n  |\n5 |     while i < (size_of::<isize>() * 8 - 2) {\n  |                ^^^^^^^ not found in this scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::intrinsics::size_of;\n  |\n1 | use std::mem::size_of;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask < n {\n        let bit = (n & mask) >> i;\n        result |= bit << i;\n        mask <<= 1;\n        i += 1;\n    }\n    result |= n & mask;\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `15`', /tmp/tmptvtexyzv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b10;\n    let mut result = n;\n    while mask < (1 << (n.count_ones() - 1)) {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `15`', /tmp/tmp2pkk_9n1.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = n;\n    for _ in 0..n.count_ones() - 2 {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `15`', /tmp/tmpbk_d0lgs.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 1;\n    while i < 64 {\n        m ^= 1 << i;\n        i += 2;\n    }\n    m\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-6148914691236517213`,\n right: `15`', /tmp/tmpvihwxz6l.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask <= n {\n        let bit = (n & mask) >> i;\n        if bit == 0 {\n            result |= 1 << i;\n        }\n        mask <<= 1;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `15`', /tmp/tmp8w7zc_45.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b10;\n    let mut result = n;\n    while mask < n {\n        result = result ^ mask;\n        mask = mask << 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpjnmxk_4g.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0;\n    let mut i = 1;\n    while i < n.count_ones() - 1 {\n        mask |= 1 << i;\n        i += 1;\n    }\n    n ^ mask\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `15`', /tmp/tmpbghx60ud.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 1;\n    let mut j = 0;\n    while m > 0 {\n        if i == 1 || i == 64 {\n            i += 1;\n            m >>= 1;\n            continue;\n        }\n        j <<= 1;\n        j |= m & 1;\n        m >>= 1;\n        i += 1;\n    }\n    j <<= 1;\n    j |= n & 1;\n    j\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `15`', /tmp/tmpopo6on92.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    let mut i = 1;\n    while i < n.count_ones() - 1 {\n        mask = mask << 1;\n        mask = mask | 0b1;\n        i += 1;\n    }\n    n = n ^ mask;\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `10`,\n right: `15`', /tmp/tmpg8rtbvv1.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpnwj31_4m.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask <= n {\n        let bit = (n & mask) >> i;\n        if bit == 0 {\n            result |= 1 << i;\n        }\n        mask <<= 1;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `15`', /tmp/tmp8w7zc_45.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut mask = 0b10;\n    while mask < 0b100000000 {\n        m = m ^ mask;\n        mask = mask << 1;\n    }\n    m\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `247`,\n right: `15`', /tmp/tmpyui94jn5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask < n {\n        let bit = (n & mask) >> i;\n        if bit == 0 {\n            result |= mask;\n        }\n        mask <<= 1;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmpus_0e_wq.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut num = n;\n    let mut mask = 0b10;\n    while mask < 0b100000000 {\n        num = num ^ mask;\n        mask = mask << 1;\n    }\n    num\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `247`,\n right: `15`', /tmp/tmpq7tdvwmv.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let first_bit = n & 1;\n    let last_bit = n & (1 << (n.count_ones() - 1));\n    let mask = (1 << n.count_ones()) - 1;\n    let middle_bits = n & mask;\n    (first_bit | middle_bits.rotate_left(1) | last_bit)\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `15`', /tmp/tmpv2en0m6x.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask <= n {\n        let bit = (n & mask) >> i;\n        if bit == 0 {\n            result |= 1 << i;\n        }\n        mask <<= 1;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `15`', /tmp/tmp8w7zc_45.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b10;\n    let mut result = 0;\n    while n > 0 {\n        if n & mask == 0 {\n            result |= mask;\n        }\n        n >>= 1;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26`,\n right: `15`', /tmp/tmphzrllf5l.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 1;\n    let mut result = n;\n    while mask < n {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmp07df_3q5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    let mut result = 0;\n    while n > 0 {\n        let first_and_last = n & mask;\n        result |= first_and_last;\n        n >>= 2;\n        mask <<= 2;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `15`', /tmp/tmp08b_n_2d.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    let mut i = 1;\n    while i < (size_of::<isize>() * 8) - 2 {\n        mask = mask << 1;\n        mask = mask | 0b1;\n        n = n ^ mask;\n        mask = mask << 1;\n        i += 2;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `size_of` in this scope\n --> /tmp/tmptsy4h5br.rs:6:16\n  |\n6 |     while i < (size_of::<isize>() * 8) - 2 {\n  |                ^^^^^^^ not found in this scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::intrinsics::size_of;\n  |\n1 | use std::mem::size_of;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask <= n {\n        let bit = n & mask;\n        if bit == 0 {\n            result |= mask;\n        }\n        mask <<= 2;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `15`', /tmp/tmp17enix71.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    let mut i = 1;\n    while i < 64 {\n        n = n ^ mask;\n        mask = mask << 2;\n        i += 2;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-10`,\n right: `15`', /tmp/tmp5qpbwr3i.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    // let mut n = n;\n    // let mut i = 1;\n    // while i < (n.count_ones() - 1) {\n    //     n ^= 1 << i;\n    //     i += 1;\n    // }\n    // n\n    n ^ ((1 << (n.count_ones() - 1)) - 1)\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `8`,\n right: `15`', /tmp/tmph6qn3u2m.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    n = n ^ (n >> 1);\n    n = n ^ (n >> 2);\n    n = n ^ (n >> 4);\n    n = n ^ (n >> 8);\n    n = n ^ (n >> 16);\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14`,\n right: `15`', /tmp/tmpqosdneau.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    let mut i = 1;\n    while i < (n.count_ones() - 1) {\n        mask = mask << 1;\n        mask = mask | 0b1;\n        i += 1;\n    }\n    mask = mask << 1;\n    n = n ^ mask;\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5`,\n right: `13`', /tmp/tmpf_y8rbqz.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b10;\n    let mut result = n;\n    for _ in 0..4 {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `23`,\n right: `15`', /tmp/tmp1332lms5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    n = n ^ (n >> 1);\n    n = n ^ (n >> 2);\n    n = n ^ (n >> 4);\n    n = n ^ (n >> 8);\n    n = n ^ (n >> 16);\n    n = n ^ (n >> 32);\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14`,\n right: `15`', /tmp/tmpdbvpr87k.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut result = n;\n    let mut i = 1;\n    while i < 64 {\n        result ^= 1 << i;\n        i += 2;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-6148914691236517213`,\n right: `15`', /tmp/tmp87egydz2.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    while mask < n {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5`,\n right: `15`', /tmp/tmpzhexujfm.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut result = n;\n    let mut i = 1;\n    while i < (n.count_ones() - 1) {\n        result ^= 1 << i;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `15`', /tmp/tmpewmugk6v.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 1;\n    while mask < n {\n        n = n ^ mask;\n        mask = mask << 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpx_vw9gml.rs:5:9\n  |\n2 | fn toggle_middle_bits(n: isize) -> isize {\n  |                       - help: consider making this binding mutable: `mut n`\n...\n5 |         n = n ^ mask;\n  |         ^^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    let mut i = 0;\n    while n > 0 {\n        if i > 0 && i < (n.trailing_zeros() - 1) {\n            n ^= mask;\n        }\n        mask <<= 1;\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp8invdsi9.rs:7:25\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = n;\n    let mut i = 1;\n    while mask < n {\n        result ^= mask;\n        mask <<= 1;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `12`,\n right: `15`', /tmp/tmp7r1z4dhs.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask < n {\n        let bit = (n & mask) >> i;\n        if bit == 0 {\n            result |= 1 << i;\n        }\n        i += 1;\n        mask = (mask << 1) + 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `15`', /tmp/tmp3h47bgxd.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 0;\n    while m > 0 {\n        if i != 0 && i != 31 {\n            m ^= 1 << i;\n        }\n        i += 1;\n        m >>= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `15`', /tmp/tmpf_8w3iz7.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n = n ^ mask;\n        mask = mask << 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpchddricu.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b101;\n    let mut result = 0;\n    let mut i = 0;\n    while mask <= n {\n        if mask & n == 0 {\n            result |= mask;\n        }\n        mask <<= 1;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `15`', /tmp/tmpwfpti_nq.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 1;\n    while i < 64 {\n        m = m ^ (1 << i);\n        i += 2;\n    }\n    m\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-6148914691236517213`,\n right: `15`', /tmp/tmp_399sc80.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpnwj31_4m.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask < n {\n        let bit = n & mask;\n        if bit == 0 {\n            result |= mask;\n        }\n        mask <<= 1;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmplt9e84fy.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 0;\n    while m > 0 {\n        if i != 0 && i != (n.count_zeros() - 1) {\n            m = m ^ (1 << i);\n        }\n        i += 1;\n    }\n    m\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-2305843009213693961`,\n right: `15`', /tmp/tmp01_o97l0.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 1;\n    while i < (size_of::<isize>() * 8) - 1 {\n        m ^= 1 << i;\n        i += 1;\n    }\n    m\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `size_of` in this scope\n --> /tmp/tmpicl98zkp.rs:5:16\n  |\n5 |     while i < (size_of::<isize>() * 8) - 1 {\n  |                ^^^^^^^ not found in this scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::intrinsics::size_of;\n  |\n1 | use std::mem::size_of;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 1;\n    let mut result = n;\n    let mut i = 0;\n    while i < (size_of::<isize>() * 8 - 2) {\n        if (n & mask) != 0 {\n            result &= !mask;\n        } else {\n            result |= mask;\n        }\n        mask <<= 1;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `size_of` in this scope\n --> /tmp/tmpx8zjmxvz.rs:6:16\n  |\n6 |     while i < (size_of::<isize>() * 8 - 2) {\n  |                ^^^^^^^ not found in this scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::intrinsics::size_of;\n  |\n1 | use std::mem::size_of;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n\n    while mask <= n {\n        let bit = (n & mask) ^ mask;\n        result |= bit;\n        mask <<= 2;\n        i += 1;\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `15`', /tmp/tmp4nal1q5t.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 1;\n    let mut result = 0;\n\n    while mask < n {\n        result = result ^ mask;\n        mask = mask << 1;\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15`,\n right: `12`', /tmp/tmpl2ipz827.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    n ^= (n >> 1);\n    n ^= (n >> 2);\n    n ^= (n >> 4);\n    n ^= (n >> 8);\n    n ^= (n >> 16);\n    n ^= (n >> 32);\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14`,\n right: `15`', /tmp/tmpxh70kno3.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 1;\n    let mut result = n;\n    while mask < n {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmp07df_3q5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b10;\n    let mut result = n;\n    while mask < (1 << (n.leading_zeros() - 1)) {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `576460752303423479`,\n right: `15`', /tmp/tmpoqbjp4n6.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    let mut i = 0;\n    while n > 0 {\n        if i > 0 && i < 64 {\n            n = n ^ mask;\n        }\n        mask = mask << 1;\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-9223372036854775797`,\n right: `15`', /tmp/tmphuwjb8ik.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut i = 1;\n    let mut j = 0;\n    while i <= n {\n        i <<= 1;\n        j += 1;\n    }\n    i >>= 1;\n    j -= 1;\n    i = (i - 1) ^ n;\n    i <<= 1;\n    i |= 1;\n    i <<= j - 2;\n    i | n & ((1 << j - 1) - 1);\n    i\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `58`,\n right: `15`', /tmp/tmpu_b12y2f.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    let mut count = 0;\n    while n > 0 {\n        if count != 0 && count != 31 {\n            n = n ^ mask;\n        }\n        mask = mask << 1;\n        count += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-9223372030412324853`,\n right: `15`', /tmp/tmpnghzo008.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 1;\n    let mut result = n;\n    while mask < n {\n        result = result ^ mask;\n        mask = mask << 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmpgb_3hx8b.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask <= n {\n        let bit = n & mask;\n        if bit == 0 {\n            result |= mask;\n        }\n        mask <<= 1;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmpbkl09j2e.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 1 << 1;\n    while mask < (1 << 30) {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1073741815`,\n right: `15`', /tmp/tmpzpvfb6u3.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 1;\n    while mask < n {\n        n = n ^ mask;\n        mask = mask << 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmpxsyjz455.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpnwj31_4m.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let first_bit = n & 1;\n    let last_bit = (n >> 1) & 1;\n    let mask = (1 << (n.count_ones() - 2)) - 1;\n    n ^ mask | (first_bit << (n.count_ones() - 2)) | (last_bit << 1)\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `15`', /tmp/tmp0k27swk7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    while mask < n {\n        n ^= mask;\n        mask <<= 2;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `10`,\n right: `15`', /tmp/tmp6mjmeytn.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b10;\n    let mut result = 0;\n    while mask < n {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14`,\n right: `15`', /tmp/tmpi6rd1u58.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    let mut result = 0;\n    while n > 0 {\n        let first_two_bits = n & mask;\n        n = n >> 2;\n        result = result | first_two_bits;\n        mask = mask << 2;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `15`', /tmp/tmpa8ib1tr2.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 1;\n    let mut result = n;\n    while mask < n {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmp07df_3q5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 1;\n    let mut result = n;\n    while mask < n {\n        result = result ^ mask;\n        mask = mask << 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmpgb_3hx8b.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    while mask < n {\n        n ^= mask;\n        mask <<= 2;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `10`,\n right: `15`', /tmp/tmp6mjmeytn.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 0;\n    while m > 0 {\n        if i > 0 && i < 64 {\n            m ^= 1 << i;\n        }\n        i += 1;\n        m >>= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `15`', /tmp/tmpj0_atvsi.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    while mask < n {\n        n = n ^ mask;\n        mask = mask << 2;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `10`,\n right: `15`', /tmp/tmpwgbx6z8z.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpnwj31_4m.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    let mut i = 0;\n    while n > 0 {\n        if i > 0 && i < 64 {\n            n ^= mask;\n        }\n        n >>= 1;\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `15`', /tmp/tmpcntguhbe.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpnwj31_4m.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n = n ^ mask;\n        mask = mask << 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpchddricu.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    let mut i = 0;\n    while i < 64 {\n        n ^= mask;\n        mask <<= 2;\n        i += 2;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-10`,\n right: `15`', /tmp/tmpi28vr_19.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask < n {\n        result |= (n ^ mask);\n        mask <<= 2;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `10`,\n right: `15`', /tmp/tmphol24ga8.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    let mut i = 0;\n    while i < (std::mem::size_of::<isize>() * 8) - 2 {\n        n = n ^ mask;\n        mask = mask << 1;\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4611686018427387912`,\n right: `15`', /tmp/tmp1sbbsscc.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 0;\n    while i < 64 {\n        if i == 0 || i == 63 {\n            m = m | (1 << i);\n        } else {\n            m = m ^ (1 << i);\n        }\n        i += 1;\n    }\n    m\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-9`,\n right: `15`', /tmp/tmp9ya1hdo8.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask <= n {\n        if mask & n == 0 {\n            result += mask;\n        }\n        mask <<= 1;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmp2hb4dbo1.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    while mask < n {\n        n ^= mask;\n        mask <<= 2;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `10`,\n right: `15`', /tmp/tmp6mjmeytn.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask < n {\n        let bit = (n & mask) >> i;\n        result |= bit << i;\n        mask <<= 2;\n        i += 2;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `15`', /tmp/tmp6oi7xpbl.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 1;\n    while i < (size_of::<isize>() * 8 - 1) {\n        m ^= 1 << i;\n        i += 1;\n    }\n    m\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `size_of` in this scope\n --> /tmp/tmpr9_na8ph.rs:5:16\n  |\n5 |     while i < (size_of::<isize>() * 8 - 1) {\n  |                ^^^^^^^ not found in this scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::intrinsics::size_of;\n  |\n1 | use std::mem::size_of;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b10;\n    let mut result = n;\n    while mask < (1 << (n.trailing_zeros() - 1)) {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmprsxr_0nk.rs:5:24\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    while m > 0 {\n        i += 1;\n        m /= 2;\n    }\n    m = n;\n    while m > 0 {\n        j += 1;\n        k = m % 2;\n        m /= 2;\n        if j == 1 || j == i {\n            continue;\n        }\n        if k == 1 {\n            n -= 2_isize.pow(j - 1);\n        } else {\n            n += 2_isize.pow(j - 1);\n        }\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "warning: value assigned to `k` is never read\n --> /tmp/tmp2ini_pi9.rs:6:13\n  |\n6 |     let mut k = 0;\n  |             ^\n  |\n  = note: `#[warn(unused_assignments)]` on by default\n  = help: maybe it is overwritten before being read?\n\nerror[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp2ini_pi9.rs:20:13\n   |\n2  | fn toggle_middle_bits(n: isize) -> isize {\n   |                       - help: consider making this binding mutable: `mut n`\n...\n20 |             n -= 2_isize.pow(j - 1);\n   |             ^^^^^^^^^^^^^^^^^^^^^^^ cannot assign to immutable argument\n\nerror[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp2ini_pi9.rs:22:13\n   |\n2  | fn toggle_middle_bits(n: isize) -> isize {\n   |                       - help: consider making this binding mutable: `mut n`\n...\n22 |             n += 2_isize.pow(j - 1);\n   |             ^^^^^^^^^^^^^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 1;\n    while i < (size_of::<isize>() * 8 - 2) {\n        m ^= 1 << i;\n        i += 1;\n    }\n    m\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `size_of` in this scope\n --> /tmp/tmp8yi279uo.rs:5:16\n  |\n5 |     while i < (size_of::<isize>() * 8 - 2) {\n  |                ^^^^^^^ not found in this scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::intrinsics::size_of;\n  |\n1 | use std::mem::size_of;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpnwj31_4m.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b10;\n    let mut res = n;\n    while mask < (1 << (n.leading_zeros() - 1)) {\n        res ^= mask;\n        mask <<= 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `576460752303423479`,\n right: `15`', /tmp/tmptqmmstff.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 1;\n    while i < 64 {\n        m = m ^ (1 << i);\n        i += 2;\n    }\n    m\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-6148914691236517213`,\n right: `15`', /tmp/tmp_399sc80.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut res = 0;\n    let mut i = 0;\n    while mask < n {\n        let bit = n & mask;\n        if bit == 0 {\n            res |= mask;\n        }\n        mask <<= 1;\n        i += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmpbndl1dte.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    while mask < n {\n        n ^= mask;\n        mask <<= 2;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `10`,\n right: `15`', /tmp/tmp6mjmeytn.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    while mask < n {\n        n ^= mask;\n        mask <<= 2;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `10`,\n right: `15`', /tmp/tmp6mjmeytn.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut res = n;\n    let mut i = 1;\n    let mut j = 1;\n    while i < 63 {\n        res = res ^ (1 << i);\n        i += 2;\n    }\n    while j < 62 {\n        res = res ^ (1 << j);\n        j += 2;\n    }\n    res\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `15`', /tmp/tmpjeofvgtr.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 1;\n    let mut result = n;\n    while mask < n {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmp07df_3q5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b110;\n    let mut result = n;\n    for _ in 0..4 {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `43`,\n right: `15`', /tmp/tmpvtz06_9g.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask <= n {\n        if mask & n == 0 {\n            result |= mask;\n        }\n        mask <<= 1;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmpig7k51y0.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 1;\n    while i < (n.count_zeros() - 1) {\n        m ^= 1 << i;\n        i += 1;\n    }\n    m\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2305843009213693943`,\n right: `15`', /tmp/tmp6e0cy98x.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpnwj31_4m.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 1;\n    let mut result = n;\n    loop {\n        if mask & n == 0 {\n            result = result | mask;\n        } else {\n            result = result & !mask;\n        }\n        mask = mask << 1;\n        if mask & n != 0 {\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14`,\n right: `15`', /tmp/tmp4k4bv3bm.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpnwj31_4m.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b10;\n    let mut result = n;\n    while mask < n {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpzzc2n8vn.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpnwj31_4m.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = n;\n    let mut i = 0;\n    while mask < n {\n        let bit = (n & mask) >> i;\n        if bit == 0 {\n            result |= mask;\n        } else {\n            result &= !mask;\n        }\n        mask <<= 1;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14`,\n right: `15`', /tmp/tmpzxxx4di3.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 1;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmpekmmsrke.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 1;\n    let mut result = n;\n\n    while mask < n {\n        result ^= mask;\n        mask <<= 1;\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmprk9tudic.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut result = n;\n    let mut i = 1;\n    while i < (n.count_ones() - 1) {\n        result ^= 1 << i;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `15`', /tmp/tmpewmugk6v.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 0;\n    while m > 0 {\n        if i != 0 && i != (m.count_ones() - 1) {\n            n ^= 1 << i;\n        }\n        m >>= 1;\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpxzcipcon.rs:7:13\n  |\n2 | fn toggle_middle_bits(n: isize) -> isize {\n  |                       - help: consider making this binding mutable: `mut n`\n...\n7 |             n ^= 1 << i;\n  |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut num = n;\n    let mut mask = 0b11;\n    let mut result = 0;\n    while num != 0 {\n        let last_two_bits = num & mask;\n        num >>= 2;\n        result <<= 2;\n        result |= last_two_bits;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmpcpkc2veg.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut first_bit = n & 1;\n    let mut last_bit = n & (1 << 31);\n    let mut mask = 0;\n    for i in 1..31 {\n        mask = mask | (1 << i);\n    }\n    n = n ^ mask;\n    n = n | first_bit;\n    n = n | last_bit;\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2147483639`,\n right: `15`', /tmp/tmpnluk012r.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask <= n {\n        if mask & n == 0 {\n            result |= mask;\n        }\n        mask <<= 1;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `15`', /tmp/tmpig7k51y0.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b10;\n    let mut result = n;\n    while mask < (1 << (n.leading_zeros() - 1)) {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `576460752303423479`,\n right: `15`', /tmp/tmpoqbjp4n6.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    let mut i = 0;\n    while n != 0 {\n        if i != 0 && i != 31 {\n            n ^= mask;\n        }\n        mask <<= 1;\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 1;\n    let mut result = n;\n    let mut i = 1;\n    while i < n.count_ones() - 1 {\n        result ^= mask;\n        mask <<= 1;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `15`', /tmp/tmp06q0176e.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    let mut i = 0;\n    while n > 0 {\n        if i > 0 && i < 64 {\n            n ^= mask;\n        }\n        mask <<= 1;\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-9223372036854775797`,\n right: `15`', /tmp/tmplhal2yuk.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask = 0b11;\n    let mut res = n;\n    while mask < n {\n        res ^= mask;\n        mask <<= 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `12`,\n right: `15`', /tmp/tmpixp46g7x.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 1;\n    while i < 63 {\n        m ^= 1 << i;\n        i += 2;\n    }\n    m\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3074457345618258595`,\n right: `15`', /tmp/tmps2xfh_r4.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b11;\n    let mut i = 1;\n    while i < n.count_ones() - 1 {\n        mask = mask << 1;\n        mask = mask | 0b1;\n        i += 1;\n    }\n    n = n ^ mask;\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `10`,\n right: `15`', /tmp/tmpg8rtbvv1.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut m = n;\n    let mut i = 0;\n    while i < 32 {\n        if i == 0 || i == 31 {\n            m = m | (1 << i);\n        } else {\n            m = m ^ (1 << i);\n        }\n        i += 1;\n    }\n    m\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4294967287`,\n right: `15`', /tmp/tmpx9ntfon5.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut mask: isize = 0b11;\n    let mut result: isize = 0;\n    let mut i: isize = 0;\n    while i < 32 {\n        if i == 0 || i == 31 {\n            result |= n & mask;\n        } else {\n            result |= !(n & mask);\n        }\n        mask <<= 1;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-1`,\n right: `15`', /tmp/tmprlrziir0.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut result = n;\n    let mut i = 1;\n    while i < (n.count_ones() - 1) {\n        result ^= 1 << i;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `15`', /tmp/tmpewmugk6v.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
      "timestamp": 1665509775,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7`,\n right: `15`', /tmp/tmpnwj31_4m.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}