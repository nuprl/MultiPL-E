{
  "name": "mbpp_472_check_Consecutive",
  "language": "rs",
  "prompt": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n    }\n    true",
    "    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true",
    "    let mut l = l.clone();\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true",
    "    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true",
    "    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true",
    "    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n    }\n    return true;",
    "    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true",
    "    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] - v[i - 1] != 1 {\n            return false;\n        }\n    }\n    true",
    "    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n    }\n    true",
    "    let mut min = l[0];\n    let mut max = l[0];\n    for i in l {\n        if i < min {\n            min = i;\n        }\n        if i > max {\n            max = i;\n        }\n    }\n    if max - min + 1 == l.len() as isize {\n        return true;\n    }\n    return false;",
    "    let mut v = l.clone();\n    v.sort();\n    let mut i = 0;\n    while i < v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n        i += 1;\n    }\n    true",
    "    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i + 1] - v[i] != 1 {\n            return false;\n        }\n    }\n    true",
    "    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true",
    "    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true",
    "    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true",
    "    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true",
    "    let mut v = l;\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] - v[i - 1] != 1 {\n            return false;\n        }\n    }\n    return true;",
    "    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n    }\n    true",
    "    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len()-1 {\n        if v[i+1] - v[i] != 1 {\n            return false;\n        }\n    }\n    return true;",
    "    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] != l[i - 1] + 1 {\n            return false;\n        }\n    }\n    true"
  ]
}