{
  "name": "mbpp_735_toggle_middle_bits",
  "language": "rs",
  "prompt": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask < n {\n        let bit = (n & mask) >> i;\n        result |= bit << i;\n        mask <<= 2;\n        i += 2;\n    }\n    result |= n & mask;\n    result",
    "    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask <= n {\n        result |= (mask ^ n) & mask;\n        mask <<= 1;\n        i += 1;\n    }\n    result",
    "    let mut mask = 1;\n    let mut result = n;\n    while mask < n {\n        result = result ^ mask;\n        mask = mask << 1;\n    }\n    result",
    "    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n",
    "    let mut n = n;\n    let mut mask = 0b10;\n    while mask < 0b100000000 {\n        n = n ^ mask;\n        mask = mask << 1;\n    }\n    n",
    "    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n",
    "    let mut mask = 1;\n    let mut result = n;\n    while mask < n {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result",
    "    let mut mask = 0b10;\n    let mut result = n;\n    while mask < 0b100000000 {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result",
    "    let mut mask = 0b10;\n    let mut result = n;\n    for _ in 0..(n.count_ones() - 2) {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result",
    "    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask <= n {\n        result |= (n ^ mask);\n        mask <<= 1;\n        i += 1;\n    }\n    result",
    "    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n",
    "    let mut m = n;\n    let mut i = 0;\n    while i < (size_of::<isize>() * 8 - 2) {\n        let bit = (m & (1 << i)) >> i;\n        if bit == 1 {\n            m = m & !(1 << i);\n        } else {\n            m = m | (1 << i);\n        }\n        i += 1;\n    }\n    m",
    "    let mut m = n;\n    let mut i = 0;\n    while m > 0 {\n        if i != 0 && i != (m.count_ones() - 1) {\n            n ^= 1 << i;\n        }\n        m >>= 1;\n        i += 1;\n    }\n    n",
    "    let mut m = n;\n    let mut i = 1;\n    while i < 64 {\n        m = m ^ (1 << i);\n        i += 2;\n    }\n    m",
    "    let mut mask = 0b11;\n    let mut result = n;\n    let mut i = 0;\n    while i < (std::mem::size_of::<isize>() * 8 - 2) {\n        if (n & mask) == 0 {\n            result |= mask;\n        } else {\n            result &= !mask;\n        }\n        mask <<= 1;\n        i += 1;\n    }\n    result",
    "    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while i < n.count_zeros() {\n        let bit = (n & mask) >> i;\n        result |= bit << i;\n        mask <<= 2;\n        i += 2;\n    }\n    result",
    "    let mut m = n;\n    let mut i = 1;\n    while i < 63 {\n        m = m ^ (1 << i);\n        i += 2;\n    }\n    m",
    "    let mut mask = 0b10;\n    let mut result = n;\n    while mask < n {\n        result = result ^ mask;\n        mask = mask << 1;\n    }\n    result",
    "    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n = n ^ mask;\n        mask = mask << 1;\n    }\n    n",
    "    let mask = (1 << (n.leading_zeros() - 1)) - 1;\n    n ^ mask"
  ]
}