{
  "name": "mbpp_412_remove_odd",
  "language": "rs",
  "prompt": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x % 2 == 0).map(|x| *x).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut ret = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            ret.push(i);\n        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|&x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x % 2 == 0).cloned().collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|&x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| *x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x % 2 == 0).map(|x| *x).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|&x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| *x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpqofm1_sh.rs:3:27\n  |\n3 |     l.iter().filter(|x| x % 2 == 0).collect()\n  |                         - ^ - {integer}\n  |                         |\n  |                         &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference `x`\n  |\n3 |     l.iter().filter(|x| *x % 2 == 0).collect()\n  |                         +\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpqofm1_sh.rs:3:37\n     |\n3    |     l.iter().filter(|x| x % 2 == 0).collect()\n     |                                     ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0369.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|&x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpqofm1_sh.rs:3:27\n  |\n3 |     l.iter().filter(|x| x % 2 == 0).collect()\n  |                         - ^ - {integer}\n  |                         |\n  |                         &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference `x`\n  |\n3 |     l.iter().filter(|x| *x % 2 == 0).collect()\n  |                         +\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpqofm1_sh.rs:3:37\n     |\n3    |     l.iter().filter(|x| x % 2 == 0).collect()\n     |                                     ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0369.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| *x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x % 2 == 0).map(|x| *x).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|&x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|&x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x % 2 == 0).map(|&x| x).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| *x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|&x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|&x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x % 2 == 0).cloned().collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|&x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x % 2 == 0).map(|x| *x).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|&x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x % 2 == 0).cloned().collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| *x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|&x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpqofm1_sh.rs:3:27\n  |\n3 |     l.iter().filter(|x| x % 2 == 0).collect()\n  |                         - ^ - {integer}\n  |                         |\n  |                         &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference `x`\n  |\n3 |     l.iter().filter(|x| *x % 2 == 0).collect()\n  |                         +\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpqofm1_sh.rs:3:37\n     |\n3    |     l.iter().filter(|x| x % 2 == 0).collect()\n     |                                     ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0369.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| *x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|&x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| *x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpj82wre5g.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|&x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.retain(|&x| x % 2 == 0);\n    l\n}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}