{
  "name": "mbpp_296_get_Inv_Count",
  "language": "rs",
  "prompt": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let n = arr.len();\n    while i < n {\n        j = i + 1;\n        while j < n {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let mut mid = 0;\n    let mut left_end = 0;\n    let mut size = arr.len();\n    let mut right_start = 0;\n\n    while size > 1 {\n        left_end = 0;\n        while left_end < arr.len() {\n            mid = left_end + size / 2;\n            right_start = mid;\n            if mid < arr.len() {\n                i = left_end;\n                j = right_start;\n                k = left_end;\n                while i < mid && j < right_start + size / 2 && j < arr.len() {\n                    if arr[i] <= arr[j] {\n                        temp[k] = arr[i];\n                        k += 1;\n                        i += 1;\n                    } else {\n                        temp[k] = arr[j];\n                        inv_count += mid - i;\n                        k += 1;\n                        j += 1;\n                    }\n                }\n                while i < mid {\n                    temp[k] = arr[i];\n                    k += 1;\n                    i += 1;\n                }\n                while j < right_start + size / 2 && j < arr.len() {\n                    temp[k] = arr[j];\n                    k += 1;\n                    j += 1;\n                }\n                left_end = right_start + size / 2;\n            } else {\n                break;\n            }\n        }\n        for i in 0..arr.len() {\n            arr[i] = temp[i];\n        }\n        size = size / 2;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmppwpgm3rj.rs:55:5\n   |\n2  | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n   |                                      ----- expected `isize` because of return type\n...\n55 |     inv_count\n   |     ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n55 |     inv_count.try_into().unwrap()\n   |              ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count: isize = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut inv_count = 0;\n    let len = arr.len();\n    for i in 0..len {\n        for j in (i + 1)..len {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inversions = 0;\n    let mut arr_copy = arr.clone();\n    arr_copy.sort();\n    for i in 0..arr.len() {\n        if arr[i] != arr_copy[i] {\n            inversions += 1;\n        }\n    }\n    inversions\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `5`', /tmp/tmp80to2mup.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut temp = vec![0; arr.len()];\n    let mut mid = 0;\n    let mut left = 0;\n    let mut right = 0;\n    let mut n = arr.len();\n    if n < 2 {\n        return 0;\n    }\n    mid = n / 2;\n    left = get_Inv_Count(arr[0..mid].to_vec());\n    right = get_Inv_Count(arr[mid..n].to_vec());\n    i = 0;\n    j = mid;\n    while i < mid && j < n {\n        if arr[i] <= arr[j] {\n            temp[i + j - mid] = arr[i];\n            i += 1;\n        } else {\n            temp[i + j - mid] = arr[j];\n            count += mid - i;\n            j += 1;\n        }\n    }\n    while i < mid {\n        temp[i + j - mid] = arr[i];\n        i += 1;\n    }\n    while j < n {\n        temp[i + j - mid] = arr[j];\n        j += 1;\n    }\n    for i in 0..n {\n        arr[i] = temp[i];\n    }\n    return count + left + right;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnf0vp25y.rs:40:20\n   |\n40 |     return count + left + right;\n   |                    ^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmpnf0vp25y.rs:40:18\n   |\n40 |     return count + left + right;\n   |                  ^ no implementation for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnf0vp25y.rs:40:27\n   |\n40 |     return count + left + right;\n   |                           ^^^^^ expected `usize`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnf0vp25y.rs:40:12\n   |\n2  | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n   |                                      ----- expected `isize` because of return type\n...\n40 |     return count + left + right;\n   |            ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n40 |     return (count + left + right).try_into().unwrap();\n   |            +                    +++++++++++++++++++++\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmpnf0vp25y.rs:40:25\n   |\n40 |     return count + left + right;\n   |                         ^ no implementation for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let n = arr.len();\n    let mut temp = vec![0; n];\n    while i < n {\n        j = i + 1;\n        while j < n {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 1;\n    while i < arr.len() {\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i + 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count: isize = 0;\n    let mut arr = arr.clone();\n    let mut arr_len = arr.len();\n    let mut i = 0;\n    while i < arr_len {\n        let mut j = i + 1;\n        while j < arr_len {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr.clone();\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut inv_count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let n = arr.len();\n    while i < n {\n        j = 0;\n        k = i;\n        while j < n {\n            if k < n && arr[k] < arr[j] {\n                inv_count += 1;\n                k += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `5`', /tmp/tmpgjaq0ve4.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count: isize = 0;\n    let mut arr_len = arr.len();\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut k: usize = 0;\n    let mut temp: Vec<isize> = Vec::new();\n\n    while i < arr_len {\n        temp.push(arr[i]);\n        i += 1;\n    }\n\n    i = 0;\n    j = arr_len / 2;\n    k = 0;\n\n    while i < arr_len / 2 && j < arr_len {\n        if temp[i] <= temp[j] {\n            arr[k] = temp[i];\n            i += 1;\n        } else {\n            arr[k] = temp[j];\n            inv_count += (arr_len / 2 - i) as isize;\n            j += 1;\n        }\n        k += 1;\n    }\n\n    while i < arr_len / 2 {\n        arr[k] = temp[i];\n        k += 1;\n        i += 1;\n    }\n\n    while j < arr_len {\n        arr[k] = temp[j];\n        k += 1;\n        j += 1;\n    }\n\n    return inv_count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "warning: value assigned to `j` is never read\n --> /tmp/tmp5omlmntp.rs:6:13\n  |\n6 |     let mut j: usize = 0;\n  |             ^\n  |\n  = note: `#[warn(unused_assignments)]` on by default\n  = help: maybe it is overwritten before being read?\n\nwarning: value assigned to `k` is never read\n --> /tmp/tmp5omlmntp.rs:7:13\n  |\n7 |     let mut k: usize = 0;\n  |             ^\n  |\n  = help: maybe it is overwritten before being read?\n\nwarning: variable does not need to be mutable\n --> /tmp/tmp5omlmntp.rs:4:9\n  |\n4 |     let mut arr_len = arr.len();\n  |         ----^^^^^^^\n  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\nerror[E0596]: cannot borrow `arr` as mutable, as it is not declared as mutable\n  --> /tmp/tmp5omlmntp.rs:21:13\n   |\n2  | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n   |                  --- help: consider changing this to be mutable: `mut arr`\n...\n21 |             arr[k] = temp[i];\n   |             ^^^ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `arr` as mutable, as it is not declared as mutable\n  --> /tmp/tmp5omlmntp.rs:24:13\n   |\n2  | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n   |                  --- help: consider changing this to be mutable: `mut arr`\n...\n24 |             arr[k] = temp[j];\n   |             ^^^ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `arr` as mutable, as it is not declared as mutable\n  --> /tmp/tmp5omlmntp.rs:32:9\n   |\n2  | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n   |                  --- help: consider changing this to be mutable: `mut arr`\n...\n32 |         arr[k] = temp[i];\n   |         ^^^ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `arr` as mutable, as it is not declared as mutable\n  --> /tmp/tmp5omlmntp.rs:38:9\n   |\n2  | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n   |                  --- help: consider changing this to be mutable: `mut arr`\n...\n38 |         arr[k] = temp[j];\n   |         ^^^ cannot borrow as mutable\n\nerror: aborting due to 4 previous errors; 3 warnings emitted\n\nFor more in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let mut mid = 0;\n    let mut left = 0;\n    let mut right = 0;\n    let mut n = arr.len();\n    while n > 1 {\n        mid = n / 2;\n        left = 0;\n        right = mid;\n        while left < mid && right < n {\n            if arr[left] <= arr[right] {\n                temp[i] = arr[left];\n                left += 1;\n            } else {\n                temp[i] = arr[right];\n                right += 1;\n                count += mid - left;\n            }\n            i += 1;\n        }\n        while left < mid {\n            temp[i] = arr[left];\n            left += 1;\n            i += 1;\n        }\n        while right < n {\n            temp[i] = arr[right];\n            right += 1;\n            i += 1;\n        }\n        i = 0;\n        while k < n {\n            arr[k] = temp[k];\n            k += 1;\n        }\n        n = n / 2;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpidsrg9f1.rs:44:5\n   |\n2  | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n   |                                      ----- expected `isize` because of return type\n...\n44 |     count\n   |     ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n44 |     count.try_into().unwrap()\n   |          ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count: isize = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut temp = vec![];\n    let mut arr_len = arr.len();\n    while arr_len > 1 {\n        let mut temp_count = 0;\n        let mut temp_arr = vec![];\n        while i < arr_len {\n            temp.push(arr[i]);\n            temp.push(arr[i + 1]);\n            if arr[i] > arr[i + 1] {\n                temp_count += 1;\n            }\n            i += 2;\n        }\n        if temp_count > 0 {\n            count += temp_count;\n        }\n        arr_len = temp.len();\n        i = 0;\n        while j < arr_len {\n            temp_arr.push(temp[j]);\n            temp_arr.push(temp[j + 1]);\n            if temp[j] > temp[j + 1] {\n                temp_count += 1;\n            }\n            j += 2;\n        }\n        if temp_count > 0 {\n            count += temp_count;\n        }\n        arr_len = temp_arr.len();\n        j = 0;\n        temp = temp_arr;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 5 but the index is 5', /tmp/tmpxa0bdpiz.rs:13:23\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr_copy = arr.clone();\n    arr_copy.sort();\n    for i in 0..arr.len() {\n        if arr[i] != arr_copy[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `5`', /tmp/tmp2g_hvcjz.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr_clone = arr.clone();\n    let mut arr_clone2 = arr.clone();\n    arr_clone.sort();\n    for i in 0..arr.len() {\n        for j in 0..arr.len() {\n            if arr[i] == arr_clone[j] {\n                count += j as isize;\n                break;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `10`,\n right: `5`', /tmp/tmp1t31bblr.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count: isize = 0;\n    let mut arr_copy = arr.clone();\n    merge_sort(&mut arr_copy, &mut inv_count);\n    return inv_count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `merge_sort` in this scope\n --> /tmp/tmp8wsybjt3.rs:5:5\n  |\n5 |     merge_sort(&mut arr_copy, &mut inv_count);\n  |     ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr_copy = arr.clone();\n    let mut arr_copy2 = arr.clone();\n    arr_copy.sort();\n    for i in 0..arr.len() {\n        for j in 0..arr.len() {\n            if arr_copy[i] == arr_copy2[j] {\n                count += j as isize - i as isize;\n                break;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmp2ot0ezbc.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut inv_count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let n = arr.len();\n    let mut temp = vec![0; n];\n    while k < n {\n        if i < n / 2 && j < n - n / 2 {\n            if arr[i] <= arr[j] {\n                temp[k] = arr[i];\n                i += 1;\n            } else {\n                temp[k] = arr[j];\n                j += 1;\n                inv_count += n / 2 - i;\n            }\n        } else if i < n / 2 {\n            temp[k] = arr[i];\n            i += 1;\n        } else {\n            temp[k] = arr[j];\n            j += 1;\n        }\n        k += 1;\n    }\n    arr = temp;\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpafv4tjog.rs:30:5\n   |\n2  | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n   |                                      ----- expected `isize` because of return type\n...\n30 |     inv_count\n   |     ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n30 |     inv_count.try_into().unwrap()\n   |              ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 1;\n    while j < arr.len() {\n        if arr[i] > arr[j] {\n            count += 1;\n        }\n        i += 1;\n        j += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `5`', /tmp/tmphue7yyd9.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let mut m = 1;\n    while m <= arr.len() {\n        i = 0;\n        while i < arr.len() {\n            j = i;\n            k = i + m;\n            while j < i + m && k < i + 2 * m && k < arr.len() {\n                if arr[j] <= arr[k] {\n                    temp[i] = arr[j];\n                    i += 1;\n                    j += 1;\n                } else {\n                    temp[i] = arr[k];\n                    inv_count += (j - i) as isize;\n                    i += 1;\n                    k += 1;\n                }\n            }\n            while j < i + m && j < arr.len() {\n                temp[i] = arr[j];\n                i += 1;\n                j += 1;\n            }\n            while k < i + 2 * m && k < arr.len() {\n                temp[i] = arr[k];\n                inv_count += (j - i) as isize;\n                i += 1;\n                k += 1;\n            }\n        }\n        arr = temp.clone();\n        m *= 2;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 5 but the index is 5', /tmp/tmpkyba_wys.rs:16:20\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr.clone();\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let mut mid = 0;\n    let mut n = arr.len();\n    if n > 1 {\n        mid = n / 2;\n        let mut left = arr[0..mid].to_vec();\n        let mut right = arr[mid..n].to_vec();\n        count = get_Inv_Count(left);\n        count += get_Inv_Count(right);\n        i = 0;\n        j = 0;\n        k = 0;\n        while i < left.len() && j < right.len() {\n            if left[i] <= right[j] {\n                temp[k] = left[i];\n                k += 1;\n                i += 1;\n            } else {\n                temp[k] = right[j];\n                count += left.len() - i;\n                k += 1;\n                j += 1;\n            }\n        }\n        while i < left.len() {\n            temp[k] = left[i];\n            k += 1;\n            i += 1;\n        }\n        while j < right.len() {\n            temp[k] = right[j];\n            k += 1;\n            j += 1;\n        }\n        for i in 0..n {\n            arr[i] = temp[i];\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpumnk2cdz.rs:27:26\n   |\n27 |                 count += left.len() - i;\n   |                          ^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot add-assign `usize` to `isize`\n  --> /tmp/tmpumnk2cdz.rs:27:23\n   |\n27 |                 count += left.len() - i;\n   |                       ^^ no implementation for `isize += usize`\n   |\n   = help: the trait `AddAssign<usize>` is not implemented for `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr_copy = arr.clone();\n    arr_copy.sort();\n    for i in 0..arr.len() {\n        if arr[i] != arr_copy[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `5`', /tmp/tmp2g_hvcjz.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut inv_count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let n = arr.len();\n    let mut temp = vec![0; n];\n    while i < n {\n        j = i + 1;\n        while j < n {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    return inv_count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr_copy = arr.clone();\n    arr_copy.sort();\n    for i in 0..arr.len() {\n        if arr[i] != arr_copy[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `5`', /tmp/tmp2g_hvcjz.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    let mut arr = arr;\n    let mut arr_len = arr.len();\n    for i in 0..arr_len {\n        for j in i + 1..arr_len {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    return inv_count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr.clone();\n    let mut i = 0;\n    let mut j = 1;\n    while i < arr.len() {\n        if j < arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n                arr.swap(i, j);\n            }\n            j += 1;\n        } else {\n            i += 1;\n            j = i + 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count: isize = 0;\n    let mut arr_copy = arr.clone();\n    let mut arr_copy_2 = arr.clone();\n    let mut arr_copy_3 = arr.clone();\n    let mut arr_copy_4 = arr.clone();\n    let mut arr_copy_5 = arr.clone();\n    let mut arr_copy_6 = arr.clone();\n    let mut arr_copy_7 = arr.clone();\n    let mut arr_copy_8 = arr.clone();\n    let mut arr_copy_9 = arr.clone();\n    let mut arr_copy_10 = arr.clone();\n    let mut arr_copy_11 = arr.clone();\n    let mut arr_copy_12 = arr.clone();\n    let mut arr_copy_13 = arr.clone();\n    let mut arr_copy_14 = arr.clone();\n    let mut arr_copy_15 = arr.clone();\n    let mut arr_copy_16 = arr.clone();\n    let mut arr_copy_17 = arr.clone();\n    let mut arr_copy_18 = arr.clone();\n    let mut arr_copy_19 = arr.clone();\n    let mut arr_copy_20 = arr.clone();\n    let mut arr_copy_21 = arr.clone();\n    let mut arr_copy_22 = arr.clone();\n    let mut arr_copy_23 = arr.clone();\n    let mut arr_copy_24 = arr.clone();\n    let mut arr_copy_25 = arr.clone();\n    let mut arr_copy_26 = arr.clone();\n    let mut arr_copy_27 = arr.clone();\n    let mut arr_copy_28 = arr.clone();\n    let mut arr_copy_29 = arr.clone();\n    let mut arr_copy_30 = arr.clone();\n    let mut arr_copy_31 = arr.clone();\n    let mut arr_copy_32 = arr.clone();\n    let mut arr_copy_33 = arr.clone();\n    let mut arr_copy_34 = arr.clone();\n    let mut arr_copy_35 = arr.clone();\n    let mut arr_copy_36 = arr\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpa0wjz7j7.rs:39:30\n   |\n39 |     let mut arr_copy_36 = arr\n   |                              ^ help: add `;` here\n40 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpa0wjz7j7.rs:2:38\n  |\n2 | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n  |    -------------                     ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut inv_count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let mut mid = 0;\n    let mut left_count = 0;\n    let mut right_count = 0;\n    let mut n = arr.len();\n    if n > 1 {\n        mid = n / 2;\n        let left = &arr[0..mid];\n        let right = &arr[mid..n];\n        left_count = get_Inv_Count(left.to_vec());\n        right_count = get_Inv_Count(right.to_vec());\n        i = 0;\n        j = 0;\n        k = 0;\n        while i < left.len() && j < right.len() {\n            if left[i] <= right[j] {\n                temp[k] = left[i];\n                k += 1;\n                i += 1;\n            } else {\n                temp[k] = right[j];\n                inv_count = inv_count + (left.len() - i) as isize;\n                k += 1;\n                j += 1;\n            }\n        }\n        while i < left.len() {\n            temp[k] = left[i];\n            k += 1;\n            i += 1;\n        }\n        while j < right.len() {\n            temp[k] = right[j];\n            k += 1;\n            j += 1;\n        }\n        for i in 0..n {\n            arr[i] = temp[i];\n        }\n    }\n    return inv_count + left_count + right_count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `3`', /tmp/tmpm4w10lpj.rs:55:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut inv_count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let n = arr.len();\n    let mid = n / 2;\n    let mut left = Vec::new();\n    let mut right = Vec::new();\n    if n > 1 {\n        for i in 0..mid {\n            left.push(arr[i]);\n        }\n        for i in mid..n {\n            right.push(arr[i]);\n        }\n        inv_count = get_Inv_Count(left);\n        inv_count += get_Inv_Count(right);\n        i = 0;\n        j = 0;\n        k = 0;\n        while i < left.len() && j < right.len() {\n            if left[i] <= right[j] {\n                arr[k] = left[i];\n                i += 1;\n            } else {\n                arr[k] = right[j];\n                inv_count += (left.len() - i) as isize;\n                j += 1;\n            }\n            k += 1;\n        }\n        while i < left.len() {\n            arr[k] = left[i];\n            i += 1;\n            k += 1;\n        }\n        while j < right.len() {\n            arr[k] = right[j];\n            j += 1;\n            k += 1;\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "warning: value assigned to `i` is never read\n --> /tmp/tmpc9srbfbh.rs:5:13\n  |\n5 |     let mut i = 0;\n  |             ^\n  |\n  = note: `#[warn(unused_assignments)]` on by default\n  = help: maybe it is overwritten before being read?\n\nwarning: value assigned to `j` is never read\n --> /tmp/tmpc9srbfbh.rs:6:13\n  |\n6 |     let mut j = 0;\n  |             ^\n  |\n  = help: maybe it is overwritten before being read?\n\nwarning: value assigned to `k` is never read\n --> /tmp/tmpc9srbfbh.rs:7:13\n  |\n7 |     let mut k = 0;\n  |             ^\n  |\n  = help: maybe it is overwritten before being read?\n\nerror[E0382]: borrow of moved value: `left`\n  --> /tmp/tmpc9srbfbh.rs:24:19\n   |\n10 |     let mut left = Vec::new();\n   |         -------- move occurs because `left` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n19 |         inv_count = get_Inv_Count(left);\n   |                                   ---- value moved here\n...\n24 |         while i < left.len() && j < right.len() {\n   |                   ^^^^^^^^^^ value borrowed here after move\n\nerror[E0382]: borrow of moved value: `right`\n  --> /tmp/tmpc9srbfbh.rs:24:37\n   |\n11 |     let mut right = Vec::new();\n   |         --------- move occurs because `right` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n20 |         inv_count += get_Inv_Count(right);\n   |                                    ----- value moved here\n...\n24 |         while i < left.len() && j < right.len() {\n   |                                     ^^^^^^^^^^^ value borrowed here after move\n\nerror: aborting due to 2 previous errors; 3 warnings emitted\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr_copy = arr.clone();\n    let mut inv_count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let mut mid = 0;\n    let mut left_size = 0;\n    let mut right_size = 0;\n    let mut n = arr.len();\n    if n > 1 {\n        mid = n / 2;\n        left_size = mid;\n        right_size = n - mid;\n        let mut left = vec![0; left_size];\n        let mut right = vec![0; right_size];\n        for i in 0..mid {\n            left[i] = arr[i];\n        }\n        for i in mid..n {\n            right[i - mid] = arr[i];\n        }\n        inv_count = get_Inv_Count(left.to_vec());\n        inv_count += get_Inv_Count(right.to_vec());\n        i = 0;\n        j = 0;\n        k = 0;\n        while i < left_size && j < right_size {\n            if left[i] <= right[j] {\n                temp[k] = left[i];\n                k = k + 1;\n                i = i + 1;\n            } else {\n                temp[k] = right[j];\n                inv_count = inv_count + (left_size - i);\n                k = k + 1;\n                j = j + 1;\n            }\n        }\n        while i < left_size {\n            temp[k] = left[i];\n            k = k + 1;\n            i = i + 1;\n        }\n        while j < right_size {\n            temp[k] = right[j];\n            k = k + 1;\n            j = j + 1;\n        }\n        for i in 0..n {\n            arr_copy[i] = temp[i];\n        }\n    }\n    return inv_count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpw2z4sj9t.rs:37:41\n   |\n37 |                 inv_count = inv_count + (left_size - i);\n   |                                         ^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot add `usize` to `isize`\n  --> /tmp/tmpw2z4sj9t.rs:37:39\n   |\n37 |                 inv_count = inv_count + (left_size - i);\n   |                                       ^ no implementation for `isize + usize`\n   |\n   = help: the trait `Add<usize>` is not implemented for `isize`\n   = help: the following other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let mut mid = 0;\n    let mut left = 0;\n    let mut right = 0;\n    let mut n = arr.len();\n    if n > 1 {\n        mid = n / 2;\n        left = mid;\n        right = n - mid;\n        let mut left_arr = vec![0; left];\n        let mut right_arr = vec![0; right];\n        for i in 0..mid {\n            left_arr[i] = arr[i];\n        }\n        for i in mid..n {\n            right_arr[i - mid] = arr[i];\n        }\n        count += get_Inv_Count(left_arr);\n        count += get_Inv_Count(right_arr);\n        i = 0;\n        j = 0;\n        k = 0;\n        while i < left && j < right {\n            if left_arr[i] <= right_arr[j] {\n                temp[k] = left_arr[i];\n                i += 1;\n            } else {\n                temp[k] = right_arr[j];\n                count += left - i;\n                j += 1;\n            }\n            k += 1;\n        }\n        while i < left {\n            temp[k] = left_arr[i];\n            i += 1;\n            k += 1;\n        }\n        while j < right {\n            temp[k] = right_arr[j];\n            j += 1;\n            k += 1;\n        }\n        for i in 0..n {\n            arr[i] = temp[i];\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpkp04npcv.rs:35:26\n   |\n35 |                 count += left - i;\n   |                          ^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot add-assign `usize` to `isize`\n  --> /tmp/tmpkp04npcv.rs:35:23\n   |\n35 |                 count += left - i;\n   |                       ^^ no implementation for `isize += usize`\n   |\n   = help: the trait `AddAssign<usize>` is not implemented for `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let n = arr.len();\n    let mut temp = vec![0; n];\n    while i < n {\n        j = i + 1;\n        while j < n {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 1;\n    while j < arr.len() {\n        if arr[i] > arr[j] {\n            count += 1;\n        }\n        i += 1;\n        j += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `5`', /tmp/tmphue7yyd9.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count: isize = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count: isize = 0;\n    let mut arr = arr.to_vec();\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp_arr = vec![0; arr.len()];\n    let mut mid = 0;\n    let mut n = arr.len();\n    if n > 1 {\n        mid = n / 2;\n        let mut left = arr[0..mid].to_vec();\n        let mut right = arr[mid..n].to_vec();\n        inv_count = get_Inv_Count(left);\n        inv_count += get_Inv_Count(right);\n        i = 0;\n        j = 0;\n        k = 0;\n        while i < left.len() && j < right.len() {\n            if left[i] <= right[j] {\n                temp_arr[k] = left[i];\n                k = k + 1;\n                i = i + 1;\n            } else {\n                temp_arr[k] = right[j];\n                inv_count = inv_count + (left.len() - i) as isize;\n                k = k + 1;\n                j = j + 1;\n            }\n        }\n        while i < left.len() {\n            temp_arr[k] = left[i];\n            k = k + 1;\n            i = i + 1;\n        }\n        while j < right.len() {\n            temp_arr[k] = right[j];\n            k = k + 1;\n            j = j + 1;\n        }\n        for i in 0..n {\n            arr[i] = temp_arr[i];\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "warning: value assigned to `i` is never read\n --> /tmp/tmp_r63xx4c.rs:5:13\n  |\n5 |     let mut i = 0;\n  |             ^\n  |\n  = note: `#[warn(unused_assignments)]` on by default\n  = help: maybe it is overwritten before being read?\n\nwarning: value assigned to `j` is never read\n --> /tmp/tmp_r63xx4c.rs:6:13\n  |\n6 |     let mut j = 0;\n  |             ^\n  |\n  = help: maybe it is overwritten before being read?\n\nwarning: value assigned to `k` is never read\n --> /tmp/tmp_r63xx4c.rs:7:13\n  |\n7 |     let mut k = 0;\n  |             ^\n  |\n  = help: maybe it is overwritten before being read?\n\nwarning: value assigned to `mid` is never read\n --> /tmp/tmp_r63xx4c.rs:9:13\n  |\n9 |     let mut mid = 0;\n  |             ^^^\n  |\n  = help: maybe it is overwritten before being read?\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmp_r63xx4c.rs:10:9\n   |\n10 |     let mut n = arr.len();\n   |         ----^\n   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmp_r63xx4c.rs:13:13\n   |\n13 |         let mut left = arr[0..mid].to_vec();\n   |             ----^^^^\n   |             |\n   |             help: remove this `mut`\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmp_r63xx4c.rs:14:13\n   |\n14 |         let mut right = arr[mid..n].to_vec();\n   |             ----^^^^^\n   |             |\n   |             help: remove this `mut`\n\nerror[E0382]: borrow of moved value: `left`\n  --> /tmp/tmp_r63xx4c.rs:20:19\n   |\n13 |         let mut left = arr[0..mid].to_vec();\n   |             -------- move occurs because `left` has type `Vec<isize>`, which does not implement the `Copy` trait\n14 |         let mut right = arr[mid..n].to_vec();\n15 |         inv_count = get_Inv_Count(left);\n   |                                   ---- value moved here\n...\n20 |         while i < left.len() && j < right.len() {\n   |                   ^^^^^^^^^^ value borrowed here after move\n\nerror[E0382]: borrow of moved value: `right`\n  --> /tmp/tmp_r63x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let mut m = arr.len();\n    while m > 1 {\n        i = 0;\n        j = m / 2;\n        k = 0;\n        while i < m / 2 && j < m {\n            if arr[i] <= arr[j] {\n                temp[k] = arr[i];\n                i += 1;\n            } else {\n                temp[k] = arr[j];\n                inv_count += m / 2 - i;\n                j += 1;\n            }\n            k += 1;\n        }\n        while i < m / 2 {\n            temp[k] = arr[i];\n            i += 1;\n            k += 1;\n        }\n        while j < m {\n            temp[k] = arr[j];\n            j += 1;\n            k += 1;\n        }\n        for i in 0..m {\n            arr[i] = temp[i];\n        }\n        m = m / 2;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpg2mktxp9.rs:40:5\n   |\n2  | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n   |                                      ----- expected `isize` because of return type\n...\n40 |     inv_count\n   |     ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n40 |     inv_count.try_into().unwrap()\n   |              ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut temp = arr.clone();\n    let mut temp2 = arr.clone();\n    let mut temp3 = arr.clone();\n    let mut temp4 = arr.clone();\n    let mut temp5 = arr.clone();\n    let mut temp6 = arr.clone();\n    let mut temp7 = arr.clone();\n    let mut temp8 = arr.clone();\n    let mut temp9 = arr.clone();\n    let mut temp10 = arr.clone();\n    let mut temp11 = arr.clone();\n    let mut temp12 = arr.clone();\n    let mut temp13 = arr.clone();\n    let mut temp14 = arr.clone();\n    let mut temp15 = arr.clone();\n    let mut temp16 = arr.clone();\n    let mut temp17 = arr.clone();\n    let mut temp18 = arr.clone();\n    let mut temp19 = arr.clone();\n    let mut temp20 = arr.clone();\n    let mut temp21 = arr.clone();\n    let mut temp22 = arr.clone();\n    let mut temp23 = arr.clone();\n    let mut temp24 = arr.clone();\n    let mut temp25 = arr.clone();\n    let mut temp26 = arr.clone();\n    let mut temp27 = arr.clone();\n    let mut temp28 = arr.clone();\n    let mut temp29 = arr.clone();\n    let mut temp30 = arr.clone();\n    let mut temp31 = arr.clone();\n    let mut temp32 = arr.clone();\n    let mut temp33 = arr.clone();\n    let mut temp34 = arr.clone();\n    let mut temp35 = arr.clone();\n    let mut temp36 = arr.clone();\n    let mut temp37 = arr.clone();\n    let mut temp38 = arr.clone();\n    let mut temp39 = arr.clone();\n    let mut temp40 = arr.clone();\n    let mut temp41 = arr.clone();\n    let mut temp42 = arr.clone();\n    let mut temp43 = arr.clone();\n    let mut temp44 = arr.clone();\n    let mut temp\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpi58b9lc5.rs:50:17\n   |\n50 |     let mut temp\n   |                 ^ help: add `;` here\n51 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpi58b9lc5.rs:2:38\n  |\n2 | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n  |    -------------                     ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 1;\n    while j < arr.len() {\n        if arr[i] > arr[j] {\n            count += 1;\n        }\n        i += 1;\n        j += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `5`', /tmp/tmphue7yyd9.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr_copy = arr.clone();\n    arr_copy.sort();\n    for i in 0..arr.len() {\n        if arr[i] != arr_copy[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `5`', /tmp/tmp2g_hvcjz.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count: isize = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let mut mid = 0;\n    let mut left = 0;\n    let mut right = 0;\n    let mut n = arr.len();\n\n    while n > 1 {\n        mid = n / 2;\n        left = 0;\n        right = mid;\n        while left < mid && right < n {\n            if arr[left] <= arr[right] {\n                temp[k] = arr[left];\n                left += 1;\n            } else {\n                temp[k] = arr[right];\n                right += 1;\n                count += mid - left;\n            }\n            k += 1;\n        }\n        while left < mid {\n            temp[k] = arr[left];\n            left += 1;\n            k += 1;\n        }\n        while right < n {\n            temp[k] = arr[right];\n            right += 1;\n            k += 1;\n        }\n        for i in 0..n {\n            arr[i] = temp[i];\n        }\n        n = n / 2;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpuqedqq28.rs:43:5\n   |\n2  | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n   |                                      ----- expected `isize` because of return type\n...\n43 |     count\n   |     ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n43 |     count.try_into().unwrap()\n   |          ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let n = arr.len();\n    while i < n {\n        j = i + 1;\n        while j < n {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count: isize = 0;\n    let mut arr_copy = arr.clone();\n    let mut arr_copy2 = arr.clone();\n    let mut arr_copy3 = arr.clone();\n    let mut arr_copy4 = arr.clone();\n    let mut arr_copy5 = arr.clone();\n    let mut arr_copy6 = arr.clone();\n    let mut arr_copy7 = arr.clone();\n    let mut arr_copy8 = arr.clone();\n    let mut arr_copy9 = arr.clone();\n    let mut arr_copy10 = arr.clone();\n    let mut arr_copy11 = arr.clone();\n    let mut arr_copy12 = arr.clone();\n    let mut arr_copy13 = arr.clone();\n    let mut arr_copy14 = arr.clone();\n    let mut arr_copy15 = arr.clone();\n    let mut arr_copy16 = arr.clone();\n    let mut arr_copy17 = arr.clone();\n    let mut arr_copy18 = arr.clone();\n    let mut arr_copy19 = arr.clone();\n    let mut arr_copy20 = arr.clone();\n    let mut arr_copy21 = arr.clone();\n    let mut arr_copy22 = arr.clone();\n    let mut arr_copy23 = arr.clone();\n    let mut arr_copy24 = arr.clone();\n    let mut arr_copy25 = arr.clone();\n    let mut arr_copy26 = arr.clone();\n    let mut arr_copy27 = arr.clone();\n    let mut arr_copy28 = arr.clone();\n    let mut arr_copy29 = arr.clone();\n    let mut arr_copy30 = arr.clone();\n    let mut arr_copy31 = arr.clone();\n    let mut arr_copy32 = arr.clone();\n    let mut arr_copy33 = arr.clone();\n    let mut arr_copy34 = arr.clone();\n    let mut arr_copy35 = arr.clone();\n    let mut arr_copy36 = arr.clone();\n    let mut arr_copy37 = arr.clone();\n    let mut arr_copy38 = arr.clone();\n    let mut arr_copy39\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmprjknfh9v.rs:42:23\n   |\n42 |     let mut arr_copy39\n   |                       ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmprjknfh9v.rs:2:38\n  |\n2 | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n  |    -------------                     ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count: isize = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut inv_count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let n = arr.len();\n    let mut temp = vec![0; n];\n    while i < n {\n        j = i + 1;\n        while j < n {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    return inv_count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count: isize = 0;\n    let mut arr_copy = arr.clone();\n    let mut arr_copy_2 = arr.clone();\n    let mut arr_copy_3 = arr.clone();\n    let mut arr_copy_4 = arr.clone();\n    let mut arr_copy_5 = arr.clone();\n    let mut arr_copy_6 = arr.clone();\n    let mut arr_copy_7 = arr.clone();\n    let mut arr_copy_8 = arr.clone();\n    let mut arr_copy_9 = arr.clone();\n    let mut arr_copy_10 = arr.clone();\n    let mut arr_copy_11 = arr.clone();\n    let mut arr_copy_12 = arr.clone();\n    let mut arr_copy_13 = arr.clone();\n    let mut arr_copy_14 = arr.clone();\n    let mut arr_copy_15 = arr.clone();\n    let mut arr_copy_16 = arr.clone();\n    let mut arr_copy_17 = arr.clone();\n    let mut arr_copy_18 = arr.clone();\n    let mut arr_copy_19 = arr.clone();\n    let mut arr_copy_20 = arr.clone();\n    let mut arr_copy_21 = arr.clone();\n    let mut arr_copy_22 = arr.clone();\n    let mut arr_copy_23 = arr.clone();\n    let mut arr_copy_24 = arr.clone();\n    let mut arr_copy_25 = arr.clone();\n    let mut arr_copy_26 = arr.clone();\n    let mut arr_copy_27 = arr.clone();\n    let mut arr_copy_28 = arr.clone();\n    let mut arr_copy_29 = arr.clone();\n    let mut arr_copy_30 = arr.clone();\n    let mut arr_copy_31 = arr.clone();\n    let mut arr_copy_32 = arr.clone();\n    let mut arr_copy_33 = arr.clone();\n    let mut arr_copy_34 = arr.clone();\n    let mut arr_copy_35 = arr.clone();\n    let mut arr_copy_36 = arr\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpa0wjz7j7.rs:39:30\n   |\n39 |     let mut arr_copy_36 = arr\n   |                              ^ help: add `;` here\n40 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpa0wjz7j7.rs:2:38\n  |\n2 | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n  |    -------------                     ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    let mut j = 1;\n    while i < arr.len() {\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i + 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inversions = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                inversions += 1;\n            }\n        }\n    }\n    inversions\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 1;\n    while j < arr.len() {\n        if arr[i] > arr[j] {\n            count += 1;\n        }\n        i += 1;\n        j += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `5`', /tmp/tmphue7yyd9.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count: isize = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let n = arr.len();\n    let mut temp = vec![0; n];\n    while i < n {\n        j = i + 1;\n        while j < n {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    while i < n {\n        temp[k] = arr[i];\n        k += 1;\n        i += 1;\n    }\n    while j < n {\n        temp[k] = arr[j];\n        k += 1;\n        j += 1;\n    }\n    i = 0;\n    j = 0;\n    k = 0;\n    while i < n && j < n {\n        if temp[i] <= temp[j] {\n            arr[k] = temp[i];\n            i += 1;\n        } else {\n            arr[k] = temp[j];\n            j += 1;\n            count += n - i;\n        }\n        k += 1;\n    }\n    while i < n {\n        arr[k] = temp[i];\n        k += 1;\n        i += 1;\n    }\n    while j < n {\n        arr[k] = temp[j];\n        k += 1;\n        j += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpv5zlrd4i.rs:54:5\n   |\n2  | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n   |                                      ----- expected `isize` because of return type\n...\n54 |     count\n   |     ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n54 |     count.try_into().unwrap()\n   |          ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count: isize = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 1;\n    while i < arr.len() {\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i + 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 1;\n    while i < arr.len() && j < arr.len() {\n        if arr[i] > arr[j] {\n            count += 1;\n        }\n        i += 1;\n        j += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `5`', /tmp/tmpb0be0xqk.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let mut mid = 0;\n    let mut left = 0;\n    let mut right = 0;\n    let mut n = arr.len();\n    if n > 1 {\n        mid = n / 2;\n        left = mid;\n        right = n - mid;\n        let mut left_arr = vec![0; mid];\n        let mut right_arr = vec![0; right];\n        for i in 0..mid {\n            left_arr[i] = arr[i];\n        }\n        for i in mid..n {\n            right_arr[i - mid] = arr[i];\n        }\n        count += get_Inv_Count(left_arr);\n        count += get_Inv_Count(right_arr);\n        i = 0;\n        j = 0;\n        k = 0;\n        while i < left && j < right {\n            if left_arr[i] <= right_arr[j] {\n                temp[k] = left_arr[i];\n                k += 1;\n                i += 1;\n            } else {\n                temp[k] = right_arr[j];\n                count += left - i;\n                k += 1;\n                j += 1;\n            }\n        }\n        while i < left {\n            temp[k] = left_arr[i];\n            k += 1;\n            i += 1;\n        }\n        while j < right {\n            temp[k] = right_arr[j];\n            k += 1;\n            j += 1;\n        }\n        for i in 0..n {\n            arr[i] = temp[i];\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp5forsq4s.rs:37:26\n   |\n37 |                 count += left - i;\n   |                          ^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot add-assign `usize` to `isize`\n  --> /tmp/tmp5forsq4s.rs:37:23\n   |\n37 |                 count += left - i;\n   |                       ^^ no implementation for `isize += usize`\n   |\n   = help: the trait `AddAssign<usize>` is not implemented for `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    let mut j = 1;\n    while j < arr.len() {\n        if arr[i] > arr[j] {\n            count += 1;\n        }\n        i += 1;\n        j += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `5`', /tmp/tmp1_zzjv3r.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let n = arr.len();\n    let mut temp = vec![0; n];\n    while i < n {\n        while j < n {\n            while k < n {\n                if arr[i] < arr[j] {\n                    count += 1;\n                }\n                k += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmpzc2r7bxy.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let mut mid = 0;\n    let mut n = arr.len();\n    if n > 1 {\n        mid = n / 2;\n        let mut left = arr[0..mid].to_vec();\n        let mut right = arr[mid..n].to_vec();\n        count = get_Inv_Count(left);\n        count += get_Inv_Count(right);\n        i = 0;\n        j = 0;\n        k = 0;\n        while i < left.len() && j < right.len() {\n            if left[i] <= right[j] {\n                temp[k] = left[i];\n                i += 1;\n                k += 1;\n            } else {\n                temp[k] = right[j];\n                count += left.len() - i;\n                j += 1;\n                k += 1;\n            }\n        }\n        while i < left.len() {\n            temp[k] = left[i];\n            i += 1;\n            k += 1;\n        }\n        while j < right.len() {\n            temp[k] = right[j];\n            j += 1;\n            k += 1;\n        }\n        for i in 0..n {\n            arr[i] = temp[i];\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp3jf7g50s.rs:26:26\n   |\n26 |                 count += left.len() - i;\n   |                          ^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot add-assign `usize` to `isize`\n  --> /tmp/tmp3jf7g50s.rs:26:23\n   |\n26 |                 count += left.len() - i;\n   |                       ^^ no implementation for `isize += usize`\n   |\n   = help: the trait `AddAssign<usize>` is not implemented for `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count: isize = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in (i + 1)..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}