{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "rs",
  "prompt": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    let mut result = 0;\n    while i * i < N {\n        i += 1;\n    }\n    result = i * i;\n    result\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp3w9cp35j.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpsryx3q7d.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i: isize = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp0eonce0e.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 0;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    let mut j = 1;\n    while j < N {\n        i += 1;\n        j = i * i;\n    }\n    j\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp13ne5t48.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut result = N;\n    while result % 2 == 0 {\n        result = result / 2;\n    }\n    if result % 2 == 1 {\n        return result * 2;\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `70`,\n right: `36`', /tmp/tmpmvan5eqc.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 0;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp7048y0ky.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i: isize = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpsryx3q7d.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 0;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 0;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut x = 1;\n    while x * x <= N {\n        x += 1;\n    }\n    return x * x;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 0;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp7048y0ky.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i: isize = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    let mut square = 1;\n    while square < N {\n        i += 1;\n        square = i * i;\n    }\n    square\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpblrykk_y.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 0;\n    let mut result = 0;\n    while i * i < N {\n        i += 1;\n    }\n    result = i * i;\n    result\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpgqgadbd3.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpsryx3q7d.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 0;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp7048y0ky.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 0;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp7048y0ky.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    let mut j = 1;\n    while j < N {\n        i += 1;\n        j = i * i;\n    }\n    j\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp13ne5t48.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpsryx3q7d.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmp183sfcbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}