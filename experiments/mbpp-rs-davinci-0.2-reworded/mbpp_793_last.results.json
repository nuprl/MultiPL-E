{
  "name": "mbpp_793_last",
  "language": "rs",
  "prompt": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut m = 0;\n    while l <= r {\n        m = (l + r) / 2;\n        if arr[m as usize] == x {\n            if m == arr.len() as isize - 1 || arr[(m + 1) as usize] > x {\n                return m;\n            }\n            l = m + 1;\n        } else if arr[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let mid = l + (r - l) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            l = mid + 1;\n        } else if arr[mid as usize] < x {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut res = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if arr[m as usize] == x {\n            res = m;\n            l = m + 1;\n        } else if arr[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut m = 0;\n    while l <= r {\n        m = (l + r) / 2;\n        if arr[m as usize] == x {\n            if m == arr.len() as isize - 1 {\n                return m;\n            } else if arr[(m + 1) as usize] != x {\n                return m;\n            } else {\n                l = m + 1;\n            }\n        } else if arr[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut res = -1;\n    while l <= r {\n        let m = (l + r) / 2;\n        if arr[m as usize] == x {\n            res = m;\n            l = m + 1;\n        } else if arr[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut m = 0;\n    while l <= r {\n        m = (l + r) / 2;\n        if arr[m as usize] == x {\n            if m == arr.len() as isize - 1 || arr[(m + 1) as usize] > x {\n                return m;\n            } else {\n                l = m + 1;\n            }\n        } else if arr[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut res = -1;\n    while l <= r {\n        let mid = l + (r - l) / 2;\n        if arr[mid as usize] == x {\n            res = mid;\n            l = mid + 1;\n        } else if arr[mid as usize] > x {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if arr[m as usize] == x {\n            if m == arr.len() as isize - 1 || arr[(m + 1) as usize] != x {\n                return m;\n            }\n            l = m + 1;\n        } else if arr[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = arr.len() as isize - 1;\n    let mut result = -1;\n    while lo <= hi {\n        let mid = lo + (hi - lo) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            lo = mid + 1;\n        } else if arr[mid as usize] < x {\n            lo = mid + 1;\n        } else {\n            hi = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if arr[m as usize] == x {\n            if m == arr.len() as isize - 1 || arr[(m + 1) as usize] != x {\n                return m;\n            } else {\n                l = m + 1;\n            }\n        } else if arr[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            left = mid + 1;\n        } else if arr[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut res = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if arr[m as usize] == x {\n            res = m;\n            l = m + 1;\n        } else if arr[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() - 1;\n    let mut res = -1;\n    while l <= r {\n        let mid = l + (r - l) / 2;\n        if arr[mid] == x {\n            res = mid as isize;\n            l = mid + 1;\n        } else if arr[mid] < x {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if arr[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    if r >= 0 && arr[r as usize] == x {\n        r\n    } else {\n        -1\n    }\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            if mid == arr.len() as isize - 1 || arr[(mid + 1) as usize] > x {\n                return mid;\n            } else {\n                low = mid + 1;\n            }\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if arr[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    r\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut m = 0;\n    while l <= r {\n        m = l + (r - l) / 2;\n        if arr[m as usize] == x {\n            if m == arr.len() as isize - 1 || arr[(m + 1) as usize] > x {\n                return m;\n            }\n            l = m + 1;\n        } else if arr[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut res = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if arr[m as usize] == x {\n            res = m;\n            l = m + 1;\n        } else if arr[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() - 1;\n\n    while l < r {\n        let mid = l + (r - l) / 2;\n        if arr[mid] <= x {\n            l = mid + 1;\n        } else {\n            r = mid;\n        }\n    }\n\n    if arr[l] == x {\n        l as isize\n    } else {\n        -1\n    }\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-1`,\n right: `0`', /tmp/tmpeluh2vh9.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            left = mid + 1;\n        } else if arr[mid as usize] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut res = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if arr[m as usize] == x {\n            res = m;\n            l = m + 1;\n        } else if arr[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = arr.len() as isize - 1;\n    let mut result = -1;\n    while lo <= hi {\n        let mid = lo + (hi - lo) / 2;\n        if arr[mid as usize] <= x {\n            result = mid;\n            lo = mid + 1;\n        } else {\n            hi = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    while l <= r {\n        let m = (l + r) / 2;\n        if arr[m as usize] == x {\n            if m == arr.len() as isize - 1 || arr[(m + 1) as usize] != x {\n                return m;\n            } else {\n                l = m + 1;\n            }\n        } else if arr[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut m = 0;\n    while l <= r {\n        m = l + (r - l) / 2;\n        if arr[m as usize] == x {\n            if m == arr.len() as isize - 1 || arr[(m + 1) as usize] != x {\n                return m;\n            }\n            l = m + 1;\n        } else if arr[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = (low + high) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut res = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if arr[m as usize] == x {\n            res = m;\n            l = m + 1;\n        } else if arr[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut m = 0;\n    while l <= r {\n        m = (l + r) / 2;\n        if arr[m as usize] == x {\n            if m == arr.len() as isize - 1 || arr[(m + 1) as usize] > x {\n                return m;\n            } else {\n                l = m + 1;\n            }\n        } else if arr[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut res = -1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if arr[mid as usize] == x {\n            res = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let mid = (left + right + 1) / 2;\n        if arr[mid] <= x {\n            left = mid;\n        } else {\n            right = mid - 1;\n        }\n    }\n    if arr[left] == x {\n        left as isize\n    } else {\n        -1\n    }\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            left = mid + 1;\n        } else if arr[mid as usize] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() - 1;\n    let mut res = -1;\n    while l <= r {\n        let mid = (l + r) / 2;\n        if arr[mid] == x {\n            res = mid as isize;\n            l = mid + 1;\n        } else if arr[mid] > x {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low: isize = 0;\n    let mut high: isize = arr.len() as isize - 1;\n    let mut result: isize = -1;\n\n    while low <= high {\n        let mid: isize = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() - 1;\n    let mut res = -1;\n\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if arr[m] == x {\n            res = m as isize;\n            l = m + 1;\n        } else if arr[m] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut m = 0;\n    while l <= r {\n        m = l + (r - l) / 2;\n        if arr[m as usize] == x {\n            if m == arr.len() as isize - 1 || arr[(m + 1) as usize] != x {\n                return m;\n            }\n            l = m + 1;\n        } else if arr[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            left = mid + 1;\n        } else if arr[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            left = mid + 1;\n        } else if arr[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut m = 0;\n    while l <= r {\n        m = (l + r) / 2;\n        if arr[m as usize] == x {\n            if m == arr.len() as isize - 1 || arr[(m + 1) as usize] > x {\n                return m;\n            } else {\n                l = m + 1;\n            }\n        } else if arr[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut m = 0;\n    while l <= r {\n        m = (l + r) / 2;\n        if arr[m as usize] == x {\n            if m == arr.len() as isize - 1 || arr[(m + 1) as usize] > x {\n                return m;\n            } else {\n                l = m + 1;\n            }\n        } else if arr[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = (low + high) / 2;\n\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low: isize = 0;\n    let mut high: isize = arr.len() as isize - 1;\n    let mut result: isize = -1;\n\n    while low <= high {\n        let mid: isize = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() as isize - 1;\n\n    while left < right {\n        let mid = left + (right - left + 1) / 2;\n        if arr[mid as usize] <= x {\n            left = mid;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    if arr[left as usize] == x {\n        left\n    } else {\n        -1\n    }\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut mid = 0;\n    let mut result = -1;\n    while low <= high {\n        mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if arr[m as usize] == x {\n            result = m;\n            l = m + 1;\n        } else if arr[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut res = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if arr[m as usize] == x {\n            res = m;\n            l = m + 1;\n        } else if arr[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            left = mid + 1;\n        } else if arr[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    if arr.len() == 0 {\n        return -1;\n    }\n    let mut l = 0;\n    let mut r = arr.len() - 1;\n    while l < r {\n        let m = (l + r + 1) / 2;\n        if arr[m] <= x {\n            l = m;\n        } else {\n            r = m - 1;\n        }\n    }\n    if arr[l] == x {\n        return l as isize;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if arr[mid] <= x {\n            low = mid + 1;\n        } else {\n            result = mid as isize;\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `0`', /tmp/tmpr60mmowo.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut m = 0;\n    while l <= r {\n        m = (l + r) / 2;\n        if arr[m as usize] == x {\n            if m == arr.len() as isize - 1 || arr[(m + 1) as usize] > x {\n                return m;\n            }\n            l = m + 1;\n        } else if arr[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = arr.len() as isize - 1;\n    while lo <= hi {\n        let mid = lo + (hi - lo) / 2;\n        if arr[mid as usize] <= x {\n            lo = mid + 1;\n        } else {\n            hi = mid - 1;\n        }\n    }\n    hi\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = arr.len() as isize - 1;\n    let mut mid = 0;\n    let mut result = -1;\n    while lo <= hi {\n        mid = lo + (hi - lo) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            lo = mid + 1;\n        } else if arr[mid as usize] < x {\n            lo = mid + 1;\n        } else {\n            hi = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut m = 0;\n    while l <= r {\n        m = (l + r) / 2;\n        if arr[m as usize] == x {\n            if m == arr.len() as isize - 1 || arr[(m + 1) as usize] > x {\n                return m;\n            } else {\n                l = m + 1;\n            }\n        } else if arr[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() as isize - 1;\n\n    while left < right {\n        let mid = (left + right) / 2;\n        if arr[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n\n    if arr[left as usize] == x {\n        left\n    } else {\n        -1\n    }\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-1`,\n right: `0`', /tmp/tmpmmvibzp4.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if arr[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n        if arr[mid as usize] == x {\n            result = mid;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            left = mid + 1;\n        } else if arr[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if arr[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    r\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut result = -1;\n\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            left = mid + 1;\n        } else if arr[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while left <= right {\n        let mid = (left + right) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            left = mid + 1;\n        } else if arr[mid as usize] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if arr[mid as usize] == x {\n            if mid == arr.len() as isize - 1 || arr[(mid + 1) as usize] != x {\n                return mid;\n            } else {\n                low = mid + 1;\n            }\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut res = -1;\n    while l <= r {\n        let mid = (l + r) / 2;\n        if arr[mid as usize] == x {\n            res = mid;\n            l = mid + 1;\n        } else if arr[mid as usize] < x {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut result = -1;\n\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            left = mid + 1;\n        } else if arr[mid] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut res = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if arr[m as usize] == x {\n            res = m;\n            l = m + 1;\n        } else if arr[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() - 1;\n    let mut res = -1;\n    while l <= r {\n        let mid = (l + r) / 2;\n        if arr[mid] == x {\n            res = mid as isize;\n            l = mid + 1;\n        } else if arr[mid] > x {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = (low + high) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if arr[m] == x {\n            result = m as isize;\n            l = m + 1;\n        } else if arr[m] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut res = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if arr[mid] == x {\n            res = mid as isize;\n            left = mid + 1;\n        } else if arr[mid] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() - 1;\n    let mut res = -1;\n    while l <= r {\n        let mid = l + (r - l) / 2;\n        if arr[mid] == x {\n            res = mid as isize;\n            l = mid + 1;\n        } else if arr[mid] > x {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = (left + right) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            left = mid + 1;\n        } else if arr[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut result = -1;\n\n    while left <= right {\n        let mid = (left + right) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            left = mid + 1;\n        } else if arr[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if arr[m as usize] == x {\n            if m == arr.len() as isize - 1 || arr[(m + 1) as usize] > x {\n                return m;\n            }\n            l = m + 1;\n        } else if arr[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() - 1;\n    let mut result = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if arr[m] == x {\n            result = m as isize;\n            l = m + 1;\n        } else if arr[m] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut res = -1;\n    while l <= r {\n        let mid = (l + r) / 2;\n        if arr[mid as usize] == x {\n            res = mid;\n            l = mid + 1;\n        } else if arr[mid as usize] < x {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut start = 0;\n    let mut end = arr.len() - 1;\n    let mut result = -1;\n\n    while start <= end {\n        let mid = start + (end - start) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            start = mid + 1;\n        } else if arr[mid] < x {\n            start = mid + 1;\n        } else {\n            end = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = (low + high) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut m = 0;\n    let mut result = -1;\n    while l <= r {\n        m = l + (r - l) / 2;\n        if arr[m as usize] == x {\n            result = m;\n            l = m + 1;\n        } else if arr[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    while l < r {\n        let m = l + (r - l) / 2;\n        if arr[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    if arr[l as usize] == x {\n        l\n    } else {\n        -1\n    }\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-1`,\n right: `0`', /tmp/tmpeknko6uk.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            if mid == arr.len() as isize - 1 || arr[(mid + 1) as usize] != x {\n                return mid;\n            } else {\n                low = mid + 1;\n            }\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut res = -1;\n    while l <= r {\n        let mid = (l + r) / 2;\n        if arr[mid as usize] == x {\n            res = mid;\n            l = mid + 1;\n        } else if arr[mid as usize] < x {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if arr[mid as usize] == x {\n            if mid == arr.len() as isize - 1 || arr[(mid + 1) as usize] != x {\n                return mid;\n            } else {\n                low = mid + 1;\n            }\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            left = mid + 1;\n        } else if arr[mid] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut res = -1;\n    while l <= r {\n        let m = (l + r) / 2;\n        if arr[m as usize] == x {\n            res = m;\n            l = m + 1;\n        } else if arr[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut res = -1;\n    while l <= r {\n        let mid = l + (r - l) / 2;\n        if arr[mid as usize] == x {\n            res = mid;\n            l = mid + 1;\n        } else if arr[mid as usize] < x {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = arr.len() as isize - 1;\n    while lo <= hi {\n        let mid = lo + (hi - lo) / 2;\n        if arr[mid as usize] == x {\n            if mid == arr.len() as isize - 1 || arr[(mid + 1) as usize] != x {\n                return mid;\n            } else {\n                lo = mid + 1;\n            }\n        } else if arr[mid as usize] < x {\n            lo = mid + 1;\n        } else {\n            hi = mid - 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if arr[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    if arr[r as usize] == x {\n        r\n    } else {\n        -1\n    }\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut res = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            res = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut result = -1;\n\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            left = mid + 1;\n        } else if arr[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut m = 0;\n\n    while l <= r {\n        m = (l + r) / 2;\n        if arr[m as usize] == x {\n            if m == arr.len() as isize - 1 || arr[(m + 1) as usize] != x {\n                return m;\n            } else {\n                l = m + 1;\n            }\n        } else if arr[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n\n    -1\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut mid = 0;\n    let mut result = -1;\n    while low <= high {\n        mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = (low + high) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut res = -1;\n    while l <= r {\n        let mid = l + (r - l) / 2;\n        if arr[mid as usize] == x {\n            res = mid;\n            l = mid + 1;\n        } else if arr[mid as usize] < x {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() as isize - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if arr[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            result = mid;\n            right = mid - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `0`', /tmp/tmpudew44of.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = (left + right) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            left = mid + 1;\n        } else if arr[mid] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            left = mid + 1;\n        } else if arr[mid] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if arr[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return r;\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut m = 0;\n    while l <= r {\n        m = (l + r) / 2;\n        if arr[m as usize] == x {\n            if m == arr.len() as isize - 1 || arr[(m + 1) as usize] > x {\n                return m;\n            } else {\n                l = m + 1;\n            }\n        } else if arr[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut result = -1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            left = mid + 1;\n        } else if arr[mid] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut res = -1;\n    while l <= r {\n        let mid = (l + r) / 2;\n        if arr[mid as usize] == x {\n            res = mid;\n            l = mid + 1;\n        } else if arr[mid as usize] < x {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut mid = 0;\n    let mut result = -1;\n    while low <= high {\n        mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = arr.len() - 1;\n    let mut result = -1;\n\n    while lo <= hi {\n        let mid = lo + (hi - lo) / 2;\n        if arr[mid] <= x {\n            lo = mid + 1;\n        } else {\n            hi = mid - 1;\n        }\n\n        if arr[mid] == x {\n            result = mid as isize;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut res = -1;\n    while l <= r {\n        let mid = l + (r - l) / 2;\n        if arr[mid as usize] == x {\n            res = mid;\n            l = mid + 1;\n        } else if arr[mid as usize] < x {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut result = -1;\n\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            left = mid + 1;\n        } else if arr[mid] > x {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = (low + high) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut m;\n    while l <= r {\n        m = l + (r - l) / 2;\n        if arr[m as usize] == x {\n            if m == arr.len() as isize - 1 || arr[(m + 1) as usize] > x {\n                return m;\n            } else {\n                l = m + 1;\n            }\n        } else if arr[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if arr[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    r\n}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
      "timestamp": 1666123681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}