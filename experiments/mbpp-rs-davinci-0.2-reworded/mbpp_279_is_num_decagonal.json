{
  "name": "mbpp_279_is_num_decagonal",
  "language": "rs",
  "prompt": "/// Write a function to find the nth decagonal number.\nfn is_num_decagonal(n: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = is_num_decagonal;\n    assert_eq!(candidate(3), 27);\n    assert_eq!(candidate(7), 175);\n    assert_eq!(candidate(10), 370);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3 * i + 1;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut nth_decagonal = 0;\n    while i <= n {\n        nth_decagonal = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    nth_decagonal",
    "    let mut i = 0;\n    loop {\n        let num = i * (3 * i - 1) / 2;\n        if num == n {\n            return i;\n        }\n        if num > n {\n            return -1;\n        }\n        i += 1;\n    }",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        i += 1;\n        num += 3 * i - 2;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 0;\n    while i <= n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3 * i + 1;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    loop {\n        let num = i * (3 * i - 1) / 2;\n        if num == n {\n            return i;\n        }\n        if num > n {\n            return -1;\n        }\n        i += 1;\n    }",
    "    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        i += 1;\n        n -= i * 10;\n    }\n    if n == 0 {\n        return i;\n    }\n    -1",
    "    let mut i = 1;\n    let mut decagonal = 0;\n    while decagonal < n {\n        decagonal = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    decagonal",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3 * i + 1;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3;\n        if is_pentagonal(num) && is_triangular(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 0;\n    loop {\n        let decagonal = i * (3 * i - 1) / 2;\n        if decagonal == n {\n            return i;\n        }\n        if decagonal > n {\n            return -1;\n        }\n        i += 1;\n    }",
    "    let mut i = 1;\n    let mut num = 0;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 1;\n    let mut result = 0;\n    while result < n {\n        result = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    result",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3 * i + 1;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    loop {\n        let num = i * (3 * i - 1) / 2;\n        if num == n {\n            return i;\n        } else if num > n {\n            return -1;\n        }\n        i += 1;\n    }",
    "    let decagonal = n * (3 * n - 2);\n    decagonal",
    "    let mut i = 1;\n    let mut num = 0;\n    while i <= n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 1;\n    while i <= n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 0;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut j = 1;\n    while j < n {\n        i += 1;\n        j = i * (3 * i - 1) / 2;\n    }\n    j",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3 * i + 1;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut decagonal = 1;\n    while i < n {\n        decagonal += 3 * i + 1;\n        i += 1;\n    }\n    decagonal",
    "    let mut num = 0;\n    let mut i = 1;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 3 * i + 1;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut decagonal = 1;\n    while i < n {\n        decagonal += 3 * i + 2;\n        i += 1;\n    }\n    decagonal",
    "    let mut i = 0;\n    let mut decagonal = 0;\n    while decagonal < n {\n        i += 1;\n        decagonal = i * (3 * i - 1) / 2;\n    }\n    decagonal",
    "    let mut i = 0;\n    let mut num = 0;\n    while num < n {\n        i += 1;\n        num = i * (3 * i - 1) / 2;\n    }\n    if num == n {\n        return i;\n    }\n    0",
    "    let mut i = 0;\n    let mut j = 0;\n    while i < n {\n        j += 1;\n        i = j * (3 * j - 2);\n    }\n    i",
    "    let mut i = 1;\n    let mut num = 0;\n    while i <= n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    let mut decagonal_num = 0;\n    while decagonal_num < n {\n        i += 1;\n        decagonal_num = i * (3 * i - 2);\n    }\n    decagonal_num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 0;\n    while i <= n {\n        num += i * 10;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    let mut j = 0;\n    while i < n {\n        j += 1;\n        i += j;\n    }\n    j",
    "    let mut i = 0;\n    let mut j = 0;\n    while i < n {\n        j += 1;\n        i = j * (3 * j - 1) / 2;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        j += 3 * i + 1;\n        i += 1;\n    }\n    j",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 0;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    if num == n {\n        return 1;\n    }\n    0",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i: isize = 0;\n    let mut nth: isize = 0;\n    while nth < n {\n        i += 1;\n        nth = i * (3 * i - 2);\n    }\n    nth",
    "    let mut i = 0;\n    let mut nth_decagonal = 0;\n    loop {\n        nth_decagonal = i * (3 * i - 1) / 2;\n        if nth_decagonal == n {\n            return i;\n        }\n        i += 1;\n    }",
    "    let n = n as f64;\n    let nth_decagonal = (n * (3.0 * n - 2.0)).round() as isize;\n    nth_decagonal",
    "    let mut i = 1;\n    let mut num = 0;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while num < n {\n        i += 1;\n        num = i * (3 * i - 1) / 2;\n    }\n    if num == n {\n        return i;\n    }\n    return 0;",
    "    let mut i = 0;\n    let mut count = 0;\n    while count < n {\n        i += 1;\n        if is_decagonal(i) {\n            count += 1;\n        }\n    }\n    i",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3;\n        if is_pentagonal(num) && is_hexagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3 * i + 1;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    loop {\n        let num = i * (3 * i - 1) / 2;\n        if num == n {\n            return i;\n        }\n        if num > n {\n            return -1;\n        }\n        i += 1;\n    }",
    "    let mut i = 1;\n    let mut num = 0;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3 * i + 1;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aaa = 0;\n    let mut bbb = 0;\n    let mut ccc = 0;\n    let mut ddd = 0;\n    let mut eee = 0;\n    let mut fff = 0;\n    let mut ggg = 0;\n    let mut hhh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n    let mut ppp = 0;",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 1;\n    let mut decagonal = 1;\n    while i < n {\n        i += 1;\n        decagonal += 3 * i - 2;\n    }\n    decagonal",
    "    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aaa = 0;\n    let mut bbb = 0;\n    let mut ccc = 0;\n    let mut ddd = 0;\n    let mut eee = 0;\n    let mut fff = 0;\n    let mut ggg = 0;\n    let mut hhh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n    let mut ppp = 0;",
    "    let mut i = 0;\n    let mut nth = 0;\n    loop {\n        i += 1;\n        nth = i * (3 * i - 1) / 2;\n        if nth == n {\n            return i;\n        }\n        if nth > n {\n            return 0;\n        }\n    }",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        j += 3 * i + 1;\n        i += 1;\n    }\n    j",
    "    let mut i = 1;\n    let mut decagonal = 1;\n    while i < n {\n        decagonal = decagonal + 3 * i + 1;\n        i += 1;\n    }\n    decagonal",
    "    let mut i = 1;\n    let mut num = 0;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    if num == n {\n        num\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3 * i + 1;\n        i += 1;\n    }\n    num",
    "    let mut num = 0;\n    let mut i = 1;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3;\n        if is_pentagonal(num) && is_hexagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 0;\n    let mut j = 1;\n    while i < n {\n        j += 1;\n        if is_decagonal(j) {\n            i += 1;\n        }\n    }\n    j",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        i += 1;\n        num = i * (3 * i - 1) / 2;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3 * i + 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3 * i + 1;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    loop {\n        i += 1;\n        let num = i * (3 * i - 2);\n        if num == n {\n            return i;\n        }\n        if num > n {\n            return 0;\n        }\n    }",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        i += 1;\n        num += i * 10;\n    }\n    num",
    "    let mut i = 1;\n    let mut result = 0;\n    while result < n {\n        result = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    if result == n {\n        return i - 1;\n    }\n    return 0;",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3;\n        if is_pentagonal(num) && is_hexagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        i += 1;\n        num = i * (3 * i - 1) / 2;\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        i += 1;\n        num = i * (3 * i - 1) / 2;\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 0;\n    loop {\n        let num = i * (3 * i - 1) / 2;\n        if num == n {\n            return i;\n        }\n        if num > n {\n            return -1;\n        }\n        i += 1;\n    }",
    "    let mut i = 0;\n    let mut num = 0;\n    while num < n {\n        i += 1;\n        num = i * (3 * i - 1) / 2;\n    }\n    if num == n {\n        i\n    } else {\n        -1\n    }",
    "    let mut i = 0;\n    let mut d = 0;\n    while d < n {\n        i += 1;\n        d = i * (3 * i - 1) / 2;\n    }\n    d",
    "    let mut i = 0;\n    let mut num = 0;\n    while i <= n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut decagonal = 0;\n    while decagonal < n {\n        decagonal = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    decagonal",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        i += 1;\n        num = i * (3 * i - 1) / 2;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 0;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3;\n        if is_pentagonal(num) && is_hexagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 0;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 0;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while num < n {\n        i += 1;\n        num = i * (3 * i - 1) / 2;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 0;\n    while i <= n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    let mut count = 0;\n    while count < n {\n        i += 1;\n        let decagonal = i * (3 * i - 1) / 2;\n        if is_pentagonal(decagonal) {\n            count += 1;\n        }\n    }\n    i * (3 * i - 1) / 2",
    "    let mut i = 0;\n    loop {\n        let num = i * (3 * i - 1) / 2;\n        if num == n {\n            return i;\n        }\n        if num > n {\n            return -1;\n        }\n        i += 1;\n    }",
    "    let mut i = 0;\n    let mut num = 0;\n    while num < n {\n        i += 1;\n        num = i * (3 * i - 1) / 2;\n    }\n    if num == n {\n        return i;\n    }\n    return 0;",
    "    let mut i = 1;\n    let mut j = 1;\n    while i <= n {\n        if j * (3 * j - 1) / 2 == n {\n            return i;\n        }\n        i += 1;\n        j += 1;\n    }\n    return 0;",
    "    let mut n = n;\n    let mut i = 1;\n    while n > 0 {\n        n -= i * 10;\n        i += 1;\n    }\n    if n == 0 {\n        return i * 10 - 1;\n    }\n    return 0;",
    "    let mut i = 0;\n    let mut decagonal = 0;\n    while decagonal < n {\n        i += 1;\n        decagonal = i * (3 * i - 1) / 2;\n    }\n    decagonal",
    "    let mut i = 0;\n    loop {\n        let num = i * (3 * i - 1) / 2;\n        if num == n {\n            return i;\n        }\n        if num > n {\n            return -1;\n        }\n        i += 1;\n    }",
    "    let mut num = 0;\n    let mut i = 0;\n    while num < n {\n        i += 1;\n        num = i * (3 * i - 2);\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3 * i + 1;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    let mut decagonal = 0;\n    while decagonal < n {\n        i += 1;\n        decagonal = i * (3 * i - 1) / 2;\n    }\n    decagonal",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3 * i + 1;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    let mut decagonal = 0;\n    while decagonal < n {\n        i += 1;\n        decagonal = i * (3 * i - 1) / 2;\n    }\n    decagonal",
    "    let mut i = 0;\n    let mut num = 0;\n    while num < n {\n        i += 1;\n        num = i * (3 * i - 1) / 2;\n    }\n    num",
    "    let mut i = 0;\n    let mut nth_decagonal = 0;\n    while nth_decagonal < n {\n        i += 1;\n        nth_decagonal = i * (3 * i - 1) / 2;\n    }\n    nth_decagonal",
    "    let mut i = 1;\n    let mut nth = 1;\n    while nth != n {\n        nth = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    nth",
    "    let mut i = 0;\n    loop {\n        i += 1;\n        let decagonal = i * (3 * i - 1) / 2;\n        if decagonal == n {\n            return i;\n        }\n    }",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 1;\n    let mut decagonal = 1;\n    while i < n {\n        i += 1;\n        decagonal = i * (3 * i - 1) / 2;\n    }\n    decagonal",
    "    let mut i = 0;\n    loop {\n        let decagonal = i * (3 * i - 1) / 2;\n        if decagonal == n {\n            return i;\n        }\n        if decagonal > n {\n            return -1;\n        }\n        i += 1;\n    }",
    "    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = n;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aaa = 0;\n    let mut bbb = 0;\n    let mut ccc = 0;\n    let mut ddd = 0;\n    let mut eee = 0;\n    let mut fff = 0;\n    let mut ggg = 0;\n    let mut hhh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n    let mut ppp = 0;\n    let mut qqq = 0",
    "    let mut i = 0;\n    loop {\n        let decagonal = i * (3 * i - 1) / 2;\n        if decagonal == n {\n            return i;\n        }\n        if decagonal > n {\n            return -1;\n        }\n        i += 1;\n    }",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        i += 1;\n        num = i * (3 * i - 1) / 2;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 0;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while num < n {\n        i += 1;\n        num = i * (3 * i - 1) / 2;\n    }\n    if num == n {\n        i\n    } else {\n        -1\n    }",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3;\n        if is_pentagonal(num) && is_hexagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    loop {\n        i += 1;\n        num = i * (3 * i - 1) / 2;\n        if num == n {\n            return i;\n        }\n    }",
    "    let mut i = 0;\n    let mut j = 0;\n    loop {\n        i += 1;\n        j = i * (3 * i - 2);\n        if j == n {\n            return i;\n        }\n        if j > n {\n            return 0;\n        }\n    }",
    "    let mut i = 0;\n    loop {\n        let decagonal = i * (3 * i - 1) / 2;\n        if decagonal == n {\n            return i;\n        }\n        i += 1;\n    }",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        i += 1;\n        num += 3 * i - 2;\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 1;\n    let mut result = 0;\n    while result < n {\n        result = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    result",
    "    let mut i = 0;\n    let mut num = 0;\n    while num < n {\n        i += 1;\n        num = i * (3 * i - 1) / 2;\n    }\n    if num == n {\n        i\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut num = 0;\n    while i <= n {\n        num = i * (3 * i - 1) / 2;\n        if num % 10 == 0 {\n            return num;\n        }\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3 * i + 1;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while num < n {\n        i += 1;\n        num = i * (3 * i - 1) / 2;\n    }\n    if num == n {\n        return i;\n    }\n    return 0;",
    "    let mut i = 1;\n    let mut num = 0;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while num < n {\n        i += 1;\n        num = i * (3 * i - 1) / 2;\n    }\n    if num == n {\n        return i;\n    }\n    return 0;",
    "    let mut i = 0;\n    let mut sum = 0;\n    while sum < n {\n        i += 1;\n        sum = i * (3 * i - 1) / 2;\n    }\n    if sum == n {\n        i\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut decagonal_num = 0;\n    while decagonal_num < n {\n        decagonal_num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    decagonal_num",
    "    let mut i = 1;\n    let mut num = 1;\n    while i != n {\n        i += 1;\n        num += 3 * i - 2;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 0;\n    while i <= n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    while i * (3 * i - 1) / 2 < n {\n        i += 1;\n    }\n    if i * (3 * i - 1) / 2 == n {\n        i\n    } else {\n        -1\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 1) / 2 < n {\n        i += 1;\n    }\n    if i * (3 * i - 1) / 2 == n {\n        return i;\n    }\n    return 0;",
    "    let mut i = 1;\n    let mut decagonal_num = i * (3 * i - 1) / 2;\n    while decagonal_num < n {\n        i += 1;\n        decagonal_num = i * (3 * i - 1) / 2;\n    }\n    if decagonal_num == n {\n        return i;\n    }\n    -1",
    "    let mut i = 0;\n    loop {\n        let num = i * (3 * i - 1) / 2;\n        if num == n {\n            return i;\n        }\n        if num > n {\n            return -1;\n        }\n        i += 1;\n    }",
    "    let mut i = 0;\n    let mut decagonal = 0;\n    while decagonal < n {\n        i += 1;\n        decagonal = i * (3 * i - 1) / 2;\n    }\n    decagonal",
    "    let mut i = 0;\n    loop {\n        let num = i * (3 * i - 1) / 2;\n        if num == n {\n            return i;\n        }\n        i += 1;\n    }",
    "    let mut i = 0;\n    let mut j = 0;\n    while i < n {\n        j += 1;\n        i = j * (3 * j - 1) / 2;\n    }\n    i",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        i += 1;\n        num = i * (3 * i - 1) / 2;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 0;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        j += 3 * i + 1;\n        i += 1;\n    }\n    j",
    "    let mut i = 0;\n    loop {\n        let decagonal = i * (3 * i - 1) / 2;\n        if decagonal == n {\n            return i;\n        }\n        if decagonal > n {\n            return -1;\n        }\n        i += 1;\n    }",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3 * i + 1;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aaa = 0;\n    let mut bbb = 0;\n    let mut ccc = 0;\n    let mut ddd = 0;\n    let mut eee = 0;\n    let mut fff = 0;\n    let mut ggg = 0;\n    let mut hhh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n    let mut ppp = 0;",
    "    let mut i = 0;\n    loop {\n        let num = (i * (3 * i - 1)) / 2;\n        if num == n {\n            return i;\n        }\n        i += 1;\n    }",
    "    let mut i = 0;\n    let mut num = 0;\n    while num < n {\n        i += 1;\n        num = i * (3 * i - 1) / 2;\n    }\n    if num == n {\n        i\n    } else {\n        -1\n    }",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        i += 1;\n        num = i * (3 * i - 1) / 2;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3;\n        if is_pentagonal(num) && is_hexagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 0;\n    loop {\n        let decagonal = i * (3 * i - 1) / 2;\n        if decagonal == n {\n            return i;\n        }\n        if decagonal > n {\n            return -1;\n        }\n        i += 1;\n    }",
    "    let mut i = 0;\n    loop {\n        i += 1;\n        let num = i * (3 * i - 1) / 2;\n        if num == n {\n            return i;\n        }\n    }",
    "    let mut i = 0;\n    loop {\n        let decagonal = i * (3 * i - 1) / 2;\n        if decagonal == n {\n            return i;\n        }\n        if decagonal > n {\n            return -1;\n        }\n        i += 1;\n    }",
    "    let mut i = 1;\n    let mut d = 1;\n    while i < n {\n        d += 3 * i + 1;\n        i += 1;\n    }\n    d",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 0;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 0;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut nth = 0;\n    let mut i = 0;\n    loop {\n        i += 1;\n        nth = i * (3 * i - 2);\n        if nth == n {\n            return i;\n        }\n        if nth > n {\n            return -1;\n        }\n    }",
    "    let mut i = 1;\n    let mut num = 0;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        i += 1;\n        num += 3 * i - 2;\n    }\n    num",
    "    let mut i = 0;\n    let mut j = 0;\n    while i < n {\n        j += 1;\n        i = j * (3 * j - 1) / 2;\n    }\n    i",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 0;\n    let mut j = 0;\n    while i < n {\n        j += 1;\n        i = j * (3 * j - 1) / 2;\n    }\n    i",
    "    let mut i = 0;\n    let mut decagonal = 0;\n    while decagonal < n {\n        i += 1;\n        decagonal = i * (3 * i - 2);\n    }\n    if decagonal == n {\n        return i;\n    }\n    return 0;",
    "    let mut i = 1;\n    let mut num = 0;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3 * i + 1;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    let mut nth_decagonal = 0;\n    while nth_decagonal < n {\n        i += 1;\n        nth_decagonal = i * (3 * i - 2);\n    }\n    if nth_decagonal == n {\n        return i;\n    }\n    -1",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        i += 1;\n        num += 10 * i - 9;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 0;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    loop {\n        let num = i * (3 * i - 1) / 2;\n        if num == n {\n            return i;\n        }\n        if num > n {\n            return -1;\n        }\n        i += 1;\n    }",
    "    let mut i = 0;\n    let mut num = 0;\n    while num < n {\n        i += 1;\n        num = i * (3 * i - 1) / 2;\n    }\n    if num == n {\n        i\n    } else {\n        -1\n    }",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 0;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 0;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i: isize = 1;\n    let mut num: isize = 0;\n    while i <= n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 0;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 0;\n    loop {\n        let decagonal = i * (3 * i - 1) / 2;\n        if decagonal == n {\n            return i;\n        }\n        if decagonal > n {\n            return -1;\n        }\n        i += 1;\n    }",
    "    let mut i = 1;\n    let mut num = 0;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3 * i + 1;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 0;\n    while i <= n {\n        num += i * 10;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 0;\n    while i <= n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 1;\n    let mut num = 0;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        j += 3 * i + 1;\n        i += 1;\n    }\n    j",
    "    let mut i = 0;\n    let mut num = 0;\n    while num < n {\n        i += 1;\n        num = i * (3 * i - 1) / 2;\n    }\n    num",
    "    let mut n = n;\n    let mut i = 1;\n    let mut decagonal = 0;\n    while n > 0 {\n        decagonal = i * (3 * i - 1) / 2;\n        if decagonal % 10 == 0 {\n            n -= 1;\n        }\n        i += 1;\n    }\n    decagonal",
    "    let mut i = 0;\n    loop {\n        let num = i * (3 * i - 1) / 2;\n        if num == n {\n            return i;\n        }\n        if num > n {\n            return -1;\n        }\n        i += 1;\n    }",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 1;\n    let mut decagonal = 1;\n    while i < n {\n        i += 1;\n        decagonal += 3 * i - 2;\n    }\n    decagonal"
  ]
}