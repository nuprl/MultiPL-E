{
  "name": "mbpp_129_magic_square_test",
  "language": "rs",
  "prompt": "/// Write a function to calculate whether the matrix is a magic square.\nfn magic_square_test(my_matrix: Vec<Vec<isize>>) -> bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = magic_square_test;\n    assert_eq!(candidate(vec![vec![7, 12, 1, 14], vec![2, 13, 8, 11], vec![16, 3, 10, 5], vec![9, 6, 15, 4]]), true);\n    assert_eq!(candidate(vec![vec![2, 7, 6], vec![9, 5, 1], vec![4, 3, 8]]), true);\n    assert_eq!(candidate(vec![vec![2, 7, 6], vec![9, 5, 1], vec![4, 3, 7]]), false);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut sum = 0;\n    let mut sum_diag_1 = 0;\n    let mut sum_diag_2 = 0;\n    let mut sum_row = 0;\n    let mut sum_col = 0;\n    let mut sum_col_1 = 0;\n    let mut sum_col_2 = 0;\n    let mut sum_col_3 = 0;\n    let mut sum_col_4 = 0;\n\n    for i in 0..my_matrix.len() {\n        for j in 0..my_matrix[i].len() {\n            sum += my_matrix[i][j];\n        }\n    }\n\n    for i in 0..my_matrix.len() {\n        sum_row += my_matrix[i][i];\n    }\n\n    for i in 0..my_matrix.len() {\n        sum_diag_1 += my_matrix[i][i];\n    }\n\n    for i in 0..my_matrix.len() {\n        sum_diag_2 += my_matrix[i][my_matrix.len() - i - 1];\n    }\n\n    for i in 0..my_matrix.len() {\n        sum_col_1 += my_matrix[i][0];\n    }\n\n    for i in 0..my_matrix.len() {\n        sum_col_2 += my_matrix[i][1];\n    }\n\n    for i in 0..my_matrix.len() {\n        sum_col_3 += my_matrix[i][2];\n    }\n\n    for i in 0..my_matrix.len() {\n        sum_col_4 += my_matrix[i][3];\n    }\n\n    if sum_row == sum_diag_1 && sum_diag_1 == sum_diag_2 && sum_diag_2 == sum_col_1\n        && sum_col_1 == sum_col_2 && sum_col_2 == sum_col_3 && sum_col_3 == sum_col_4\n    {\n        return true;\n    } else {\n        return false;\n    }",
    "    let mut sum = 0;\n    for i in 0..my_matrix.len() {\n        sum += my_matrix[i][i];\n    }\n    for i in 0..my_matrix.len() {\n        let mut sum_row = 0;\n        let mut sum_col = 0;\n        for j in 0..my_matrix.len() {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if sum_row != sum || sum_col != sum {\n            return false;\n        }\n    }\n    true",
    "    let mut row_sum = vec![0; my_matrix.len()];\n    let mut col_sum = vec![0; my_matrix.len()];\n    let mut diag_sum = vec![0; 2];\n    for (i, row) in my_matrix.iter().enumerate() {\n        for (j, col) in row.iter().enumerate() {\n            row_sum[i] += col;\n            col_sum[j] += col;\n            if i == j {\n                diag_sum[0] += col;\n            }\n            if i == my_matrix.len() - j - 1 {\n                diag_sum[1] += col;\n            }\n        }\n    }\n    let mut sum = row_sum[0];\n    for i in 1..row_sum.len() {\n        if row_sum[i] != sum {\n            return false;\n        }\n    }\n    for i in 0..col_sum.len() {\n        if col_sum[i] != sum {\n            return false;\n        }\n    }\n    for i in 0..diag_sum.len() {\n        if diag_sum[i] != sum {\n            return false;\n        }\n    }\n    true",
    "    let mut sum_list: Vec<isize> = Vec::new();\n    let mut sum: isize = 0;\n    let mut index: usize = 0;\n    let mut index_2: usize = 0;\n    let mut index_3: usize = 0;\n    let mut index_4: usize = 0;\n    let mut index_5: usize = 0;\n    let mut index_6: usize = 0;\n    let mut index_7: usize = 0;\n    let mut index_8: usize = 0;\n    let mut index_9: usize = 0;\n    let mut index_10: usize = 0;\n    let mut index_11: usize = 0;\n    let mut index_12: usize = 0;\n    let mut index_13: usize = 0;\n    let mut index_14: usize = 0;\n    let mut index_15: usize = 0;\n    let mut index_16: usize = 0;\n    let mut index_17: usize = 0;\n    let mut index_18: usize = 0;\n    let mut index_19: usize = 0;\n    let mut index_20: usize = 0;\n    let mut index_21: usize = 0;\n    let mut index_22: usize = 0;\n    let mut index_23: usize = 0;\n    let mut index_24: usize = 0;\n    let mut index_25: usize = 0;\n    let mut index_26: usize = 0;\n    let mut index_27: usize = 0;\n    let mut index_28: usize = 0;\n    let mut index_29: usize = 0;\n    let mut index_30: usize = 0;\n    let mut index_31: usize = 0;\n    let mut index_32: usize = 0;\n    let mut index_33: usize = 0;\n    let mut index_34: usize = 0;\n    let mut index_35: usize = 0;\n    let mut index_36: usize = 0;\n    let mut index_37: usize = 0;\n    let mut",
    "    let mut sum = 0;\n    let mut sum_diag = 0;\n    let mut sum_diag_2 = 0;\n    let mut sum_row = 0;\n    let mut sum_col = 0;\n    let mut sum_row_2 = 0;\n    let mut sum_col_2 = 0;\n    let mut sum_row_3 = 0;\n    let mut sum_col_3 = 0;\n    let mut sum_row_4 = 0;\n    let mut sum_col_4 = 0;\n    let mut sum_row_5 = 0;\n    let mut sum_col_5 = 0;\n    let mut sum_row_6 = 0;\n    let mut sum_col_6 = 0;\n    let mut sum_row_7 = 0;\n    let mut sum_col_7 = 0;\n    let mut sum_row_8 = 0;\n    let mut sum_col_8 = 0;\n\n    for i in 0..my_matrix.len() {\n        for j in 0..my_matrix[i].len() {\n            sum += my_matrix[i][j];\n            if i == j {\n                sum_diag += my_matrix[i][j];\n            }\n            if i + j == my_matrix.len() - 1 {\n                sum_diag_2 += my_matrix[i][j];\n            }\n            if i == 0 {\n                sum_row += my_matrix[i][j];\n            }\n            if j == 0 {\n                sum_col += my_matrix[i][j];\n            }\n            if i == 1 {\n                sum_row_2 += my_matrix[i][j];\n            }\n            if j == 1 {\n                sum_col_2 += my_matrix[i][j];\n            }\n            if i == 2 {\n                sum_row_3 += my_matrix[i][j];\n            }\n            if j == 2 {\n                sum_col_3 += my_matrix[i][j];\n            }\n            if i == 3 {\n                sum_row_4 += my_matrix[i][j];\n",
    "    let mut sum_row: isize = 0;\n    let mut sum_col: isize = 0;\n    let mut sum_diag: isize = 0;\n    let mut sum_diag_rev: isize = 0;\n    let mut sum_row_prev: isize = 0;\n    let mut sum_col_prev: isize = 0;\n\n    for (i, row) in my_matrix.iter().enumerate() {\n        for (j, col) in row.iter().enumerate() {\n            sum_row += *col;\n            sum_col += my_matrix[j][i];\n            if i == j {\n                sum_diag += *col;\n            }\n            if i + j == my_matrix.len() - 1 {\n                sum_diag_rev += *col;\n            }\n        }\n        if i > 0 {\n            if sum_row != sum_row_prev {\n                return false;\n            }\n            if sum_col != sum_col_prev {\n                return false;\n            }\n        }\n        sum_row_prev = sum_row;\n        sum_col_prev = sum_col;\n        sum_row = 0;\n        sum_col = 0;\n    }\n    if sum_diag != sum_diag_rev {\n        return false;\n    }\n    return true;",
    "    let mut sum = 0;\n    let mut sum_diag = 0;\n    let mut sum_diag_2 = 0;\n    let mut sum_row = 0;\n    let mut sum_col = 0;\n    let mut sum_row_2 = 0;\n    let mut sum_col_2 = 0;\n    let mut sum_row_3 = 0;\n    let mut sum_col_3 = 0;\n    let mut sum_row_4 = 0;\n    let mut sum_col_4 = 0;\n    let mut sum_row_5 = 0;\n    let mut sum_col_5 = 0;\n    let mut sum_row_6 = 0;\n    let mut sum_col_6 = 0;\n    let mut sum_row_7 = 0;\n    let mut sum_col_7 = 0;\n    let mut sum_row_8 = 0;\n    let mut sum_col_8 = 0;\n\n    for i in 0..my_matrix.len() {\n        for j in 0..my_matrix[i].len() {\n            sum += my_matrix[i][j];\n            if i == j {\n                sum_diag += my_matrix[i][j];\n            }\n            if i + j == my_matrix.len() - 1 {\n                sum_diag_2 += my_matrix[i][j];\n            }\n            if i == 0 {\n                sum_row += my_matrix[i][j];\n            }\n            if j == 0 {\n                sum_col += my_matrix[i][j];\n            }\n            if i == 1 {\n                sum_row_2 += my_matrix[i][j];\n            }\n            if j == 1 {\n                sum_col_2 += my_matrix[i][j];\n            }\n            if i == 2 {\n                sum_row_3 += my_matrix[i][j];\n            }\n            if j == 2 {\n                sum_col_3 += my_matrix[i][j];\n            }\n            if i == 3 {\n                sum_row_4 += my_matrix[i][j];\n",
    "    let mut sum_rows = vec![0; my_matrix.len()];\n    let mut sum_cols = vec![0; my_matrix.len()];\n    let mut sum_diag1 = 0;\n    let mut sum_diag2 = 0;\n    for i in 0..my_matrix.len() {\n        for j in 0..my_matrix.len() {\n            sum_rows[i] += my_matrix[i][j];\n            sum_cols[j] += my_matrix[i][j];\n            if i == j {\n                sum_diag1 += my_matrix[i][j];\n            }\n            if i + j == my_matrix.len() - 1 {\n                sum_diag2 += my_matrix[i][j];\n            }\n        }\n    }\n    let mut all_sums = sum_rows;\n    all_sums.extend(sum_cols);\n    all_sums.push(sum_diag1);\n    all_sums.push(sum_diag2);\n    let mut all_sums_set = all_sums.clone();\n    all_sums_set.sort();\n    all_sums_set.dedup();\n    all_sums_set.len() == 1",
    "    let mut sum = 0;\n    let mut sum_diag = 0;\n    let mut sum_diag_2 = 0;\n    let mut sum_row = 0;\n    let mut sum_col = 0;\n    let mut sum_col_2 = 0;\n    let mut sum_row_2 = 0;\n    let mut sum_col_3 = 0;\n    let mut sum_row_3 = 0;\n\n    for i in 0..my_matrix.len() {\n        for j in 0..my_matrix[i].len() {\n            sum += my_matrix[i][j];\n        }\n    }\n\n    for i in 0..my_matrix.len() {\n        sum_row += my_matrix[i][0];\n        sum_row_2 += my_matrix[i][1];\n        sum_row_3 += my_matrix[i][2];\n    }\n\n    for i in 0..my_matrix.len() {\n        sum_col += my_matrix[0][i];\n        sum_col_2 += my_matrix[1][i];\n        sum_col_3 += my_matrix[2][i];\n    }\n\n    for i in 0..my_matrix.len() {\n        sum_diag += my_matrix[i][i];\n        sum_diag_2 += my_matrix[i][my_matrix.len() - 1 - i];\n    }\n\n    if sum_diag == sum_diag_2 && sum_diag == sum_col && sum_diag == sum_col_2 && sum_diag == sum_col_3\n        && sum_diag == sum_row && sum_diag == sum_row_2 && sum_diag == sum_row_3\n    {\n        return true;\n    } else {\n        return false;\n    }",
    "    let mut sum = 0;\n    let mut sum_diag = 0;\n    let mut sum_diag2 = 0;\n    let mut sum_row = 0;\n    let mut sum_col = 0;\n    let mut sum_col2 = 0;\n    let mut sum_row2 = 0;\n    let mut sum_col3 = 0;\n    let mut sum_row3 = 0;\n    let mut sum_col4 = 0;\n    let mut sum_row4 = 0;\n    let mut sum_col5 = 0;\n    let mut sum_row5 = 0;\n    let mut sum_col6 = 0;\n    let mut sum_row6 = 0;\n    let mut sum_col7 = 0;\n    let mut sum_row7 = 0;\n    let mut sum_col8 = 0;\n    let mut sum_row8 = 0;\n    let mut sum_col9 = 0;\n    let mut sum_row9 = 0;\n    let mut sum_col10 = 0;\n    let mut sum_row10 = 0;\n    let mut sum_col11 = 0;\n    let mut sum_row11 = 0;\n    let mut sum_col12 = 0;\n    let mut sum_row12 = 0;\n    let mut sum_col13 = 0;\n    let mut sum_row13 = 0;\n    let mut sum_col14 = 0;\n    let mut sum_row14 = 0;\n    let mut sum_col15 = 0;\n    let mut sum_row15 = 0;\n    let mut sum_col16 = 0;\n    let mut sum_row16 = 0;\n    let mut sum_col17 = 0;\n    let mut sum_row17 = 0;\n    let mut sum_col18 = 0;\n    let mut sum_row18 = 0;\n    let mut sum_col19 = 0;\n    let mut sum_row19 = 0;\n    let mut sum_col20 = 0;\n    let mut sum_row20 = 0;\n    let mut sum_col21 = 0;\n    let mut sum_row21 = 0;\n    let mut sum_col22 = 0;\n    let mut sum_row22 = 0",
    "    let mut sum = 0;\n    let mut sum_diag = 0;\n    let mut sum_diag_2 = 0;\n    let mut sum_row = 0;\n    let mut sum_col = 0;\n    let mut sum_row_2 = 0;\n    let mut sum_col_2 = 0;\n    let mut sum_row_3 = 0;\n    let mut sum_col_3 = 0;\n    let mut sum_row_4 = 0;\n    let mut sum_col_4 = 0;\n    let mut sum_row_5 = 0;\n    let mut sum_col_5 = 0;\n    let mut sum_row_6 = 0;\n    let mut sum_col_6 = 0;\n    let mut sum_row_7 = 0;\n    let mut sum_col_7 = 0;\n    let mut sum_row_8 = 0;\n    let mut sum_col_8 = 0;\n\n    for i in 0..my_matrix.len() {\n        for j in 0..my_matrix[i].len() {\n            sum += my_matrix[i][j];\n        }\n    }\n\n    for i in 0..my_matrix.len() {\n        for j in 0..my_matrix[i].len() {\n            if i == j {\n                sum_diag += my_matrix[i][j];\n            }\n        }\n    }\n\n    for i in 0..my_matrix.len() {\n        for j in 0..my_matrix[i].len() {\n            if i + j == my_matrix.len() - 1 {\n                sum_diag_2 += my_matrix[i][j];\n            }\n        }\n    }\n\n    for i in 0..my_matrix.len() {\n        for j in 0..my_matrix[i].len() {\n            if i == 0 {\n                sum_row += my_matrix[i][j];\n            }\n            if i == 1 {\n                sum_row_2 += my_matrix[i][j];\n            }\n            if i == 2 {\n                sum_row_3 += my_",
    "    let mut sum = 0;\n    let mut sum_diag = 0;\n    let mut sum_diag_2 = 0;\n    let mut sum_row = 0;\n    let mut sum_col = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aaa = 0;\n    let mut bbb = 0;\n    let mut ccc = 0;\n    let mut ddd = 0;\n    let mut eee = 0;\n    let mut fff = 0;\n    let mut ggg = 0;\n    let mut hhh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n   ",
    "    let mut sum_of_rows: Vec<isize> = Vec::new();\n    let mut sum_of_columns: Vec<isize> = Vec::new();\n    let mut sum_of_diagonals: Vec<isize> = Vec::new();\n    let mut sum_of_reverse_diagonals: Vec<isize> = Vec::new();\n    let mut sum_of_all_elements: isize = 0;\n    let mut sum_of_all_elements_in_row: isize = 0;\n    let mut sum_of_all_elements_in_column: isize = 0;\n    let mut sum_of_all_elements_in_diagonal: isize = 0;\n    let mut sum_of_all_elements_in_reverse_diagonal: isize = 0;\n\n    for i in 0..my_matrix.len() {\n        for j in 0..my_matrix[i].len() {\n            sum_of_all_elements += my_matrix[i][j];\n            sum_of_all_elements_in_row += my_matrix[i][j];\n            sum_of_all_elements_in_column += my_matrix[j][i];\n            if i == j {\n                sum_of_all_elements_in_diagonal += my_matrix[i][j];\n            }\n            if i + j == my_matrix.len() - 1 {\n                sum_of_all_elements_in_reverse_diagonal += my_matrix[i][j];\n            }\n        }\n        sum_of_rows.push(sum_of_all_elements_in_row);\n        sum_of_columns.push(sum_of_all_elements_in_column);\n        sum_of_diagonals.push(sum_of_all_elements_in_diagonal);\n        sum_of_reverse_diagonals.push(sum_of_all_elements_in_reverse_diagonal);\n        sum_of_all_elements_in_row = 0;\n        sum_of_all_elements",
    "    let mut sum_row: Vec<isize> = Vec::new();\n    let mut sum_col: Vec<isize> = Vec::new();\n    let mut sum_diag: Vec<isize> = Vec::new();\n    let mut sum_anti_diag: Vec<isize> = Vec::new();\n    let mut sum_row_temp: isize = 0;\n    let mut sum_col_temp: isize = 0;\n    let mut sum_diag_temp: isize = 0;\n    let mut sum_anti_diag_temp: isize = 0;\n    let mut sum_row_final: isize = 0;\n    let mut sum_col_final: isize = 0;\n    let mut sum_diag_final: isize = 0;\n    let mut sum_anti_diag_final: isize = 0;\n    let mut sum_row_final_temp: isize = 0;\n    let mut sum_col_final_temp: isize = 0;\n    let mut sum_diag_final_temp: isize = 0;\n    let mut sum_anti_diag_final_temp: isize = 0;\n    let mut sum_row_final_final: isize = 0;\n    let mut sum_col_final_final: isize = 0;\n    let mut sum_diag_final_final: isize = 0;\n    let mut sum_anti_diag_final_final: isize = 0;\n    let mut sum_row_final_final_temp: isize = 0;\n    let mut sum_col_final_final_temp: isize = 0;\n    let mut sum_diag_final_final_temp: isize = 0;\n    let mut sum_anti_diag_final_final_temp: isize = 0;\n    let mut sum_row_final_final_final: isize = 0;\n    let mut sum_col_final_final_final: isize = 0;\n    let mut sum_diag_final_final_final: isize = 0;\n    let mut sum_anti_diag_final_final_final: isize = 0;\n    let mut",
    "    let mut sum = 0;\n    let mut sum_diag = 0;\n    let mut sum_diag2 = 0;\n    let mut sum_row = 0;\n    let mut sum_col = 0;\n    let mut sum_row2 = 0;\n    let mut sum_col2 = 0;\n    let mut sum_row3 = 0;\n    let mut sum_col3 = 0;\n    let mut sum_row4 = 0;\n    let mut sum_col4 = 0;\n    let mut sum_row5 = 0;\n    let mut sum_col5 = 0;\n    let mut sum_row6 = 0;\n    let mut sum_col6 = 0;\n    let mut sum_row7 = 0;\n    let mut sum_col7 = 0;\n    let mut sum_row8 = 0;\n    let mut sum_col8 = 0;\n    let mut sum_row9 = 0;\n    let mut sum_col9 = 0;\n    let mut sum_row10 = 0;\n    let mut sum_col10 = 0;\n    let mut sum_row11 = 0;\n    let mut sum_col11 = 0;\n    let mut sum_row12 = 0;\n    let mut sum_col12 = 0;\n    let mut sum_row13 = 0;\n    let mut sum_col13 = 0;\n    let mut sum_row14 = 0;\n    let mut sum_col14 = 0;\n    let mut sum_row15 = 0;\n    let mut sum_col15 = 0;\n    let mut sum_row16 = 0;\n    let mut sum_col16 = 0;\n    let mut sum_row17 = 0;\n    let mut sum_col17 = 0;\n    let mut sum_row18 = 0;\n    let mut sum_col18 = 0;\n    let mut sum_row19 = 0;\n    let mut sum_col19 = 0;\n    let mut sum_row20 = 0;\n    let mut sum_col20 = 0;\n    let mut sum_row21 = 0;\n    let mut sum_col21 = 0;\n    let mut sum_row22 = 0;\n    let mut sum_col22 = 0",
    "    let mut sum: isize = 0;\n    let mut sum_diag: isize = 0;\n    let mut sum_diag_2: isize = 0;\n    let mut sum_row: isize = 0;\n    let mut sum_col: isize = 0;\n\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n\n    let mut k: usize = 0;\n    let mut l: usize = 0;\n\n    while i < my_matrix.len() {\n        while j < my_matrix[i].len() {\n            sum_row += my_matrix[i][j];\n            j += 1;\n        }\n        if sum == 0 {\n            sum = sum_row;\n        } else if sum != sum_row {\n            return false;\n        }\n        sum_row = 0;\n        j = 0;\n        i += 1;\n    }\n\n    while k < my_matrix.len() {\n        while l < my_matrix[k].len() {\n            sum_col += my_matrix[l][k];\n            l += 1;\n        }\n        if sum == 0 {\n            sum = sum_col;\n        } else if sum != sum_col {\n            return false;\n        }\n        sum_col = 0;\n        l = 0;\n        k += 1;\n    }\n\n    let mut m: usize = 0;\n    let mut n: usize = 0;\n\n    while m < my_matrix.len() {\n        sum_diag += my_matrix[m][n];\n        m += 1;\n        n += 1;\n    }\n\n    if sum == 0 {\n        sum = sum_diag;\n    } else if sum != sum_diag {\n        return false;\n    }\n\n    let mut o: usize = 0;\n    let mut p: usize = my_matrix.len() - 1;\n\n    while o < my_matrix.len() {\n        sum_diag_2 += my_matrix[o][p];\n        o += 1;\n        p -= 1;\n    }\n\n    if sum ==",
    "    let mut sum = 0;\n    let mut sum_diag_1 = 0;\n    let mut sum_diag_2 = 0;\n    let mut sum_col = 0;\n    let mut sum_row = 0;\n    let mut sum_row_2 = 0;\n    let mut sum_col_2 = 0;\n    let mut sum_diag_1_2 = 0;\n    let mut sum_diag_2_2 = 0;\n    let mut sum_row_3 = 0;\n    let mut sum_col_3 = 0;\n    let mut sum_diag_1_3 = 0;\n    let mut sum_diag_2_3 = 0;\n    let mut sum_row_4 = 0;\n    let mut sum_col_4 = 0;\n    let mut sum_diag_1_4 = 0;\n    let mut sum_diag_2_4 = 0;\n    let mut sum_row_5 = 0;\n    let mut sum_col_5 = 0;\n    let mut sum_diag_1_5 = 0;\n    let mut sum_diag_2_5 = 0;\n    let mut sum_row_6 = 0;\n    let mut sum_col_6 = 0;\n    let mut sum_diag_1_6 = 0;\n    let mut sum_diag_2_6 = 0;\n    let mut sum_row_7 = 0;\n    let mut sum_col_7 = 0;\n    let mut sum_diag_1_7 = 0;\n    let mut sum_diag_2_7 = 0;\n    let mut sum_row_8 = 0;\n    let mut sum_col_8 = 0;\n    let mut sum_diag_1_8 = 0;\n    let mut sum_diag_2_8 = 0;\n    let mut sum_row_9 = 0;\n    let mut sum_col_9 = 0;\n    let mut sum_diag_1_9 = 0;\n    let mut sum_diag_2_9 = 0;\n    let mut sum_row_10 = 0;\n    let mut sum_col_10 = 0;\n   ",
    "    let mut sum = 0;\n    let mut sum_diag = 0;\n    let mut sum_diag_2 = 0;\n    let mut sum_col = 0;\n    let mut sum_row = 0;\n    let mut sum_row_2 = 0;\n    let mut sum_col_2 = 0;\n    let mut sum_row_3 = 0;\n    let mut sum_col_3 = 0;\n    for i in 0..my_matrix.len() {\n        sum_row += my_matrix[i][0];\n        sum_row_2 += my_matrix[i][1];\n        sum_row_3 += my_matrix[i][2];\n        sum_col += my_matrix[0][i];\n        sum_col_2 += my_matrix[1][i];\n        sum_col_3 += my_matrix[2][i];\n    }\n    sum_diag = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2];\n    sum_diag_2 = my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0];\n    sum = sum_row + sum_row_2 + sum_row_3 + sum_col + sum_col_2 + sum_col_3 + sum_diag + sum_diag_2;\n    if sum == 324 {\n        return true;\n    } else {\n        return false;\n    }",
    "    let mut sum_row = 0;\n    let mut sum_col = 0;\n    let mut sum_diag = 0;\n    let mut sum_diag_rev = 0;\n    let mut sum_row_prev = 0;\n    let mut sum_col_prev = 0;\n    let mut sum_diag_prev = 0;\n    let mut sum_diag_rev_prev = 0;\n    let mut sum_row_curr = 0;\n    let mut sum_col_curr = 0;\n    let mut sum_diag_curr = 0;\n    let mut sum_diag_rev_curr = 0;\n    let mut is_magic = true;\n\n    for i in 0..my_matrix.len() {\n        for j in 0..my_matrix[i].len() {\n            sum_row_curr += my_matrix[i][j];\n            sum_col_curr += my_matrix[j][i];\n            if i == j {\n                sum_diag_curr += my_matrix[i][j];\n            }\n            if i + j == my_matrix.len() - 1 {\n                sum_diag_rev_curr += my_matrix[i][j];\n            }\n        }\n        if i > 0 {\n            if sum_row_curr != sum_row_prev {\n                is_magic = false;\n            }\n            if sum_col_curr != sum_col_prev {\n                is_magic = false;\n            }\n            if sum_diag_curr != sum_diag_prev {\n                is_magic = false;\n            }\n            if sum_diag_rev_curr != sum_diag_rev_prev {\n                is_magic = false;\n            }\n        }\n        sum_row_prev = sum_row_curr;\n        sum_col_prev = sum_col_curr;\n        sum_diag_prev = sum_diag_curr;\n        sum_diag_rev_prev = sum_diag_rev_curr;\n        sum_row_curr = 0;\n        sum_",
    "    let mut sum_row = 0;\n    let mut sum_col = 0;\n    let mut sum_diag = 0;\n    let mut sum_rev_diag = 0;\n    let mut sum_all = 0;\n    let mut sum_all_row = 0;\n    let mut sum_all_col = 0;\n    let mut sum_all_diag = 0;\n    let mut sum_all_rev_diag = 0;\n    let mut sum_all_all = 0;\n    let mut sum_all_all_row = 0;\n    let mut sum_all_all_col = 0;\n    let mut sum_all_all_diag = 0;\n    let mut sum_all_all_rev_diag = 0;\n    let mut sum_all_all_all = 0;\n    let mut sum_all_all_all_row = 0;\n    let mut sum_all_all_all_col = 0;\n    let mut sum_all_all_all_diag = 0;\n    let mut sum_all_all_all_rev_diag = 0;\n    let mut sum_all_all_all_all = 0;\n    let mut sum_all_all_all_all_row = 0;\n    let mut sum_all_all_all_all_col = 0;\n    let mut sum_all_all_all_all_diag = 0;\n    let mut sum_all_all_all_all_rev_diag = 0;\n    let mut sum_all_all_all_all_all = 0;\n    let mut sum_all_all_all_all_all_row = 0;\n    let mut sum_all_all_all_all_all_col = 0;\n    let mut sum_all_all_all_all_all_diag = 0;\n    let mut sum_all_all_all_all_all_rev_diag = 0;\n    let mut sum_all_all_all_all_all_all = 0;\n    let mut sum_all_all_all_all_all_all_row = 0;\n    let mut sum_all_all_all_all_all_"
  ]
}