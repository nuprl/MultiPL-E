{
  "name": "mbpp_591_swap_List",
  "language": "rs",
  "prompt": "/// Write a rsthon function to interchange the first and last elements in a vector.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList",
    "    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList",
    "    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList",
    "    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList",
    "    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList",
    "    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList",
    "    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList",
    "    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList",
    "    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList",
    "    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList",
    "    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList",
    "    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList",
    "    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList",
    "    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList",
    "    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList",
    "    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList",
    "    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList",
    "    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList",
    "    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList",
    "    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList"
  ]
}