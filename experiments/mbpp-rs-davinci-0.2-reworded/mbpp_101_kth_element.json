{
  "name": "mbpp_101_kth_element",
  "language": "rs",
  "prompt": "/// Write a function to find the kth element in the given vector using 1-based indexing.\nfn kth_element(arr: Vec<isize>, k: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = kth_element;\n    assert_eq!(candidate(vec![12, 3, 5, 7, 19], 2), 3);\n    assert_eq!(candidate(vec![17, 24, 8, 23], 3), 8);\n    assert_eq!(candidate(vec![16, 21, 25, 36, 4], 4), 36);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    panic!(\"k is out of range\");",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n            k -= pivot;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let k = k as usize;\n\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot > k {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n\n    panic!(\"k is out of bounds\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot_index = partition(&mut arr, left, right);\n        if pivot_index == k - 1 {\n            return arr[pivot_index];\n        } else if pivot_index < k - 1 {\n            left = pivot_index + 1;\n        } else {\n            right = pivot_index - 1;\n        }\n    }\n    return -1;",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n            k -= pivot + 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n    return -1;",
    "    let mut arr = arr;\n    let mut lo = 0;\n    let mut hi = arr.len() - 1;\n    let mut k = k as usize;\n    while lo < hi {\n        let pivot = partition(&mut arr, lo, hi);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            lo = pivot + 1;\n        } else {\n            hi = pivot - 1;\n        }\n    }\n    arr[lo]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() as isize - 1;\n    while left <= right {\n        let pivot_index = partition(&mut arr, left, right);\n        if pivot_index == k - 1 {\n            return arr[pivot_index as usize];\n        } else if pivot_index > k - 1 {\n            right = pivot_index - 1;\n        } else {\n            left = pivot_index + 1;\n        }\n    }\n    return -1;",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n    return -1;",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot_index = partition(&mut arr, left, right);\n        if pivot_index == k - 1 {\n            return arr[pivot_index];\n        } else if pivot_index > k - 1 {\n            right = pivot_index - 1;\n        } else {\n            left = pivot_index + 1;\n            k -= pivot_index + 1;\n        }\n    }\n    panic!(\"kth element not found\");",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n            k -= 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    return -1;",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    return -1;",
    "    let mut arr = arr;\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut k = k - 1;\n\n    while low < high {\n        let pivot = partition(&mut arr, low, high);\n        if pivot == k {\n            break;\n        } else if pivot > k {\n            high = pivot - 1;\n        } else {\n            low = pivot + 1;\n        }\n    }\n\n    arr[k]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n            k -= pivot + 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n            k -= 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let n = arr.len();\n    let mut left = 0;\n    let mut right = n - 1;\n    let mut k = k as usize;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot > k {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n    return -1;",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot < k {\n            left = pivot + 1;\n        } else if pivot > k {\n            right = pivot - 1;\n        } else {\n            break;\n        }\n    }\n    arr[k as usize]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    0",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let k = k as usize;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    return -1;",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut k = k as usize;\n    while low <= high {\n        let pivot = partition(&mut arr, low, high);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            low = pivot + 1;\n        } else {\n            high = pivot - 1;\n        }\n    }\n    return -1;",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n    return 0;",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    return -1;",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            break;\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n            k -= pivot;\n        }\n    }\n\n    arr[k]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n    return -1;",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n            k -= 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k - 1;\n    let mut lo = 0;\n    let mut hi = arr.len() - 1;\n    while lo < hi {\n        let pivot = partition(&mut arr, lo, hi);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            lo = pivot + 1;\n        } else {\n            hi = pivot - 1;\n        }\n    }\n    arr[lo]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n\n    while left <= right {\n        let pivot_index = partition(&mut arr, left, right);\n        if pivot_index == k - 1 {\n            return arr[pivot_index];\n        } else if pivot_index > k - 1 {\n            right = pivot_index - 1;\n        } else {\n            left = pivot_index + 1;\n            k -= pivot_index + 1;\n        }\n    }\n\n    panic!(\"k is out of range\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut l = 0;\n    let mut r = arr.len() - 1;\n    while l < r {\n        let pivot = partition(&mut arr, l, r);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            l = pivot + 1;\n        } else {\n            r = pivot - 1;\n        }\n    }\n    arr[l]",
    "    let mut arr = arr;\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut k = k as usize;\n\n    while low <= high {\n        let pivot = partition(&mut arr, low, high);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            low = pivot + 1;\n        } else {\n            high = pivot - 1;\n        }\n    }\n\n    return -1;",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    panic!(\"k is out of range\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n            k -= pivot + 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n    -1",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n\n    arr[left]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let k = k as usize;\n\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n\n    panic!(\"k is out of bounds\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    -1",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n            k = k - pivot - 1;\n        }\n    }\n\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n            k = k - pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    panic!(\"k is out of range\");",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left <= right {\n        let pivot_index = partition(&mut arr, left, right);\n        if pivot_index == k - 1 {\n            return arr[pivot_index];\n        } else if pivot_index < k - 1 {\n            left = pivot_index + 1;\n        } else {\n            right = pivot_index - 1;\n        }\n    }\n    return 0;",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = left;\n        let mut i = left + 1;\n        let mut j = right;\n        while i <= j {\n            while i <= j && arr[i] <= arr[pivot] {\n                i += 1;\n            }\n            while i <= j && arr[j] >= arr[pivot] {\n                j -= 1;\n            }\n            if i < j {\n                arr.swap(i, j);\n            }\n        }\n        arr.swap(pivot, j);\n        if j == k - 1 {\n            return arr[j];\n        } else if j > k - 1 {\n            right = j - 1;\n        } else {\n            left = j + 1;\n            k -= j + 1;\n        }\n    }\n    return 0;",
    "    let mut arr = arr;\n    let mut lo = 0;\n    let mut hi = arr.len() - 1;\n    let mut k = k as usize;\n\n    while lo < hi {\n        let pivot = partition(&mut arr, lo, hi);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            lo = pivot + 1;\n        } else {\n            hi = pivot - 1;\n        }\n    }\n    arr[lo]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n    return -1;",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n            k = k - pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut pivot = partition(&mut arr, left, right);\n    while pivot != k - 1 {\n        if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n        pivot = partition(&mut arr, left, right);\n    }\n    arr[pivot]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    loop {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n    panic!(\"k is out of range\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n    panic!(\"k is out of range\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    return -1;",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n            k -= pivot + 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n    panic!(\"k is out of range\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n            k -= pivot + 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut lo = 0;\n    let mut hi = arr.len() - 1;\n    while lo < hi {\n        let pivot = partition(&mut arr, lo, hi);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            lo = pivot + 1;\n        } else {\n            hi = pivot - 1;\n        }\n    }\n    arr[lo]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            break;\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[k as usize - 1]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    return 0;",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    return -1;",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let k = k as usize;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    panic!(\"k is out of bounds\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr.clone();\n    kth_element_helper(&mut arr, 0, arr.len() - 1, k)",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    return 0;",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            break;\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n            k -= pivot;\n        }\n    }\n\n    arr[k]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n\n    while left <= right {\n        let pivot_index = partition(&mut arr, left, right);\n        if pivot_index == k - 1 {\n            return arr[pivot_index];\n        } else if pivot_index > k - 1 {\n            right = pivot_index - 1;\n        } else {\n            left = pivot_index + 1;\n        }\n    }\n\n    -1",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    panic!(\"k is out of bounds\");",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    panic!(\"k is out of bounds\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut start = 0;\n    let mut end = arr.len() - 1;\n    while start < end {\n        let pivot = partition(&mut arr, start, end);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            end = pivot - 1;\n        } else {\n            start = pivot + 1;\n        }\n    }\n    arr[start]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left <= right {\n        let pivot_index = partition(&mut arr, left, right);\n        if pivot_index == k - 1 {\n            return arr[pivot_index];\n        } else if pivot_index > k - 1 {\n            right = pivot_index - 1;\n        } else {\n            left = pivot_index + 1;\n        }\n    }\n    return 0;",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot_index = partition(&mut arr, left, right);\n        if pivot_index == k - 1 {\n            return arr[pivot_index];\n        } else if pivot_index > k - 1 {\n            right = pivot_index - 1;\n        } else {\n            left = pivot_index + 1;\n        }\n    }\n    return 0;",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n    return -1;",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n\n    while left <= right {\n        let pivot_index = partition(&mut arr, left, right);\n        if pivot_index as isize == k - 1 {\n            return arr[pivot_index];\n        } else if pivot_index as isize > k - 1 {\n            right = pivot_index - 1;\n        } else {\n            left = pivot_index + 1;\n        }\n    }\n    return -1;",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n            k -= pivot;\n        }\n    }\n\n    arr[left]",
    "    let mut arr = arr;\n    let mut lo = 0;\n    let mut hi = arr.len() - 1;\n    while lo < hi {\n        let pivot = partition(&mut arr, lo, hi);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            lo = pivot + 1;\n        } else {\n            hi = pivot - 1;\n        }\n    }\n    arr[lo]",
    "    let mut arr = arr;\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut k = k as usize;\n    while low < high {\n        let pivot = partition(&mut arr, low, high);\n        if pivot == k {\n            return arr[k];\n        } else if pivot < k {\n            low = pivot + 1;\n        } else {\n            high = pivot - 1;\n        }\n    }\n    arr[low]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n\n    while left <= right {\n        let pivot_index = partition(&mut arr, left, right);\n        if pivot_index == k - 1 {\n            return arr[pivot_index];\n        } else if pivot_index > k - 1 {\n            right = pivot_index - 1;\n        } else {\n            left = pivot_index + 1;\n        }\n    }\n\n    return -1;",
    "    let mut arr = arr;\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut k = k as usize;\n    while low <= high {\n        let pivot = partition(&mut arr, low, high);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            high = pivot - 1;\n        } else {\n            low = pivot + 1;\n        }\n    }\n    panic!(\"k is out of bounds\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n    return -1;",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if k == pivot {\n            return arr[pivot];\n        } else if k < pivot {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n            k -= pivot + 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut lo = 0;\n    let mut hi = arr.len() - 1;\n    let mut k = k as usize;\n    while lo < hi {\n        let pivot = partition(&mut arr, lo, hi);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            lo = pivot + 1;\n        } else {\n            hi = pivot - 1;\n        }\n    }\n    arr[lo]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot_index = partition(&mut arr, left, right);\n        if pivot_index == k - 1 {\n            return arr[pivot_index];\n        } else if pivot_index > k - 1 {\n            right = pivot_index - 1;\n        } else {\n            left = pivot_index + 1;\n            k -= pivot_index + 1;\n        }\n    }\n    panic!(\"k is out of bounds\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n            k -= pivot;\n        }\n    }\n\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        }\n        if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    panic!(\"k is out of range\");",
    "    let mut arr = arr;\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut k = k as usize;\n\n    while low <= high {\n        let pivot_index = partition(&mut arr, low, high);\n        if pivot_index == k - 1 {\n            return arr[pivot_index];\n        } else if pivot_index < k - 1 {\n            low = pivot_index + 1;\n        } else {\n            high = pivot_index - 1;\n        }\n    }\n\n    -1",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot_index = partition(&mut arr, left, right);\n        if pivot_index == k - 1 {\n            return arr[pivot_index];\n        } else if pivot_index > k - 1 {\n            right = pivot_index - 1;\n        } else {\n            left = pivot_index + 1;\n            k -= pivot_index + 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[k];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[k]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    panic!(\"k is out of bounds\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot_index = partition(&mut arr, left, right);\n        if pivot_index == k - 1 {\n            return arr[pivot_index];\n        } else if pivot_index > k - 1 {\n            right = pivot_index - 1;\n        } else {\n            left = pivot_index + 1;\n            k -= pivot_index + 1;\n        }\n    }\n    panic!(\"k is out of range\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut pivot = partition(&mut arr, left, right);\n    while pivot != k - 1 {\n        if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n        pivot = partition(&mut arr, left, right);\n    }\n    arr[pivot]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            break;\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n            k -= pivot;\n        }\n    }\n    arr[k]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n\n    panic!(\"k is out of range\");",
    "    let mut arr = arr;\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let k = k as usize;\n    while low < high {\n        let pivot = partition(&mut arr, low, high);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            low = pivot + 1;\n        } else {\n            high = pivot - 1;\n        }\n    }\n    arr[low]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n    0",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left <= right {\n        let pivot_index = partition(&mut arr, left, right);\n        if pivot_index == k - 1 {\n            return arr[pivot_index];\n        } else if pivot_index > k - 1 {\n            right = pivot_index - 1;\n        } else {\n            left = pivot_index + 1;\n        }\n    }\n    return 0;",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n\n    panic!(\"k is out of range\");",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let k = k as usize;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    panic!(\"kth element not found\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    panic!(\"k is out of range\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n    panic!(\"k is out of bounds\");",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            break;\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[k]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n    -1",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot_index = partition(&mut arr, left, right);\n        if pivot_index == k - 1 {\n            return arr[pivot_index];\n        } else if pivot_index < k - 1 {\n            left = pivot_index + 1;\n        } else {\n            right = pivot_index - 1;\n        }\n    }\n    panic!(\"k is out of bounds\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n\n        if pivot == k {\n            break;\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n\n    arr[k]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n            k -= pivot + 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n            k -= pivot + 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n            k -= pivot + 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot_index = partition(&mut arr, left, right);\n        if pivot_index == k - 1 {\n            return arr[pivot_index];\n        } else if pivot_index > k - 1 {\n            right = pivot_index - 1;\n        } else {\n            left = pivot_index + 1;\n            k -= pivot_index + 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot_index = partition(&mut arr, left, right);\n        if pivot_index == k - 1 {\n            return arr[pivot_index];\n        } else if pivot_index > k - 1 {\n            right = pivot_index - 1;\n        } else {\n            left = pivot_index + 1;\n            k -= pivot_index + 1;\n        }\n    }\n    panic!(\"k is out of bounds\");",
    "    let mut arr = arr;\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut k = k as usize;\n\n    while low <= high {\n        let pivot_index = partition(&mut arr, low, high);\n        if pivot_index == k - 1 {\n            return arr[pivot_index];\n        } else if pivot_index > k - 1 {\n            high = pivot_index - 1;\n        } else {\n            low = pivot_index + 1;\n        }\n    }\n\n    return -1;",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() as isize - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot as usize];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    panic!(\"k is out of bounds\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    panic!(\"k is out of range\");",
    "    let mut arr = arr;\n    let mut k = k;\n    kth_element_helper(&mut arr, 0, arr.len() - 1, &mut k)",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n\n    arr[left]",
    "    let mut arr = arr;\n    let mut lo = 0;\n    let mut hi = arr.len() - 1;\n    let mut k = k as usize;\n    while lo < hi {\n        let pivot = partition(&mut arr, lo, hi);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            lo = pivot + 1;\n        } else {\n            hi = pivot - 1;\n        }\n    }\n    arr[lo]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n    panic!(\"k is out of bounds\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot_index = partition(&mut arr, left, right);\n        if pivot_index == k as usize - 1 {\n            return arr[pivot_index];\n        } else if pivot_index > k as usize - 1 {\n            right = pivot_index - 1;\n        } else {\n            left = pivot_index + 1;\n        }\n    }\n    return -1;",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    0",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut start = 0;\n    let mut end = arr.len() - 1;\n    while start <= end {\n        let pivot = partition(&mut arr, start, end);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            end = pivot - 1;\n        } else {\n            start = pivot + 1;\n        }\n    }\n    panic!(\"k is out of bounds\");",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n\n    return -1;",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut lo = 0;\n    let mut hi = arr.len() - 1;\n    let mut k = k as usize;\n    while lo < hi {\n        let pivot = partition(&mut arr, lo, hi);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            lo = pivot + 1;\n        } else {\n            hi = pivot - 1;\n        }\n    }\n    arr[lo]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    -1",
    "    // TODO\n    0",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut start = 0;\n    let mut end = arr.len() - 1;\n    let mut index = partition(&mut arr, start, end);\n    while index != k - 1 {\n        if index > k - 1 {\n            end = index - 1;\n        } else {\n            start = index + 1;\n        }\n        index = partition(&mut arr, start, end);\n    }\n    arr[index]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n            k -= pivot;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n    return -1;",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n            k -= pivot;\n        }\n    }\n    panic!(\"k is out of range\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot_index = partition(&mut arr, left, right);\n        if pivot_index == (k - 1) as usize {\n            return arr[pivot_index];\n        } else if pivot_index > (k - 1) as usize {\n            right = pivot_index - 1;\n        } else {\n            left = pivot_index + 1;\n            k -= pivot_index as isize + 1;\n        }\n    }\n    return -1;",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left < right {\n        let pivot = left;\n        let mut i = left + 1;\n        let mut j = right;\n        while i <= j {\n            while i <= j && arr[i] <= arr[pivot] {\n                i += 1;\n            }\n            while i <= j && arr[j] >= arr[pivot] {\n                j -= 1;\n            }\n            if i <= j {\n                arr.swap(i, j);\n            }\n        }\n        arr.swap(pivot, j);\n        if j == k - 1 {\n            return arr[j];\n        } else if j > k - 1 {\n            right = j - 1;\n        } else {\n            left = j + 1;\n            k -= j + 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    panic!(\"k is out of range\");",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut l = 0;\n    let mut r = arr.len() - 1;\n\n    while l < r {\n        let pivot = partition(&mut arr, l, r);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            r = pivot - 1;\n        } else {\n            l = pivot + 1;\n        }\n    }\n\n    arr[l]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n            k -= pivot + 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n\n    panic!(\"k is out of range\");",
    "    let mut arr = arr;\n    let mut lo = 0;\n    let mut hi = arr.len() - 1;\n    while lo < hi {\n        let p = partition(&mut arr, lo, hi);\n        if p == k - 1 {\n            return arr[p];\n        } else if p > k - 1 {\n            hi = p - 1;\n        } else {\n            lo = p + 1;\n        }\n    }\n    arr[lo]",
    "    let mut arr = arr;\n    let mut start = 0;\n    let mut end = arr.len() - 1;\n\n    let k = k as usize;\n\n    while start < end {\n        let pivot = partition(&mut arr, start, end);\n\n        if pivot == k {\n            break;\n        } else if pivot < k {\n            start = pivot + 1;\n        } else {\n            end = pivot - 1;\n        }\n    }\n\n    arr[k]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot > k {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n            k -= pivot + 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut k = k as usize;\n\n    while low < high {\n        let pivot = partition(&mut arr, low, high);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            low = pivot + 1;\n        } else {\n            high = pivot - 1;\n        }\n    }\n    arr[low]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut l = 0;\n    let mut r = arr.len() - 1;\n    while l < r {\n        let pivot = partition(&mut arr, l, r);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            r = pivot - 1;\n        } else {\n            l = pivot + 1;\n        }\n    }\n    arr[l]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n            k -= pivot + 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n\n    panic!(\"k is out of bounds\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot_index = partition(&mut arr, left, right);\n        if pivot_index == k - 1 {\n            return arr[pivot_index];\n        } else if pivot_index > k - 1 {\n            right = pivot_index - 1;\n        } else {\n            left = pivot_index + 1;\n            k -= pivot_index + 1;\n        }\n    }\n    panic!(\"k is out of range\");",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n\n    return -1;",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot_index = partition(&mut arr, left, right);\n        if pivot_index == k - 1 {\n            return arr[pivot_index];\n        } else if pivot_index > k - 1 {\n            right = pivot_index - 1;\n        } else {\n            left = pivot_index + 1;\n            k -= pivot_index + 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut l = 0;\n    let mut r = arr.len() - 1;\n    while l <= r {\n        let pivot = partition(&mut arr, l, r);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            l = pivot + 1;\n        } else {\n            r = pivot - 1;\n        }\n    }\n    panic!(\"k is out of bounds\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    panic!(\"k is out of range\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n            k -= pivot + 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let k = k as usize;\n\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    loop {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    -1",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot > k {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n\n    arr[left]",
    "    if k < 1 || k > arr.len() as isize {\n        panic!(\"k is out of bounds\");\n    }\n    let mut arr = arr;\n    let mut lo = 0;\n    let mut hi = arr.len() - 1;\n    while lo <= hi {\n        let p = partition(&mut arr, lo, hi);\n        if p as isize == k - 1 {\n            return arr[p];\n        } else if p as isize > k - 1 {\n            hi = p - 1;\n        } else {\n            lo = p + 1;\n        }\n    }\n    panic!(\"k is out of bounds\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    return -1;",
    "    let mut arr = arr;\n    let mut lo = 0;\n    let mut hi = arr.len() - 1;\n    let mut k = k as usize;\n\n    while lo < hi {\n        let pivot = partition(&mut arr, lo, hi);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            lo = pivot + 1;\n        } else {\n            hi = pivot - 1;\n        }\n    }\n\n    arr[lo]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k as usize {\n            return arr[pivot];\n        } else if pivot < k as usize {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n\n    return 0;",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k as usize;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut l = 0;\n    let mut r = arr.len() - 1;\n    while l < r {\n        let pivot = partition(&mut arr, l, r);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            l = pivot + 1;\n        } else {\n            r = pivot - 1;\n        }\n    }\n    arr[l]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n            k -= pivot + 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let k = k as usize;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    panic!(\"k is out of range\");",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let k = k as usize;\n\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n\n    panic!(\"k is out of range\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    0",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut k = k - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n            return arr[pivot];\n        } else if pivot < k {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    return -1;",
    "    let mut arr = arr;\n    kth_element_helper(&mut arr, 0, arr.len() - 1, k)",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n        }\n    }\n    -1",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot < k - 1 {\n            left = pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let k = k as usize;\n    while left <= right {\n        let pivot_index = partition(&mut arr, left, right);\n        if pivot_index == k - 1 {\n            return arr[pivot_index];\n        } else if pivot_index < k - 1 {\n            left = pivot_index + 1;\n        } else {\n            right = pivot_index - 1;\n        }\n    }\n    panic!(\"k is out of range\");",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        } else if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n            k -= pivot + 1;\n        }\n    }\n    arr[left]",
    "    let mut arr = arr;\n    let mut k = k;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left, right);\n        if pivot == k - 1 {\n            return arr[pivot];\n        }\n        if pivot > k - 1 {\n            right = pivot - 1;\n        } else {\n            left = pivot + 1;\n            k -= pivot + 1;\n        }\n    }\n    arr[left]"
  ]
}