{
  "name": "mbpp_776_count_vowels",
  "language": "rs",
  "prompt": "/// Write a function to count those characters which have vowels as their neighbors in the given string.\nfn count_vowels(test_str: String) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = count_vowels;\n    assert_eq!(candidate(String::from(\"bestinstareels\")), 7);\n    assert_eq!(candidate(String::from(\"partofthejourneyistheend\")), 12);\n    assert_eq!(candidate(String::from(\"amazonprime\")), 5);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut count: isize = 0;\n    let mut prev_char: char = ' ';\n    let mut next_char: char = ' ';\n    let mut index: usize = 0;\n    let mut test_str_chars: Vec<char> = test_str.chars().collect();\n    let mut test_str_chars_len: usize = test_str_chars.len();\n    while index < test_str_chars_len {\n        if index == 0 {\n            prev_char = ' ';\n        } else {\n            prev_char = test_str_chars[index - 1];\n        }\n        if index == test_str_chars_len - 1 {\n            next_char = ' ';\n        } else {\n            next_char = test_str_chars[index + 1];\n        }\n        if is_vowel(prev_char) || is_vowel(next_char) {\n            count += 1;\n        }\n        index += 1;\n    }\n    count",
    "    let mut count = 0;\n    let mut iter = test_str.chars();\n    let mut prev = iter.next();\n    let mut curr = iter.next();\n\n    while let Some(c) = curr {\n        if is_vowel(c) && is_vowel(prev.unwrap()) {\n            count += 1;\n        }\n        prev = curr;\n        curr = iter.next();\n    }\n\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr != None {\n        if is_vowel(curr.unwrap()) && (prev != None && is_vowel(prev.unwrap()) || next != None && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if prev.unwrap().is_vowel() || c.is_vowel() {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut count = 0;\n    for (i, c) in test_str.chars().enumerate() {\n        if i == 0 {\n            if vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n                count += 1;\n            }\n        } else if i == test_str.len() - 1 {\n            if vowels.contains(&test_str.chars().nth(i - 1).unwrap()) {\n                count += 1;\n            }\n        } else {\n            if vowels.contains(&test_str.chars().nth(i - 1).unwrap()) ||\n               vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut iter = test_str.chars();\n    let mut prev_char = iter.next();\n    let mut curr_char = iter.next();\n    let mut next_char = iter.next();\n    while next_char != None {\n        if is_vowel(curr_char) && (is_vowel(prev_char) || is_vowel(next_char)) {\n            count += 1;\n        }\n        prev_char = curr_char;\n        curr_char = next_char;\n        next_char = iter.next();\n    }\n    return count;",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if is_vowel(prev) || is_vowel(&c) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while next != None {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let test_str = test_str.to_lowercase();\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if is_vowel(prev.unwrap()) && is_vowel(c) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr != None {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if is_vowel(curr.unwrap()) && (prev.is_some() && is_vowel(prev.unwrap()) || next.is_some() && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut iter = test_str.chars();\n    let mut prev = iter.next();\n    let mut curr = iter.next();\n    let mut next = iter.next();\n    while curr != None {\n        if is_vowel(curr.unwrap()) && (prev != None && is_vowel(prev.unwrap()) || next != None && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = iter.next();\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    while let Some(c) = chars.next() {\n        if vowels.contains(&c) {\n            count += 1;\n        }\n    }\n    count",
    "    let test_str = test_str.to_lowercase();\n    let mut count = 0;\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    for i in 0..test_str.len() {\n        if vowels.contains(&test_str.chars().nth(i).unwrap()) {\n            if i > 0 {\n                if vowels.contains(&test_str.chars().nth(i - 1).unwrap()) {\n                    count += 1;\n                }\n            }\n            if i < test_str.len() - 1 {\n                if vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n                    count += 1;\n                }\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n\n    while next.is_some() {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr != None {\n        if is_vowel(curr.unwrap()) && (prev != None && is_vowel(prev.unwrap()) || next != None && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev_char = chars.next();\n    let mut curr_char = chars.next();\n    let mut next_char = chars.next();\n    while curr_char != None {\n        if is_vowel(curr_char.unwrap()) && (is_vowel(prev_char.unwrap()) || is_vowel(next_char.unwrap())) {\n            count += 1;\n        }\n        prev_char = curr_char;\n        curr_char = next_char;\n        next_char = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if is_vowel(prev) || is_vowel(&c) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count"
  ]
}