{
  "name": "mbpp_776_count_vowels",
  "language": "rs",
  "prompt": "/// Write a function to count those characters which have vowels as their neighbors in the given string.\nfn count_vowels(test_str: String) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = count_vowels;\n    assert_eq!(candidate(String::from(\"bestinstareels\")), 7);\n    assert_eq!(candidate(String::from(\"partofthejourneyistheend\")), 12);\n    assert_eq!(candidate(String::from(\"amazonprime\")), 5);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut count: isize = 0;\n    let mut prev_char: char = ' ';\n    let mut next_char: char = ' ';\n    let mut index: usize = 0;\n    let mut test_str_chars: Vec<char> = test_str.chars().collect();\n    let mut test_str_chars_len: usize = test_str_chars.len();\n    while index < test_str_chars_len {\n        if index == 0 {\n            prev_char = ' ';\n        } else {\n            prev_char = test_str_chars[index - 1];\n        }\n        if index == test_str_chars_len - 1 {\n            next_char = ' ';\n        } else {\n            next_char = test_str_chars[index + 1];\n        }\n        if is_vowel(prev_char) || is_vowel(next_char) {\n            count += 1;\n        }\n        index += 1;\n    }\n    count",
    "    let mut count = 0;\n    let mut iter = test_str.chars();\n    let mut prev = iter.next();\n    let mut curr = iter.next();\n\n    while let Some(c) = curr {\n        if is_vowel(c) && is_vowel(prev.unwrap()) {\n            count += 1;\n        }\n        prev = curr;\n        curr = iter.next();\n    }\n\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr != None {\n        if is_vowel(curr.unwrap()) && (prev != None && is_vowel(prev.unwrap()) || next != None && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if prev.unwrap().is_vowel() || c.is_vowel() {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut count = 0;\n    for (i, c) in test_str.chars().enumerate() {\n        if i == 0 {\n            if vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n                count += 1;\n            }\n        } else if i == test_str.len() - 1 {\n            if vowels.contains(&test_str.chars().nth(i - 1).unwrap()) {\n                count += 1;\n            }\n        } else {\n            if vowels.contains(&test_str.chars().nth(i - 1).unwrap()) ||\n               vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut iter = test_str.chars();\n    let mut prev_char = iter.next();\n    let mut curr_char = iter.next();\n    let mut next_char = iter.next();\n    while next_char != None {\n        if is_vowel(curr_char) && (is_vowel(prev_char) || is_vowel(next_char)) {\n            count += 1;\n        }\n        prev_char = curr_char;\n        curr_char = next_char;\n        next_char = iter.next();\n    }\n    return count;",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if is_vowel(prev) || is_vowel(&c) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while next != None {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let test_str = test_str.to_lowercase();\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if is_vowel(prev.unwrap()) && is_vowel(c) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr != None {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if is_vowel(curr.unwrap()) && (prev.is_some() && is_vowel(prev.unwrap()) || next.is_some() && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut iter = test_str.chars();\n    let mut prev = iter.next();\n    let mut curr = iter.next();\n    let mut next = iter.next();\n    while curr != None {\n        if is_vowel(curr.unwrap()) && (prev != None && is_vowel(prev.unwrap()) || next != None && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = iter.next();\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    while let Some(c) = chars.next() {\n        if vowels.contains(&c) {\n            count += 1;\n        }\n    }\n    count",
    "    let test_str = test_str.to_lowercase();\n    let mut count = 0;\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    for i in 0..test_str.len() {\n        if vowels.contains(&test_str.chars().nth(i).unwrap()) {\n            if i > 0 {\n                if vowels.contains(&test_str.chars().nth(i - 1).unwrap()) {\n                    count += 1;\n                }\n            }\n            if i < test_str.len() - 1 {\n                if vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n                    count += 1;\n                }\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n\n    while next.is_some() {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr != None {\n        if is_vowel(curr.unwrap()) && (prev != None && is_vowel(prev.unwrap()) || next != None && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev_char = chars.next();\n    let mut curr_char = chars.next();\n    let mut next_char = chars.next();\n    while curr_char != None {\n        if is_vowel(curr_char.unwrap()) && (is_vowel(prev_char.unwrap()) || is_vowel(next_char.unwrap())) {\n            count += 1;\n        }\n        prev_char = curr_char;\n        curr_char = next_char;\n        next_char = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if is_vowel(prev) || is_vowel(&c) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut last_char = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&last_char.unwrap()) {\n            count += 1;\n        }\n        last_char = Some(c);\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 1;\n    let mut k: usize = 2;\n    let mut l: usize = 3;\n    let mut m: usize = 4;\n    let mut n: usize = 5;\n    let mut o: usize = 6;\n    let mut p: usize = 7;\n    let mut q: usize = 8;\n    let mut r: usize = 9;\n    let mut s: usize = 10;\n    let mut t: usize = 11;\n    let mut u: usize = 12;\n    let mut v: usize = 13;\n    let mut w: usize = 14;\n    let mut x: usize = 15;\n    let mut y: usize = 16;\n    let mut z: usize = 17;\n    let mut a: usize = 18;\n    let mut e: usize = 19;\n    let mut i: usize = 20;\n    let mut o: usize = 21;\n    let mut u: usize = 22;\n    let mut test_str_vec: Vec<char> = test_str.chars().collect();\n    let test_str_len: usize = test_str_vec.len();\n    while i < test_str_len {\n        if test_str_vec[i] == 'a' {\n            if test_str_vec[j] == 'a' || test_str_vec[j] == 'e' || test_str_vec[j] == 'i' || test_str_vec[j] == 'o' || test_str_vec[j] == 'u' {\n                count += 1;\n            }\n            if test_str_vec[k] == 'a' || test_str_vec[k] == 'e' || test_str_vec[k] == 'i' || test_str_vec[k] == 'o' || test_str_vec[k] == 'u' {\n                count += 1;\n            }\n            if test_str_vec[l] == 'a' || test_str_vec[l",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if is_vowel(c) && is_vowel(prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while next != None {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr != None {\n        if is_vowel(curr) && (is_vowel(prev) || is_vowel(next)) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut iter = test_str.chars();\n    let mut prev = iter.next();\n    for c in iter {\n        if is_vowel(prev.unwrap()) || is_vowel(c) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    while let Some(c) = curr {\n        if is_vowel(c) && is_vowel(prev.unwrap()) {\n            count += 1;\n        }\n        prev = curr;\n        curr = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let chars: Vec<char> = test_str.chars().collect();\n    for i in 0..chars.len() {\n        if i == 0 {\n            if vowels.contains(&chars[i]) && vowels.contains(&chars[i + 1]) {\n                count += 1;\n            }\n        } else if i == chars.len() - 1 {\n            if vowels.contains(&chars[i]) && vowels.contains(&chars[i - 1]) {\n                count += 1;\n            }\n        } else {\n            if vowels.contains(&chars[i]) && vowels.contains(&chars[i + 1]) && vowels.contains(&chars[i - 1]) {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr != None {\n        if is_vowel(curr) && (is_vowel(prev) || is_vowel(next)) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev_char = chars.next();\n    for c in chars {\n        if is_vowel(prev_char) && is_vowel(Some(c)) {\n            count += 1;\n        }\n        prev_char = Some(c);\n    }\n    count",
    "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut count = 0;\n    for (i, c) in test_str.chars().enumerate() {\n        if i == 0 {\n            if vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n                count += 1;\n            }\n        } else if i == test_str.len() - 1 {\n            if vowels.contains(&test_str.chars().nth(i - 1).unwrap()) {\n                count += 1;\n            }\n        } else {\n            if vowels.contains(&test_str.chars().nth(i + 1).unwrap())\n                || vowels.contains(&test_str.chars().nth(i - 1).unwrap())\n            {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 1;\n    let mut k: usize = 2;\n    let mut l: usize = 3;\n    let mut m: usize = 4;\n    let mut n: usize = 5;\n    let mut o: usize = 6;\n    let mut p: usize = 7;\n    let mut q: usize = 8;\n    let mut r: usize = 9;\n    let mut s: usize = 10;\n    let mut t: usize = 11;\n    let mut u: usize = 12;\n    let mut v: usize = 13;\n    let mut w: usize = 14;\n    let mut x: usize = 15;\n    let mut y: usize = 16;\n    let mut z: usize = 17;\n    let mut a: usize = 18;\n    let mut e: usize = 19;\n    let mut i: usize = 20;\n    let mut o: usize = 21;\n    let mut u: usize = 22;\n    let mut vowels: Vec<usize> = vec![a, e, i, o, u];\n    let mut alphabet: Vec<usize> = vec![a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z];\n    let mut test_str: Vec<char> = test_str.chars().collect();\n    for _ in 0..test_str.len() {\n        if test_str[i] == 'a' {\n            if test_str[j] == 'a' || test_str[j] == 'e' || test_str[j] == 'i' || test_str[j] == 'o' || test_str[j] == 'u' {\n                count += 1;\n            }\n            if test_str[k] == 'a' || test_str[k] == 'e' || test_str[k] == 'i' || test_",
    "    let mut count = 0;\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut iter = test_str.chars();\n    let mut prev = iter.next();\n    let mut curr = iter.next();\n    let mut next = iter.next();\n    while let Some(c) = curr {\n        if is_vowel(c) && (prev.is_some() && is_vowel(prev.unwrap()) || next.is_some() && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = iter.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while let (Some(p), Some(c), Some(n)) = (prev, curr, next) {\n        if is_vowel(p) || is_vowel(n) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut prev_char: char = ' ';\n    let mut next_char: char = ' ';\n    for (i, c) in test_str.chars().enumerate() {\n        if i == 0 {\n            next_char = test_str.chars().nth(i + 1).unwrap();\n        } else if i == test_str.len() - 1 {\n            prev_char = test_str.chars().nth(i - 1).unwrap();\n        } else {\n            prev_char = test_str.chars().nth(i - 1).unwrap();\n            next_char = test_str.chars().nth(i + 1).unwrap();\n        }\n        if is_vowel(c) && (is_vowel(prev_char) || is_vowel(next_char)) {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr != None {\n        if is_vowel(curr.unwrap()) && (prev != None && is_vowel(prev.unwrap()) || next != None && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if is_vowel(prev.unwrap()) || is_vowel(c) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (i, c) in test_str.chars().enumerate() {\n        if i == 0 {\n            if vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n                count += 1;\n            }\n        } else if i == test_str.len() - 1 {\n            if vowels.contains(&test_str.chars().nth(i - 1).unwrap()) {\n                count += 1;\n            }\n        } else {\n            if vowels.contains(&test_str.chars().nth(i - 1).unwrap())\n                || vowels.contains(&test_str.chars().nth(i + 1).unwrap())\n            {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev_char = chars.next();\n    let mut curr_char = chars.next();\n    let mut next_char = chars.next();\n    while curr_char != None {\n        if is_vowel(curr_char.unwrap()) && (prev_char.is_some() && is_vowel(prev_char.unwrap()) || next_char.is_some() && is_vowel(next_char.unwrap())) {\n            count += 1;\n        }\n        prev_char = curr_char;\n        curr_char = next_char;\n        next_char = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if is_vowel(curr.unwrap()) && (prev.is_some() && is_vowel(prev.unwrap()) || next.is_some() && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n\n    while curr.is_some() {\n        if is_vowel(curr.unwrap()) && (prev.is_some() && is_vowel(prev.unwrap()) || next.is_some() && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if is_vowel(prev.unwrap()) || is_vowel(c) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while next != None {\n        if is_vowel(prev.unwrap()) || is_vowel(next.unwrap()) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (i, c) in test_str.chars().enumerate() {\n        if i == 0 {\n            if vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n                count += 1;\n            }\n        } else if i == test_str.len() - 1 {\n            if vowels.contains(&test_str.chars().nth(i - 1).unwrap()) {\n                count += 1;\n            }\n        } else {\n            if vowels.contains(&test_str.chars().nth(i - 1).unwrap())\n                || vowels.contains(&test_str.chars().nth(i + 1).unwrap())\n            {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (i, c) in test_str.chars().enumerate() {\n        if i == 0 {\n            if vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n                count += 1;\n            }\n        } else if i == test_str.len() - 1 {\n            if vowels.contains(&test_str.chars().nth(i - 1).unwrap()) {\n                count += 1;\n            }\n        } else {\n            if vowels.contains(&test_str.chars().nth(i - 1).unwrap())\n                || vowels.contains(&test_str.chars().nth(i + 1).unwrap())\n            {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if is_vowel(curr.unwrap()) && (prev.is_some() && is_vowel(prev.unwrap()) || next.is_some() && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut prev_char = ' ';\n    let mut next_char = ' ';\n    let mut index = 0;\n    for c in test_str.chars() {\n        if index == 0 {\n            next_char = test_str.chars().nth(index + 1).unwrap();\n        } else if index == test_str.len() - 1 {\n            prev_char = test_str.chars().nth(index - 1).unwrap();\n        } else {\n            prev_char = test_str.chars().nth(index - 1).unwrap();\n            next_char = test_str.chars().nth(index + 1).unwrap();\n        }\n        if is_vowel(c) && (is_vowel(prev_char) || is_vowel(next_char)) {\n            count += 1;\n        }\n        index += 1;\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while next != None {\n        if is_vowel(prev) && is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while next != None {\n        if is_vowel(prev.unwrap()) || is_vowel(next.unwrap()) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev_char = chars.next();\n    for c in chars {\n        if is_vowel(prev_char) || is_vowel(Some(c)) {\n            count += 1;\n        }\n        prev_char = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while next.is_some() {\n        if is_vowel(prev) && is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if is_vowel(curr.unwrap()) && (prev.is_some() && is_vowel(prev.unwrap()) || next.is_some() && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if is_vowel(prev) || is_vowel(&c) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) || vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    while let Some(curr_char) = curr {\n        if is_vowel(curr_char) && (prev.is_some() && is_vowel(prev.unwrap()) || chars.clone().any(|c| is_vowel(c))) {\n            count += 1;\n        }\n        prev = curr;\n        curr = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut prev = ' ';\n    let mut next = ' ';\n    for (i, c) in test_str.chars().enumerate() {\n        if i > 0 {\n            prev = test_str.chars().nth(i - 1).unwrap();\n        }\n        if i < test_str.len() - 1 {\n            next = test_str.chars().nth(i + 1).unwrap();\n        }\n        if is_vowel(c) && (is_vowel(prev) || is_vowel(next)) {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if is_vowel(curr.unwrap()) && (prev.is_some() && is_vowel(prev.unwrap()) || next.is_some() && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut count = 0;\n    let mut prev_char = ' ';\n    for c in test_str.chars() {\n        if vowels.contains(&c) {\n            if vowels.contains(&prev_char) {\n                count += 1;\n            }\n        }\n        prev_char = c;\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    while let Some(c) = curr {\n        if vowels.contains(&c) && prev.map_or(false, |p| vowels.contains(&p)) {\n            count += 1;\n        }\n        prev = curr;\n        curr = chars.next();\n    }\n    count",
    "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut count = 0;\n    for (i, c) in test_str.chars().enumerate() {\n        if i == 0 {\n            if vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n                count += 1;\n            }\n        } else if i == test_str.len() - 1 {\n            if vowels.contains(&test_str.chars().nth(i - 1).unwrap()) {\n                count += 1;\n            }\n        } else {\n            if vowels.contains(&test_str.chars().nth(i - 1).unwrap())\n                || vowels.contains(&test_str.chars().nth(i + 1).unwrap())\n            {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev_char = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev_char.unwrap()) {\n            count += 1;\n        }\n        prev_char = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n\n    while let Some(c) = curr {\n        if is_vowel(c) && (prev.map_or(false, |p| is_vowel(p)) || next.map_or(false, |n| is_vowel(n))) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut prev_char = ' ';\n    let mut next_char = ' ';\n    let mut chars = test_str.chars();\n    for c in chars.by_ref() {\n        next_char = chars.next().unwrap_or(' ');\n        if is_vowel(c) && (is_vowel(prev_char) || is_vowel(next_char)) {\n            count += 1;\n        }\n        prev_char = c;\n    }\n    count",
    "    let mut count = 0;\n    let mut iter = test_str.chars();\n    let mut prev = iter.next();\n    let mut curr = iter.next();\n    let mut next = iter.next();\n\n    while next != None {\n        if is_vowel(prev.unwrap()) && is_vowel(next.unwrap()) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = iter.next();\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut k: usize = 0;\n    let mut l: usize = 0;\n    let mut m: usize = 0;\n    let mut n: usize = 0;\n    let mut o: usize = 0;\n    let mut p: usize = 0;\n    let mut q: usize = 0;\n    let mut r: usize = 0;\n    let mut s: usize = 0;\n    let mut t: usize = 0;\n    let mut u: usize = 0;\n    let mut v: usize = 0;\n    let mut w: usize = 0;\n    let mut x: usize = 0;\n    let mut y: usize = 0;\n    let mut z: usize = 0;\n    let mut a: usize = 0;\n    let mut e: usize = 0;\n    let mut i: usize = 0;\n    let mut o: usize = 0;\n    let mut u: usize = 0;\n    let mut vowels: Vec<char> = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut test_str_vec: Vec<char> = test_str.chars().collect();\n    let mut test_str_len: usize = test_str.len();\n    for i in 0..test_str_len {\n        if test_str_vec[i] == 'a' {\n            a += 1;\n        }\n        if test_str_vec[i] == 'e' {\n            e += 1;\n        }\n        if test_str_vec[i] == 'i' {\n            i += 1;\n        }\n        if test_str_vec[i] == 'o' {\n            o += 1;\n        }\n        if test_str_vec[i] == 'u' {\n            u += 1;\n        }\n    }\n    if a > 1 {\n        count += a - 1;\n    }\n    if e > 1 {\n        count += e - 1;\n",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if is_vowel(prev.unwrap()) || is_vowel(c) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    for (i, c) in test_str.chars().enumerate() {\n        if i == 0 {\n            if vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n                count += 1;\n            }\n        } else if i == test_str.len() - 1 {\n            if vowels.contains(&test_str.chars().nth(i - 1).unwrap()) {\n                count += 1;\n            }\n        } else {\n            if vowels.contains(&test_str.chars().nth(i + 1).unwrap())\n                || vowels.contains(&test_str.chars().nth(i - 1).unwrap())\n            {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    while let Some(c) = curr {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = curr;\n        curr = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut next = chars.next();\n    while let Some(c) = next {\n        if let Some(p) = prev {\n            if is_vowel(c) && is_vowel(p) {\n                count += 1;\n            }\n        }\n        prev = Some(c);\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if is_vowel(prev) && is_vowel(Some(c)) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut iter = test_str.chars();\n    let mut prev = iter.next();\n    let mut curr = iter.next();\n    let mut next = iter.next();\n    while let Some(c) = curr {\n        if is_vowel(c) && (prev.is_some() && is_vowel(prev.unwrap()) || next.is_some() && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = iter.next();\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut iter = test_str.chars();\n    let mut prev = iter.next();\n    for c in iter {\n        if is_vowel(prev.unwrap()) || is_vowel(c) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while let (Some(p), Some(c), Some(n)) = (prev, curr, next) {\n        if is_vowel(p) && is_vowel(c) && is_vowel(n) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n\n    while next.is_some() {\n        if is_vowel(prev) || is_vowel(next) {\n            if is_vowel(curr) {\n                count += 1;\n            }\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut count = 0;\n    for (i, c) in test_str.chars().enumerate() {\n        if i == 0 {\n            if vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n                count += 1;\n            }\n        } else if i == test_str.len() - 1 {\n            if vowels.contains(&test_str.chars().nth(i - 1).unwrap()) {\n                count += 1;\n            }\n        } else {\n            if vowels.contains(&test_str.chars().nth(i - 1).unwrap()) || vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut prev_char = ' ';\n    for c in test_str.chars() {\n        if is_vowel(c) || is_vowel(prev_char) {\n            count += 1;\n        }\n        prev_char = c;\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut prev_char: char = ' ';\n    let mut next_char: char = ' ';\n    let mut i: usize = 0;\n    for c in test_str.chars() {\n        if i == 0 {\n            prev_char = ' ';\n            next_char = test_str.chars().nth(i + 1).unwrap();\n        } else if i == test_str.len() - 1 {\n            prev_char = test_str.chars().nth(i - 1).unwrap();\n            next_char = ' ';\n        } else {\n            prev_char = test_str.chars().nth(i - 1).unwrap();\n            next_char = test_str.chars().nth(i + 1).unwrap();\n        }\n        if is_vowel(c) && (is_vowel(prev_char) || is_vowel(next_char)) {\n            count += 1;\n        }\n        i += 1;\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if is_vowel(prev.unwrap()) || is_vowel(c) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if vowels.contains(&curr.unwrap()) {\n            if prev.is_some() && vowels.contains(&prev.unwrap()) {\n                count += 1;\n            }\n            if next.is_some() && vowels.contains(&next.unwrap()) {\n                count += 1;\n            }\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr != None {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut count = 0;\n    for (i, c) in test_str.chars().enumerate() {\n        if i == 0 {\n            if vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n                count += 1;\n            }\n        } else if i == test_str.len() - 1 {\n            if vowels.contains(&test_str.chars().nth(i - 1).unwrap()) {\n                count += 1;\n            }\n        } else {\n            if vowels.contains(&test_str.chars().nth(i + 1).unwrap())\n                || vowels.contains(&test_str.chars().nth(i - 1).unwrap())\n            {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if is_vowel(curr.unwrap()) && (prev.is_some() && is_vowel(prev.unwrap()) || next.is_some() && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (i, c) in test_str.chars().enumerate() {\n        if i == 0 {\n            if vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n                count += 1;\n            }\n        } else if i == test_str.len() - 1 {\n            if vowels.contains(&test_str.chars().nth(i - 1).unwrap()) {\n                count += 1;\n            }\n        } else {\n            if vowels.contains(&test_str.chars().nth(i - 1).unwrap())\n                || vowels.contains(&test_str.chars().nth(i + 1).unwrap())\n            {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if is_vowel(c) && is_vowel(*prev) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr != None {\n        if is_vowel(curr.unwrap()) && (prev != None && is_vowel(prev.unwrap()) || next != None && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    return count;",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if vowels.contains(&curr.unwrap()) {\n            if prev.is_some() && vowels.contains(&prev.unwrap()) {\n                count += 1;\n            }\n            if next.is_some() && vowels.contains(&next.unwrap()) {\n                count += 1;\n            }\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count: isize = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if is_vowel(prev) || is_vowel(&c) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if is_vowel(curr.unwrap()) && (prev.is_some() && is_vowel(prev.unwrap()) || next.is_some() && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    while curr != None {\n        if vowels.contains(&curr.unwrap()) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = curr;\n        curr = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev_char = chars.next();\n    let mut curr_char = chars.next();\n    let mut next_char = chars.next();\n    while curr_char.is_some() {\n        if is_vowel(curr_char.unwrap()) && (prev_char.is_some() && is_vowel(prev_char.unwrap()) || next_char.is_some() && is_vowel(next_char.unwrap())) {\n            count += 1;\n        }\n        prev_char = curr_char;\n        curr_char = next_char;\n        next_char = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while let (Some(p), Some(c), Some(n)) = (prev, curr, next) {\n        if is_vowel(p) && is_vowel(c) && is_vowel(n) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if is_vowel(prev.unwrap()) || is_vowel(c) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n\n    while next != None {\n        if is_vowel(prev) && is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut next = chars.next();\n    while next != None {\n        if is_vowel(prev.unwrap()) || is_vowel(next.unwrap()) {\n            count += 1;\n        }\n        prev = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while next != None {\n        if is_vowel(prev) && is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut last_char = chars.next();\n    for c in chars {\n        if is_vowel(last_char) && is_vowel(Some(c)) {\n            count += 1;\n        }\n        last_char = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut count = 0;\n\n    for (i, c) in test_str.chars().enumerate() {\n        if i > 0 && vowels.contains(&test_str.chars().nth(i - 1).unwrap()) {\n            count += 1;\n        }\n        if i < test_str.len() - 1 && vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n            count += 1;\n        }\n    }\n\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr != None {\n        if is_vowel(curr.unwrap()) && (prev != None && is_vowel(prev.unwrap()) || next != None && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    while let Some(c) = curr {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = curr;\n        curr = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if is_vowel(curr.unwrap()) && (prev.is_some() && is_vowel(prev.unwrap()) || next.is_some() && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if is_vowel(curr.unwrap()) && (prev.is_some() && is_vowel(prev.unwrap()) || next.is_some() && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr != None {\n        if is_vowel(curr) && (is_vowel(prev) || is_vowel(next)) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while next != None {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr != None {\n        if is_vowel(curr.unwrap()) && (prev != None && is_vowel(prev.unwrap()) || next != None && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut iter = test_str.chars();\n    let mut prev = iter.next();\n    let mut curr = iter.next();\n    while curr != None {\n        if is_vowel(prev.unwrap()) && is_vowel(curr.unwrap()) {\n            count += 1;\n        }\n        prev = curr;\n        curr = iter.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while next != None {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut prev = ' ';\n    for c in test_str.chars() {\n        if is_vowel(c) && is_vowel(prev) {\n            count += 1;\n        }\n        prev = c;\n    }\n    count",
    "    let mut count = 0;\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while next != None {\n        if is_vowel(prev) && is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut iter = test_str.chars();\n    let mut prev = iter.next();\n    let mut curr = iter.next();\n    let mut next = iter.next();\n    while curr != None {\n        if is_vowel(curr.unwrap()) && (prev != None && is_vowel(prev.unwrap()) || next != None && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = iter.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut iter = test_str.chars();\n    let mut prev = iter.next();\n    let mut curr = iter.next();\n    let mut next = iter.next();\n    while curr != None {\n        if is_vowel(curr.unwrap()) && (prev != None && is_vowel(prev.unwrap()) || next != None && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = iter.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr != None {\n        if is_vowel(curr.unwrap()) && (prev != None && is_vowel(prev.unwrap()) || next != None && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut count = 0;\n    for (i, c) in test_str.chars().enumerate() {\n        if i == 0 {\n            if vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n                count += 1;\n            }\n        } else if i == test_str.len() - 1 {\n            if vowels.contains(&test_str.chars().nth(i - 1).unwrap()) {\n                count += 1;\n            }\n        } else {\n            if vowels.contains(&test_str.chars().nth(i - 1).unwrap()) || vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if is_vowel(curr.unwrap()) && (prev.is_some() && is_vowel(prev.unwrap()) || next.is_some() && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr != None {\n        if is_vowel(curr.unwrap()) && (prev != None && is_vowel(prev.unwrap()) || next != None && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev_char = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev_char.unwrap()) {\n            count += 1;\n        }\n        prev_char = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (i, c) in test_str.chars().enumerate() {\n        if vowels.contains(&c) {\n            if i > 0 && vowels.contains(&test_str.chars().nth(i - 1).unwrap()) {\n                count += 1;\n            }\n            if i < test_str.len() - 1 && vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    while let Some(c) = curr {\n        if is_vowel(c) && is_vowel(prev.unwrap_or(' ')) {\n            count += 1;\n        }\n        prev = curr;\n        curr = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut prev = ' ';\n    let mut curr = ' ';\n    let mut next = ' ';\n    let mut i = 0;\n    for c in test_str.chars() {\n        if i == 0 {\n            prev = ' ';\n        } else {\n            prev = test_str.chars().nth(i - 1).unwrap();\n        }\n        curr = c;\n        if i == test_str.len() - 1 {\n            next = ' ';\n        } else {\n            next = test_str.chars().nth(i + 1).unwrap();\n        }\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        i += 1;\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut chars = test_str.chars();\n    let mut prev_char = chars.next();\n    let mut curr_char = chars.next();\n    let mut next_char = chars.next();\n\n    while curr_char != None {\n        if is_vowel(curr_char.unwrap()) &&\n            (prev_char == None || is_vowel(prev_char.unwrap())) &&\n            (next_char == None || is_vowel(next_char.unwrap())) {\n            count += 1;\n        }\n        prev_char = curr_char;\n        curr_char = next_char;\n        next_char = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if is_vowel(prev.unwrap()) || is_vowel(c) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for ch in chars {\n        if is_vowel(prev.unwrap()) && is_vowel(ch) {\n            count += 1;\n        }\n        prev = Some(ch);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if is_vowel(curr.unwrap()) && (prev.is_some() && is_vowel(prev.unwrap()) || next.is_some() && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = 2;\n    let mut l = 3;\n    let mut m = 4;\n    let mut n = 5;\n    let mut o = 6;\n    let mut p = 7;\n    let mut q = 8;\n    let mut r = 9;\n    let mut s = 10;\n    let mut t = 11;\n    let mut u = 12;\n    let mut v = 13;\n    let mut w = 14;\n    let mut x = 15;\n    let mut y = 16;\n    let mut z = 17;\n    let mut a = 18;\n    let mut e = 19;\n    let mut i = 20;\n    let mut o = 21;\n    let mut u = 22;\n    let mut y = 23;\n    let mut vowels = [a, e, i, o, u, y];\n    let mut alphabet = [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z];\n    let mut str_vec: Vec<char> = test_str.chars().collect();\n    for i in 0..str_vec.len() {\n        if str_vec[i] == alphabet[i] {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while next.is_some() {\n        if is_vowel(prev) && is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr != None {\n        if is_vowel(curr.unwrap()) && (prev != None && is_vowel(prev.unwrap()) || next != None && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    while curr != None {\n        if vowels.contains(&curr.unwrap()) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = curr;\n        curr = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n\n    while next.is_some() {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while next != None {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if is_vowel(curr.unwrap()) && (prev.is_some() && is_vowel(prev.unwrap()) || next.is_some() && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut iter = test_str.chars();\n    let mut prev = iter.next();\n    let mut curr = iter.next();\n    let mut next = iter.next();\n    while let Some(c) = curr {\n        if is_vowel(c) && (prev.map_or(false, is_vowel) || next.map_or(false, is_vowel)) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = iter.next();\n    }\n    count",
    "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut count = 0;\n    for (i, c) in test_str.chars().enumerate() {\n        if i > 0 && vowels.contains(&test_str.chars().nth(i - 1).unwrap()) {\n            count += 1;\n        }\n        if i < test_str.len() - 1 && vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let chars: Vec<char> = test_str.chars().collect();\n    for i in 0..chars.len() {\n        if i > 0 && vowels.contains(&chars[i - 1]) {\n            count += 1;\n        }\n        if i < chars.len() - 1 && vowels.contains(&chars[i + 1]) {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if is_vowel(curr.unwrap()) && (prev.is_some() && is_vowel(prev.unwrap()) || next.is_some() && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr != None {\n        if is_vowel(curr) && (is_vowel(prev) || is_vowel(next)) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while next != None {\n        if is_vowel(prev) && is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = 2;\n    let mut l = 3;\n\n    let mut chars: Vec<char> = test_str.chars().collect();\n\n    while j < chars.len() {\n        if chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u' {\n            if chars[j] == 'a' || chars[j] == 'e' || chars[j] == 'i' || chars[j] == 'o' || chars[j] == 'u' {\n                count += 1;\n            }\n        }\n        i += 1;\n        j += 1;\n    }\n\n    while k < chars.len() {\n        if chars[j] == 'a' || chars[j] == 'e' || chars[j] == 'i' || chars[j] == 'o' || chars[j] == 'u' {\n            if chars[k] == 'a' || chars[k] == 'e' || chars[k] == 'i' || chars[k] == 'o' || chars[k] == 'u' {\n                count += 1;\n            }\n        }\n        j += 1;\n        k += 1;\n    }\n\n    while l < chars.len() {\n        if chars[k] == 'a' || chars[k] == 'e' || chars[k] == 'i' || chars[k] == 'o' || chars[k] == 'u' {\n            if chars[l] == 'a' || chars[l] == 'e' || chars[l] == 'i' || chars[l] == 'o' || chars[l] == 'u' {\n                count += 1;\n            }\n        }\n        k += 1;\n        l += 1;\n    }\n\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if is_vowel(prev.unwrap()) || is_vowel(c) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while next != None {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while next != None {\n        if is_vowel(prev.unwrap()) && is_vowel(next.unwrap()) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if prev.is_some() && vowels.contains(&prev.unwrap()) && vowels.contains(&c) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while let (Some(prev_char), Some(curr_char), Some(next_char)) = (prev, curr, next) {\n        if is_vowel(prev_char) || is_vowel(next_char) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if is_vowel(prev.unwrap()) || is_vowel(c) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut iter = test_str.chars();\n    let mut prev = iter.next();\n    for c in iter {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr != None {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if is_vowel(curr.unwrap()) && (prev.is_some() && is_vowel(prev.unwrap()) || next.is_some() && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n\n    while let Some(c) = curr {\n        if is_vowel(c) && (prev.is_some() && is_vowel(prev.unwrap()) || next.is_some() && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n\n    count",
    "    let mut count = 0;\n    let mut prev_char = ' ';\n    let mut next_char = ' ';\n    let mut is_vowel = false;\n\n    for (i, c) in test_str.chars().enumerate() {\n        if i == 0 {\n            prev_char = ' ';\n        } else {\n            prev_char = test_str.chars().nth(i - 1).unwrap();\n        }\n\n        if i == test_str.len() - 1 {\n            next_char = ' ';\n        } else {\n            next_char = test_str.chars().nth(i + 1).unwrap();\n        }\n\n        is_vowel = is_vowel(c);\n\n        if is_vowel && (is_vowel(prev_char) || is_vowel(next_char)) {\n            count += 1;\n        }\n    }\n\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (i, c) in test_str.chars().enumerate() {\n        if i == 0 {\n            if vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n                count += 1;\n            }\n        } else if i == test_str.len() - 1 {\n            if vowels.contains(&test_str.chars().nth(i - 1).unwrap()) {\n                count += 1;\n            }\n        } else {\n            if vowels.contains(&test_str.chars().nth(i - 1).unwrap())\n                || vowels.contains(&test_str.chars().nth(i + 1).unwrap())\n            {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (i, c) in test_str.chars().enumerate() {\n        if i > 0 && vowels.contains(&test_str.chars().nth(i - 1).unwrap()) {\n            count += 1;\n        }\n        if i < test_str.len() - 1 && vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut iter = test_str.chars();\n    let mut prev = iter.next();\n    for c in iter {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if is_vowel(prev.unwrap()) || is_vowel(c) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if is_vowel(c) || is_vowel(prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev_char = chars.next();\n    for c in chars {\n        if is_vowel(prev_char) && is_vowel(Some(c)) {\n            count += 1;\n        }\n        prev_char = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev_char = chars.next();\n    for c in chars {\n        if is_vowel(prev_char) && is_vowel(Some(c)) {\n            count += 1;\n        }\n        prev_char = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev_char: char = ' ';\n    let mut curr_char: char = ' ';\n    let mut next_char: char = ' ';\n    while let Some(c) = chars.next() {\n        prev_char = curr_char;\n        curr_char = next_char;\n        next_char = c;\n        if is_vowel(curr_char) && (is_vowel(prev_char) || is_vowel(next_char)) {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr != None {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if is_vowel(curr.unwrap()) && (prev.is_some() && is_vowel(prev.unwrap()) || next.is_some() && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut iter = test_str.chars();\n    let mut prev = iter.next();\n    let mut curr = iter.next();\n    let mut next = iter.next();\n    while let (Some(p), Some(c), Some(n)) = (prev, curr, next) {\n        if is_vowel(p) && is_vowel(c) && is_vowel(n) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = iter.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut iter = test_str.chars();\n    let mut prev = iter.next();\n    let mut curr = iter.next();\n    let mut next = iter.next();\n    while let Some(c) = curr {\n        if is_vowel(c) && (is_vowel(prev.unwrap_or(' ')) || is_vowel(next.unwrap_or(' '))) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = iter.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while next != None {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if is_vowel(prev.unwrap()) || is_vowel(c) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while next.is_some() {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev_char = chars.next();\n    for c in chars {\n        if is_vowel(prev_char) && is_vowel(Some(c)) {\n            count += 1;\n        }\n        prev_char = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev_char = chars.next();\n    let mut curr_char = chars.next();\n    let mut next_char = chars.next();\n    while curr_char != None {\n        if is_vowel(curr_char) && (is_vowel(prev_char) || is_vowel(next_char)) {\n            count += 1;\n        }\n        prev_char = curr_char;\n        curr_char = next_char;\n        next_char = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut iter = test_str.chars();\n    let mut prev = iter.next();\n    let mut curr = iter.next();\n    let mut next = iter.next();\n    while next != None {\n        if is_vowel(prev) && is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = iter.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr != None {\n        if is_vowel(curr) && (is_vowel(prev) || is_vowel(next)) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut prev_char = ' ';\n    let mut next_char = ' ';\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = 2;\n    let test_str_len = test_str.len();\n    let mut test_str_chars = test_str.chars();\n    while i < test_str_len {\n        if j < test_str_len {\n            next_char = test_str_chars.nth(j).unwrap();\n        }\n        if k < test_str_len {\n            next_char = test_str_chars.nth(k).unwrap();\n        }\n        if is_vowel(prev_char) || is_vowel(next_char) {\n            count += 1;\n        }\n        prev_char = test_str_chars.nth(i).unwrap();\n        i += 1;\n        j += 1;\n        k += 1;\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while next.is_some() {\n        if is_vowel(prev) && is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr != None {\n        if is_vowel(curr) && (is_vowel(prev) || is_vowel(next)) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if is_vowel(curr.unwrap()) && (prev.is_some() && is_vowel(prev.unwrap()) || next.is_some() && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count"
  ]
}