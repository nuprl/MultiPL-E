{
  "name": "mbpp_283_validate",
  "language": "rs",
  "prompt": "/// Write a rsthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfn validate(n: isize) -> bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = validate;\n    assert_eq!(candidate(1234), true);\n    assert_eq!(candidate(51241), false);\n    assert_eq!(candidate(321), true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        *digits.entry(digit).or_insert(0) += 1;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if digit.to_digit(10).unwrap() < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &freq)| freq <= digit)",
    "    let mut digits: Vec<isize> = Vec::new();\n    let mut n = n;\n    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n    let mut freq: Vec<isize> = vec![0; 10];\n    for d in digits {\n        freq[d as usize] += 1;\n    }\n    for d in digits {\n        if freq[d as usize] > d {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    digits.iter().all(|(k, v)| v <= &(k.to_digit(10).unwrap() as isize))",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in n.to_string().chars() {\n        let count = digits.get(&c).unwrap();\n        if count > &(c.to_digit(10).unwrap() as isize) {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = vec![0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        digits[digit as usize] += 1;\n        n /= 10;\n    }\n    for i in 0..10 {\n        if digits[i] > i as isize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        if digits.contains_key(&digit) {\n            let count = digits.get_mut(&digit).unwrap();\n            *count += 1;\n        } else {\n            digits.insert(digit, 1);\n        }\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, freq) in digits {\n        if freq > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, freq) in digits {\n        if freq > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut freq = [0; 10];\n    let mut n = n;\n    while n > 0 {\n        let d = n % 10;\n        freq[d as usize] += 1;\n        n /= 10;\n    }\n    for i in 0..10 {\n        if freq[i] > i {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| k >= v)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        if let Some(count) = digits.get_mut(&digit) {\n            *count += 1;\n        } else {\n            digits.insert(digit, 1);\n        }\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = vec![0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        digits[digit as usize] += 1;\n        n /= 10;\n    }\n    for i in 0..10 {\n        if digits[i] > i {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    digits.iter().all(|(&k, &v)| v <= k.to_digit(10).unwrap() as usize)",
    "    let mut digits: HashMap<char, isize> = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if digit.to_digit(10).unwrap() as isize < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &freq)| freq <= digit)",
    "    let mut digits = HashMap::new();\n    for d in n.to_string().chars() {\n        let count = digits.entry(d).or_insert(0);\n        *count += 1;\n    }\n    for (d, count) in digits {\n        let d = d.to_digit(10).unwrap();\n        if d < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    digits.iter().all(|(k, v)| k.to_digit(10).unwrap() as isize >= *v)",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in n.to_string().chars() {\n        let count = digits.get(&c).unwrap();\n        if count > &(c.to_digit(10).unwrap() as isize) {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in n.to_string().chars() {\n        if digits[&c] > c.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &freq)| freq <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, freq) in digits {\n        if freq > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut count = [0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        count[digit as usize] += 1;\n        n /= 10;\n    }\n    for i in 0..10 {\n        if count[i] > i {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n\n    for (digit, count) in digits.iter() {\n        if *count > digit {\n            return false;\n        }\n    }\n\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        *digits.entry(digit).or_insert(0) += 1;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (key, value) in digits {\n        if key < value {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &freq)| freq <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        if let Some(count) = digits.get(&digit) {\n            digits.insert(digit, count + 1);\n        } else {\n            digits.insert(digit, 1);\n        }\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits.iter() {\n        if *count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut count = [0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        count[digit as usize] += 1;\n        n /= 10;\n    }\n    for i in 0..10 {\n        if count[i] > i {\n            return false;\n        }\n    }\n    true",
    "    let mut count = [0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        count[digit as usize] += 1;\n        n /= 10;\n    }\n    for i in 0..10 {\n        if count[i] > i as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (key, value) in digits {\n        let digit = key.to_digit(10).unwrap() as usize;\n        if value > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(digit, count)| *count <= digit)",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut freq = [0; 10];\n    let mut n = n;\n    while n > 0 {\n        let d = n % 10;\n        freq[d as usize] += 1;\n        n /= 10;\n    }\n    for i in 0..10 {\n        if freq[i] > i {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut count = vec![0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        count[digit as usize] += 1;\n        n /= 10;\n    }\n    for i in 0..10 {\n        if count[i] > i {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut map = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = map.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in map {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut num = n;\n    while num > 0 {\n        let digit = num % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        num /= 10;\n    }\n\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        if *count > c.to_digit(10).unwrap() as isize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        *digits.entry(digit).or_insert(0) += 1;\n    }\n    digits.iter().all(|(&digit, &freq)| freq <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = [0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        if digits[digit as usize] > digit {\n            return false;\n        }\n        digits[digit as usize] += 1;\n        n /= 10;\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        if digits.contains_key(&digit) {\n            *digits.get_mut(&digit).unwrap() += 1;\n        } else {\n            digits.insert(digit, 1);\n        }\n        n /= 10;\n    }\n    for (digit, freq) in digits {\n        if freq > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut n = n;\n    let mut digits = vec![0; 10];\n    while n > 0 {\n        let digit = n % 10;\n        digits[digit as usize] += 1;\n        n /= 10;\n    }\n    for (i, &count) in digits.iter().enumerate() {\n        if count > i as isize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = vec![0; 10];\n    let mut n = n;\n    while n > 0 {\n        let d = n % 10;\n        digits[d as usize] += 1;\n        n /= 10;\n    }\n    for i in 0..10 {\n        if digits[i] > i as isize {\n            return false;\n        }\n    }\n    true",
    "    let mut count = [0; 10];\n    let mut n = n;\n    while n > 0 {\n        let d = n % 10;\n        count[d as usize] += 1;\n        n /= 10;\n    }\n    for i in 0..10 {\n        if count[i] > i {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &freq)| freq <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let d = n % 10;\n        *digits.entry(d).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (k, v) in digits {\n        if k < v {\n            return false;\n        }\n    }\n    true",
    "    let mut digits: Vec<isize> = vec![0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        digits[digit as usize] += 1;\n        n /= 10;\n    }\n    for i in 1..10 {\n        if digits[i] > i {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut freq = [0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        if freq[digit as usize] > digit {\n            return false;\n        }\n        freq[digit as usize] += 1;\n        n /= 10;\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut m = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *m.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (k, v) in m {\n        if k < v {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits.iter() {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &freq)| freq <= digit)",
    "    let mut m = n;\n    let mut digits = [0; 10];\n    while m > 0 {\n        let d = m % 10;\n        digits[d as usize] += 1;\n        m /= 10;\n    }\n    for i in 0..10 {\n        if digits[i] > i {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = vec![0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        digits[digit as usize] += 1;\n        n /= 10;\n    }\n    for i in 1..10 {\n        if digits[i] > i {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        *digits.entry(digit).or_insert(0) += 1;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &freq)| freq <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        *digits.entry(digit).or_insert(0) += 1;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut digits = HashMap::new();\n    let mut num = n;\n    while num > 0 {\n        let digit = num % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        num /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digit_counts = [0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        digit_counts[digit as usize] += 1;\n        n /= 10;\n    }\n    for (digit, count) in digit_counts.iter().enumerate() {\n        if *count > digit as isize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        if digits.contains_key(&digit) {\n            *digits.get_mut(&digit).unwrap() += 1;\n        } else {\n            digits.insert(digit, 1);\n        }\n        n /= 10;\n    }\n    for (digit, freq) in digits {\n        if digit < freq {\n            return false;\n        }\n    }\n    true",
    "    let mut count = [0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        count[digit as usize] += 1;\n        n /= 10;\n    }\n\n    for i in 0..10 {\n        if count[i] > i {\n            return false;\n        }\n    }\n\n    true",
    "    let mut map = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n = n / 10;\n        let count = map.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in map.iter() {\n        if *count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = vec![0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = (n % 10) as usize;\n        digits[digit] += 1;\n        n /= 10;\n    }\n    for (i, &count) in digits.iter().enumerate() {\n        if count > i as isize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut num = n;\n    while num > 0 {\n        let digit = num % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        num /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = vec![0; 10];\n    let mut n = n;\n    while n > 0 {\n        digits[(n % 10) as usize] += 1;\n        n /= 10;\n    }\n    for i in 0..10 {\n        if digits[i] > i as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut map = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *map.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, freq) in map {\n        if digit < freq {\n            return false;\n        }\n    }\n    true",
    "    let mut digits: Vec<isize> = Vec::new();\n    let mut n = n;\n    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n    let mut counts = vec![0; 10];\n    for d in digits {\n        counts[d as usize] += 1;\n    }\n    for i in 0..10 {\n        if counts[i] > i {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (k, v) in digits {\n        if v > k.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &freq)| freq <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        *digits.entry(digit).or_insert(0) += 1;\n    }\n    for (digit, freq) in digits {\n        if freq > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut count = [0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        count[digit as usize] += 1;\n        n /= 10;\n    }\n    for i in 1..10 {\n        if count[i] > i {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| k >= v)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        *digits.entry(digit).or_insert(0) += 1;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = vec![0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        digits[digit as usize] += 1;\n        n /= 10;\n    }\n    for i in 0..10 {\n        if digits[i] > i as isize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, freq) in digits {\n        if freq > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    digits.iter().all(|(&k, &v)| v <= k.to_digit(10).unwrap() as usize)",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        let digit = digit.to_string().parse::<isize>().unwrap();\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut freq = [0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        freq[digit as usize] += 1;\n        n /= 10;\n    }\n    for i in 0..10 {\n        if freq[i] > i {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (key, value) in digits {\n        if key < value {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, freq) in digits {\n        if freq > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut count = vec![0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        count[digit as usize] += 1;\n        n /= 10;\n    }\n    for i in 0..10 {\n        if count[i] > i {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (k, v) in digits {\n        if v > k.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut n = n;\n    let mut digits = vec![0; 10];\n    while n > 0 {\n        let digit = n % 10;\n        if digits[digit as usize] > digit {\n            return false;\n        }\n        digits[digit as usize] += 1;\n        n /= 10;\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in n.to_string().chars() {\n        if digits.get(&c).unwrap() > &c.to_digit(10).unwrap() {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut digits = HashMap::new();\n    let mut num = n;\n    while num > 0 {\n        let digit = num % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        num /= 10;\n    }\n    for (key, value) in digits.iter() {\n        if *key < *value {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut count = [0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        count[digit as usize] += 1;\n        n /= 10;\n    }\n    for i in 0..10 {\n        if count[i] > i {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, freq) in digits {\n        if freq > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true"
  ]
}