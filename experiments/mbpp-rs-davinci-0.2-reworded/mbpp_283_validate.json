{
  "name": "mbpp_283_validate",
  "language": "rs",
  "prompt": "/// Write a rsthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfn validate(n: isize) -> bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = validate;\n    assert_eq!(candidate(1234), true);\n    assert_eq!(candidate(51241), false);\n    assert_eq!(candidate(321), true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        *digits.entry(digit).or_insert(0) += 1;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if digit.to_digit(10).unwrap() < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &freq)| freq <= digit)",
    "    let mut digits: Vec<isize> = Vec::new();\n    let mut n = n;\n    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n    let mut freq: Vec<isize> = vec![0; 10];\n    for d in digits {\n        freq[d as usize] += 1;\n    }\n    for d in digits {\n        if freq[d as usize] > d {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    digits.iter().all(|(k, v)| v <= &(k.to_digit(10).unwrap() as isize))",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in n.to_string().chars() {\n        let count = digits.get(&c).unwrap();\n        if count > &(c.to_digit(10).unwrap() as isize) {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = vec![0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        digits[digit as usize] += 1;\n        n /= 10;\n    }\n    for i in 0..10 {\n        if digits[i] > i as isize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        if digits.contains_key(&digit) {\n            let count = digits.get_mut(&digit).unwrap();\n            *count += 1;\n        } else {\n            digits.insert(digit, 1);\n        }\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, freq) in digits {\n        if freq > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, freq) in digits {\n        if freq > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut freq = [0; 10];\n    let mut n = n;\n    while n > 0 {\n        let d = n % 10;\n        freq[d as usize] += 1;\n        n /= 10;\n    }\n    for i in 0..10 {\n        if freq[i] > i {\n            return false;\n        }\n    }\n    true"
  ]
}