{
  "name": "mbpp_108_merge_sorted_list",
  "language": "rs",
  "prompt": "/// Write a function to merge three vectors into a single sorted vector.\nfn merge_sorted_list(num1: Vec<isize>, num2: Vec<isize>, num3: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_108_merge_sorted_list.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = merge_sorted_list;\n    assert_eq!(candidate(vec![25, 24, 15, 4, 5, 29, 110], vec![19, 20, 11, 56, 25, 233, 154], vec![24, 26, 54, 48]), vec![4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]);\n    assert_eq!(candidate(vec![1, 3, 5, 6, 8, 9], vec![2, 5, 7, 11], vec![1, 4, 7, 8, 12]), vec![1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]);\n    assert_eq!(candidate(vec![18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], vec![25, 35, 22, 85, 14, 65, 75, 25, 58], vec![12, 74, 9, 50, 61, 41]), vec![1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut result = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n\n    while i < num1.len() && j < num2.len() && k < num3.len() {\n        let min = num1[i].min(num2[j]).min(num3[k]);\n        result.push(min);\n\n        if min == num1[i] {\n            i += 1;\n        } else if min == num2[j] {\n            j += 1;\n        } else {\n            k += 1;\n        }\n    }\n\n    while i < num1.len() {\n        result.push(num1[i]);\n        i += 1;\n    }\n\n    while j < num2.len() {\n        result.push(num2[j]);\n        j += 1;\n    }\n\n    while k < num3.len() {\n        result.push(num3[k]);\n        k += 1;\n    }\n\n    result",
    "    let mut result = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    while i < num1.len() && j < num2.len() && k < num3.len() {\n        if num1[i] < num2[j] {\n            if num1[i] < num3[k] {\n                result.push(num1[i]);\n                i += 1;\n            } else {\n                result.push(num3[k]);\n                k += 1;\n            }\n        } else {\n            if num2[j] < num3[k] {\n                result.push(num2[j]);\n                j += 1;\n            } else {\n                result.push(num3[k]);\n                k += 1;\n            }\n        }\n    }\n    while i < num1.len() {\n        result.push(num1[i]);\n        i += 1;\n    }\n    while j < num2.len() {\n        result.push(num2[j]);\n        j += 1;\n    }\n    while k < num3.len() {\n        result.push(num3[k]);\n        k += 1;\n    }\n    result",
    "    let mut num1 = num1;\n    let mut num2 = num2;\n    let mut num3 = num3;\n    num1.append(&mut num2);\n    num1.append(&mut num3);\n    num1.sort();\n    num1",
    "    let mut result = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    while i < num1.len() && j < num2.len() && k < num3.len() {\n        if num1[i] < num2[j] && num1[i] < num3[k] {\n            result.push(num1[i]);\n            i += 1;\n        } else if num2[j] < num1[i] && num2[j] < num3[k] {\n            result.push(num2[j]);\n            j += 1;\n        } else {\n            result.push(num3[k]);\n            k += 1;\n        }\n    }\n    while i < num1.len() {\n        result.push(num1[i]);\n        i += 1;\n    }\n    while j < num2.len() {\n        result.push(num2[j]);\n        j += 1;\n    }\n    while k < num3.len() {\n        result.push(num3[k]);\n        k += 1;\n    }\n    result",
    "    let mut nums = Vec::new();\n    nums.extend(num1);\n    nums.extend(num2);\n    nums.extend(num3);\n    nums.sort();\n    nums",
    "    let mut result = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n\n    while i < num1.len() && j < num2.len() && k < num3.len() {\n        let min = min(num1[i], min(num2[j], num3[k]));\n        result.push(min);\n        if min == num1[i] {\n            i += 1;\n        } else if min == num2[j] {\n            j += 1;\n        } else {\n            k += 1;\n        }\n    }\n\n    while i < num1.len() {\n        result.push(num1[i]);\n        i += 1;\n    }\n\n    while j < num2.len() {\n        result.push(num2[j]);\n        j += 1;\n    }\n\n    while k < num3.len() {\n        result.push(num3[k]);\n        k += 1;\n    }\n\n    result",
    "    let mut result = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n\n    while i < num1.len() && j < num2.len() && k < num3.len() {\n        if num1[i] <= num2[j] && num1[i] <= num3[k] {\n            result.push(num1[i]);\n            i += 1;\n        } else if num2[j] <= num1[i] && num2[j] <= num3[k] {\n            result.push(num2[j]);\n            j += 1;\n        } else {\n            result.push(num3[k]);\n            k += 1;\n        }\n    }\n\n    while i < num1.len() {\n        result.push(num1[i]);\n        i += 1;\n    }\n\n    while j < num2.len() {\n        result.push(num2[j]);\n        j += 1;\n    }\n\n    while k < num3.len() {\n        result.push(num3[k]);\n        k += 1;\n    }\n\n    result",
    "    let mut num1 = num1;\n    let mut num2 = num2;\n    let mut num3 = num3;\n    let mut result = Vec::new();\n    while !num1.is_empty() && !num2.is_empty() && !num3.is_empty() {\n        let min = min(num1[0], min(num2[0], num3[0]));\n        result.push(min);\n        if min == num1[0] {\n            num1.remove(0);\n        } else if min == num2[0] {\n            num2.remove(0);\n        } else {\n            num3.remove(0);\n        }\n    }\n    while !num1.is_empty() {\n        result.push(num1[0]);\n        num1.remove(0);\n    }\n    while !num2.is_empty() {\n        result.push(num2[0]);\n        num2.remove(0);\n    }\n    while !num3.is_empty() {\n        result.push(num3[0]);\n        num3.remove(0);\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    while i < num1.len() && j < num2.len() && k < num3.len() {\n        let min = min(num1[i], min(num2[j], num3[k]));\n        result.push(min);\n        if min == num1[i] {\n            i += 1;\n        } else if min == num2[j] {\n            j += 1;\n        } else {\n            k += 1;\n        }\n    }\n    while i < num1.len() {\n        result.push(num1[i]);\n        i += 1;\n    }\n    while j < num2.len() {\n        result.push(num2[j]);\n        j += 1;\n    }\n    while k < num3.len() {\n        result.push(num3[k]);\n        k += 1;\n    }\n    result",
    "    let mut nums = vec![];\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    while i < num1.len() && j < num2.len() && k < num3.len() {\n        let min = min(num1[i], min(num2[j], num3[k]));\n        nums.push(min);\n        if min == num1[i] {\n            i += 1;\n        } else if min == num2[j] {\n            j += 1;\n        } else {\n            k += 1;\n        }\n    }\n    while i < num1.len() {\n        nums.push(num1[i]);\n        i += 1;\n    }\n    while j < num2.len() {\n        nums.push(num2[j]);\n        j += 1;\n    }\n    while k < num3.len() {\n        nums.push(num3[k]);\n        k += 1;\n    }\n    nums",
    "    let mut num1 = num1;\n    let mut num2 = num2;\n    let mut num3 = num3;\n    num1.append(&mut num2);\n    num1.append(&mut num3);\n    num1.sort();\n    num1",
    "    let mut num1 = num1;\n    let mut num2 = num2;\n    let mut num3 = num3;\n    let mut result = Vec::new();\n    while !num1.is_empty() && !num2.is_empty() && !num3.is_empty() {\n        let mut min = num1[0];\n        if num2[0] < min {\n            min = num2[0];\n        }\n        if num3[0] < min {\n            min = num3[0];\n        }\n        result.push(min);\n        if min == num1[0] {\n            num1.remove(0);\n        }\n        if min == num2[0] {\n            num2.remove(0);\n        }\n        if min == num3[0] {\n            num3.remove(0);\n        }\n    }\n    while !num1.is_empty() {\n        result.push(num1[0]);\n        num1.remove(0);\n    }\n    while !num2.is_empty() {\n        result.push(num2[0]);\n        num2.remove(0);\n    }\n    while !num3.is_empty() {\n        result.push(num3[0]);\n        num3.remove(0);\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut num1 = num1.iter();\n    let mut num2 = num2.iter();\n    let mut num3 = num3.iter();\n    let mut num1_next = num1.next();\n    let mut num2_next = num2.next();\n    let mut num3_next = num3.next();\n    while num1_next.is_some() || num2_next.is_some() || num3_next.is_some() {\n        let mut min = None;\n        if num1_next.is_some() {\n            min = Some(num1_next.unwrap());\n        }\n        if num2_next.is_some() && (min.is_none() || num2_next.unwrap() < min.unwrap()) {\n            min = Some(num2_next.unwrap());\n        }\n        if num3_next.is_some() && (min.is_none() || num3_next.unwrap() < min.unwrap()) {\n            min = Some(num3_next.unwrap());\n        }\n        result.push(*min.unwrap());\n        if num1_next.is_some() && num1_next.unwrap() == min.unwrap() {\n            num1_next = num1.next();\n        }\n        if num2_next.is_some() && num2_next.unwrap() == min.unwrap() {\n            num2_next = num2.next();\n        }\n        if num3_next.is_some() && num3_next.unwrap() == min.unwrap() {\n            num3_next = num3.next();\n        }\n    }\n    result",
    "    let mut nums = num1;\n    nums.extend(num2);\n    nums.extend(num3);\n    nums.sort();\n    nums",
    "    let mut nums = Vec::new();\n    nums.extend(num1);\n    nums.extend(num2);\n    nums.extend(num3);\n    nums.sort();\n    nums",
    "    let mut num1 = num1;\n    let mut num2 = num2;\n    let mut num3 = num3;\n    let mut result = Vec::new();\n    while !num1.is_empty() && !num2.is_empty() && !num3.is_empty() {\n        let min = min(num1[0], num2[0], num3[0]);\n        if min == num1[0] {\n            result.push(num1.remove(0));\n        } else if min == num2[0] {\n            result.push(num2.remove(0));\n        } else {\n            result.push(num3.remove(0));\n        }\n    }\n    while !num1.is_empty() {\n        result.push(num1.remove(0));\n    }\n    while !num2.is_empty() {\n        result.push(num2.remove(0));\n    }\n    while !num3.is_empty() {\n        result.push(num3.remove(0));\n    }\n    result",
    "    let mut num1 = num1;\n    let mut num2 = num2;\n    let mut num3 = num3;\n    let mut result = Vec::new();\n    while !num1.is_empty() || !num2.is_empty() || !num3.is_empty() {\n        let mut min = std::isize::MAX;\n        if !num1.is_empty() {\n            min = num1[0];\n        }\n        if !num2.is_empty() && num2[0] < min {\n            min = num2[0];\n        }\n        if !num3.is_empty() && num3[0] < min {\n            min = num3[0];\n        }\n        result.push(min);\n        if !num1.is_empty() && num1[0] == min {\n            num1.remove(0);\n        }\n        if !num2.is_empty() && num2[0] == min {\n            num2.remove(0);\n        }\n        if !num3.is_empty() && num3[0] == min {\n            num3.remove(0);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut num1 = num1.clone();\n    let mut num2 = num2.clone();\n    let mut num3 = num3.clone();\n\n    while !num1.is_empty() && !num2.is_empty() && !num3.is_empty() {\n        let min = min(num1[0], num2[0], num3[0]);\n        if min == num1[0] {\n            result.push(num1.remove(0));\n        } else if min == num2[0] {\n            result.push(num2.remove(0));\n        } else {\n            result.push(num3.remove(0));\n        }\n    }\n\n    while !num1.is_empty() {\n        result.push(num1.remove(0));\n    }\n\n    while !num2.is_empty() {\n        result.push(num2.remove(0));\n    }\n\n    while !num3.is_empty() {\n        result.push(num3.remove(0));\n    }\n\n    result",
    "    let mut nums = num1;\n    nums.extend(num2);\n    nums.extend(num3);\n    nums.sort();\n    nums",
    "    let mut result = Vec::new();\n    let mut index1 = 0;\n    let mut index2 = 0;\n    let mut index3 = 0;\n    while index1 < num1.len() && index2 < num2.len() && index3 < num3.len() {\n        if num1[index1] < num2[index2] {\n            if num1[index1] < num3[index3] {\n                result.push(num1[index1]);\n                index1 += 1;\n            } else {\n                result.push(num3[index3]);\n                index3 += 1;\n            }\n        } else {\n            if num2[index2] < num3[index3] {\n                result.push(num2[index2]);\n                index2 += 1;\n            } else {\n                result.push(num3[index3]);\n                index3 += 1;\n            }\n        }\n    }\n    while index1 < num1.len() {\n        result.push(num1[index1]);\n        index1 += 1;\n    }\n    while index2 < num2.len() {\n        result.push(num2[index2]);\n        index2 += 1;\n    }\n    while index3 < num3.len() {\n        result.push(num3[index3]);\n        index3 += 1;\n    }\n    result"
  ]
}