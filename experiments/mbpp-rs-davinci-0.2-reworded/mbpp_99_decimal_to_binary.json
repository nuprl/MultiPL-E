{
  "name": "mbpp_99_decimal_to_binary",
  "language": "rs",
  "prompt": "/// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfn decimal_to_binary(n: isize) -> String {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(8), String::from(\"1000\"));\n    assert_eq!(candidate(18), String::from(\"10010\"));\n    assert_eq!(candidate(7), String::from(\"111\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push(std::char::from_digit((n % 2) as u32, 10).unwrap());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push(if n % 2 == 0 { '0' } else { '1' });\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        let remainder = n % 2;\n        n /= 2;\n        result.push_str(&remainder.to_string());\n    }\n    result.chars().rev().collect()",
    "    if n == 0 {\n        return \"0\".to_string();\n    }\n    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n = n / 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push(std::char::from_digit((n % 2) as u32, 10).unwrap());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect::<String>()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    result.chars().rev().collect::<String>()",
    "    if n == 0 {\n        return \"0\".to_string();\n    }\n    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect::<String>()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&((n % 2) as u8).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push(if n % 2 == 0 { '0' } else { '1' });\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push(std::char::from_digit((n % 2) as u32, 10).unwrap());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push(std::char::from_digit((n % 2) as u32, 10).unwrap());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.insert(0, (n % 2).to_string().chars().next().unwrap());\n        n /= 2;\n    }\n    result",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut s = String::new();\n    let mut n = n;\n    while n > 0 {\n        s.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    s.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push(std::char::from_digit((n % 2) as u32, 10).unwrap());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push(if n % 2 == 0 { '0' } else { '1' });\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push(if n % 2 == 0 { '0' } else { '1' });\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push(std::char::from_digit((n % 2) as u32, 10).unwrap());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut binary = String::new();\n    let mut n = n;\n    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    binary.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n\n    while n > 0 {\n        result.push(if n % 2 == 0 { '0' } else { '1' });\n        n /= 2;\n    }\n\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push(if n % 2 == 0 { '0' } else { '1' });\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut res = String::new();\n    while n > 0 {\n        res.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    res.chars().rev().collect()",
    "    let mut n = n;\n    let mut s = String::new();\n    while n > 0 {\n        s.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    s.chars().rev().collect()",
    "    let mut s = String::new();\n    let mut n = n;\n    while n > 0 {\n        s.push(if n % 2 == 0 { '0' } else { '1' });\n        n /= 2;\n    }\n    s.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push(if n % 2 == 0 { '0' } else { '1' });\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect::<String>()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    if n == 0 {\n        return \"0\".to_string();\n    }\n    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n = n / 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut binary = String::new();\n    let mut n = n;\n    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    binary.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2) as u8).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result = format!(\"{}{}\", n % 2, result);\n        n /= 2;\n    }\n    result",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n = n / 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut s = String::new();\n    let mut n = n;\n    while n > 0 {\n        s.push(if n % 2 == 0 { '0' } else { '1' });\n        n /= 2;\n    }\n    s.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut binary = String::new();\n    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    if n == 0 {\n        return \"0\".to_string();\n    }\n    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut num = n;\n    while num > 0 {\n        result.push_str(&(num % 2).to_string());\n        num /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()"
  ]
}