{
  "name": "mbpp_787_text_match_three",
  "language": "rs",
  "prompt": "/// Write a function that matches a string that has an a followed by three 'b'.\nfn text_match_three(text: String) -> bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = text_match_three;\n    assert_eq!(candidate(String::from(\"ac\")), false);\n    assert_eq!(candidate(String::from(\"dc\")), false);\n    assert_eq!(candidate(String::from(\"abbbba\")), true);\n    assert_eq!(candidate(String::from(\"caacabbbba\")), true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    unimplemented!()",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    text.contains(\"abbb\")",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    lazy_static! {\n        static ref RE: Regex = Regex::new(r\"ab{3}\").unwrap();\n    }\n    RE.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    lazy_static! {\n        static ref RE: Regex = Regex::new(r\"ab{3}\").unwrap();\n    }\n    RE.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    text.contains(\"abbb\")",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    lazy_static! {\n        static ref RE: Regex = Regex::new(r\"ab{3}\").unwrap();\n    }\n    RE.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    text.contains(\"abbb\")",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    lazy_static! {\n        static ref RE: Regex = Regex::new(r\"ab{3}\").unwrap();\n    }\n    RE.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    text.contains(\"abbb\")",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    lazy_static! {\n        static ref RE: Regex = Regex::new(r\"ab{3}\").unwrap();\n    }\n    RE.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    text.contains(\"abbb\")",
    "    lazy_static! {\n        static ref RE: Regex = Regex::new(r\"ab{3}\").unwrap();\n    }\n    RE.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    text.contains(\"abbb\")",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{3}\").unwrap();\n    re.is_match(&text)"
  ]
}