{
  "name": "mbpp_799_left_rotate",
  "language": "rs",
  "prompt": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut mask = (1 << d) - 1;\n    mask = mask & n;\n    mask = mask << (32 - d);\n    n = n << d;\n    n = n | mask;\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2147483688`,\n right: `40`', /tmp/tmp0bl4q3dp.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    while d > 0 {\n        n = n << 1;\n        d -= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut r = 0;\n    let mut i = 0;\n    while i < d {\n        r = r | (n & 1);\n        r = r << 1;\n        n = n >> 1;\n        i += 1;\n    }\n    n = n | r;\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpr211h4ya.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    for _ in 0..d {\n        let msb = n & 1;\n        n = n >> 1;\n        n = n | (msb << 31);\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpw5m0pqna.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    if d > 32 {\n        d = d % 32;\n    }\n    let mut i = 0;\n    while i < d {\n        let mut temp = n & 1;\n        n = n >> 1;\n        temp = temp << 31;\n        n = n | temp;\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpr4wizc60.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut mask = 0;\n    for i in 0..d {\n        mask = mask | (1 << i);\n    }\n    let mut left = n >> (32 - d);\n    let mut right = n & mask;\n    left = left << (32 - d);\n    n = left | right;\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `64`', /tmp/tmpy0fjexri.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    while d > 0 {\n        let bit = n & 1;\n        n = n >> 1;\n        n = n | (bit << 31);\n        d -= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpjmu8wm17.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> 32 - d);\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    return (n << d) | (n >> (32 - d));\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut r = 0;\n    while d > 0 {\n        r = (r << 1) | (n & 1);\n        n = n >> 1;\n        d -= 1;\n    }\n    n | (r << (32 - d))\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmp3oyeg2ma.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut result = 0;\n    while d > 0 {\n        result = result << 1;\n        result = result | (n & 1);\n        n = n >> 1;\n        d = d - 1;\n    }\n    result = result << (32 - d);\n    result = result | n;\n    result\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpf26mtrq5.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    (n << d) | (n >> (32 - d))\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    if d > 32 {\n        d = d % 32;\n    }\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut result = 0;\n    for _ in 0..d {\n        let mut temp = n & 1;\n        n = n >> 1;\n        temp = temp << 31;\n        result = result | temp;\n    }\n    result = result | n;\n    result\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmphlk2fyrw.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut i = 0;\n    while i < d {\n        let mut temp = n & 1;\n        n = n >> 1;\n        temp = temp << 31;\n        n = n | temp;\n        i += 1;\n    }\n    return n;\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpx3haukpq.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    (n << d) | (n >> (32 - d))\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    (n << d) | (n >> (32 - d))\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut i = 0;\n    while i < d {\n        let mut last_bit = n & 1;\n        n = n >> 1;\n        last_bit = last_bit << 31;\n        n = n | last_bit;\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpphdzi8yl.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d %= 32;\n    n << d | n >> (32 - d)\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut temp = n >> (32 - d);\n    n = n << d;\n    n = n | temp;\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    while d > 0 {\n        n = (n << 1) | (n >> 31);\n        d -= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    if d > 32 {\n        d = d % 32;\n    }\n    n = n << d;\n    n = n | (n >> 32 - d);\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut m = 0;\n    while d > 0 {\n        m = m << 1;\n        m = m | (n & 1);\n        n = n >> 1;\n        d = d - 1;\n    }\n    n = n << d;\n    n = n | m;\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmp6tewq1ve.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mask = (1 << d) - 1;\n    let left = n << d;\n    let right = n >> (32 - d);\n    (left | right) & mask\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `64`', /tmp/tmpsq1jl15x.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut result = 0;\n    while d > 0 {\n        let last_bit = n & 1;\n        n = n >> 1;\n        result = (result << 1) | last_bit;\n        d -= 1;\n    }\n    n = n | (result << (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpwmty6roy.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut result = 0;\n    while d > 0 {\n        result = (result << 1) | (n & 1);\n        n = n >> 1;\n        d -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `64`', /tmp/tmpqb97l1iy.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut i = 0;\n    while i < d {\n        let mut last_bit = n & 1;\n        n = n >> 1;\n        last_bit = last_bit << 31;\n        n = n | last_bit;\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpswvnb1us.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    if d > 32 {\n        d = d % 32;\n    }\n    let mut i = 0;\n    while i < d {\n        let mut temp = n & 1;\n        n = n >> 1;\n        temp = temp << 31;\n        n = n | temp;\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpr4wizc60.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> 32 - d);\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    while d > 0 {\n        let mut last_bit = n & 1;\n        n = n >> 1;\n        last_bit = last_bit << 31;\n        n = n | last_bit;\n        d -= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpo1qj2lzi.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut mask = 0;\n    for _ in 0..d {\n        mask = (mask << 1) | 1;\n    }\n    n = n << d;\n    n = n | mask;\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `67`,\n right: `64`', /tmp/tmp7ysoe23d.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut result = 0;\n    while d > 0 {\n        result = result | (n & 1);\n        result = result << 1;\n        n = n >> 1;\n        d = d - 1;\n    }\n    result = result | (n & 1);\n    result\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `64`', /tmp/tmpxakv57k0.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut mask = 1;\n    let mut result = 0;\n    while mask <= n {\n        mask <<= 1;\n    }\n    mask >>= 1;\n    while mask > 0 {\n        result <<= 1;\n        if n & mask > 0 {\n            result |= 1;\n        }\n        mask >>= 1;\n    }\n    while d > 0 {\n        result <<= 1;\n        result |= 1;\n        d -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `67`,\n right: `64`', /tmp/tmpmws82nnl.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d %= 32;\n    n << d | n >> (32 - d)\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    for _ in 0..d {\n        let leftmost = n & 0x80000000;\n        n <<= 1;\n        n |= leftmost >> 31;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    (n << d) | (n >> (32 - d))\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    (n << d) | (n >> (32 - d))\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut r = 0;\n    while d > 0 {\n        r = (r << 1) | (n & 1);\n        n = n >> 1;\n        d -= 1;\n    }\n    n = n | (r << (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmp1oys74w7.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    (n << d) | (n >> (32 - d))\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    (n << d) | (n >> (32 - d))\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    if d > 32 {\n        d = d % 32;\n    }\n    let mut i = 0;\n    while i < d {\n        let mut temp = n & 1;\n        n = n >> 1;\n        temp = temp << 31;\n        n = n | temp;\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpr4wizc60.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    for _ in 0..d {\n        let leftmost_bit = n & 1;\n        n = n >> 1;\n        n = n | (leftmost_bit << 31);\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpugm84m99.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    (n << d) | (n >> (32 - d))\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d %= 32;\n    n << d | n >> (32 - d)\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d %= 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    for _ in 0..d {\n        let mut last_bit = n & 1;\n        n = n >> 1;\n        last_bit = last_bit << 31;\n        n = n | last_bit;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpjzsqwo9k.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mask = (1 << d) - 1;\n    (n << d) | (n & mask)\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `42`,\n right: `40`', /tmp/tmpfb8_z1gd.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> 32 - d);\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut mask = 0;\n    for i in 0..d {\n        mask = mask | (1 << i);\n    }\n    let mut left = n << d;\n    let mut right = n >> (32 - d);\n    right = right & mask;\n    left = left | right;\n    left\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    // n = 10001000\n    // d = 3\n    // n << d = 010001000\n    // n >> (32 - d) = 000001000\n    // n << d | n >> (32 - d) = 010001000 | 000001000 = 010001000\n    (n << d) | (n >> (32 - d))\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut bits = 0;\n    while n > 0 {\n        bits += 1;\n        n /= 2;\n    }\n    d %= bits;\n    let mut mask = 0;\n    for _ in 0..d {\n        mask = (mask << 1) | 1;\n    }\n    let mask = !mask;\n    let mut left = n << d;\n    let mut right = n & mask;\n    right = right >> (bits - d);\n    left | right\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `64`', /tmp/tmpbruda4e3.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    (n << d) | (n >> (32 - d))\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    if d > 32 {\n        d = d % 32;\n    }\n    let mut mask = 0;\n    for i in 0..d {\n        mask = mask | 1 << i;\n    }\n    let mut left = n << d;\n    let mut right = n >> (32 - d);\n    right = right & mask;\n    left = left | right;\n    left\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    (n << d) | (n >> (32 - d))\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut r = n << d;\n    r |= n >> (32 - d);\n    r\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    while d > 0 {\n        n = left_rotate_by_one(n);\n        d -= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `left_rotate_by_one` in this scope\n --> /tmp/tmp2tclazht.rs:6:13\n  |\n6 |         n = left_rotate_by_one(n);\n  |             ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> 32 - d);\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut res = 0;\n    while d > 0 {\n        res = res | (n & 1);\n        res = res << 1;\n        n = n >> 1;\n        d = d - 1;\n    }\n    res = res | (n & 1);\n    res\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `64`', /tmp/tmp6i161mb4.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut left_mask = 0;\n    let mut right_mask = 0;\n    for i in 0..d {\n        left_mask = left_mask | (1 << i);\n    }\n    for i in d..32 {\n        right_mask = right_mask | (1 << i);\n    }\n    let left_mask = left_mask << (32 - d);\n    let right_mask = right_mask >> (32 - d);\n    let left_mask = left_mask & n;\n    let right_mask = right_mask & n;\n    let left_mask = left_mask >> (32 - d);\n    let right_mask = right_mask << (32 - d);\n    n = n & !(1 << (32 - d));\n    n = n & !(1 << (d - 1));\n    n = n | left_mask;\n    n = n | right_mask;\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `16`,\n right: `64`', /tmp/tmprum9_eki.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut r = 0;\n    while d > 0 {\n        r = r | (n & 1);\n        n = n >> 1;\n        r = r << 1;\n        d = d - 1;\n    }\n    r = r | (n & 1);\n    r = r << (32 - d);\n    r = r | (n >> d);\n    r\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmp0wmvd6sh.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    (n << d) | (n >> (32 - d))\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    (n << d) | (n >> (32 - d))\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    if d > 32 {\n        d = d % 32;\n    }\n    n = n << d;\n    n = n | (n >> 32 - d);\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    (n << d) | (n >> (32 - d))\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut bits = 0;\n    while n > 0 {\n        bits += 1;\n        n = n >> 1;\n    }\n    let mut result = 0;\n    for i in 0..bits {\n        let bit = n & (1 << i);\n        if bit > 0 {\n            result = result | (1 << ((i + d) % bits));\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `64`', /tmp/tmp5rcjdpdy.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> 32 - d);\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut x = n << d;\n    let mut y = n >> (32 - d);\n    x | y\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    if d > 32 {\n        d = d % 32;\n    }\n    let mut mask = 0;\n    for i in 0..d {\n        mask = mask | (1 << i);\n    }\n    let mut left_mask = n & mask;\n    let mut right_mask = n & !mask;\n    left_mask = left_mask << (32 - d);\n    right_mask = right_mask >> d;\n    n = left_mask | right_mask;\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpl3suwpd8.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    if d > 32 {\n        d = d % 32;\n    }\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut mask = 0;\n    for _ in 0..d {\n        mask = mask << 1;\n        mask = mask | 1;\n    }\n    let mut left = n << d;\n    let mut right = n >> (32 - d);\n    right = right & mask;\n    left = left | right;\n    left\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut right_shift = 32 - d;\n    let mut left_shift = 32 - right_shift;\n    let mut right_mask = (1 << right_shift) - 1;\n    let mut left_mask = (1 << left_shift) - 1;\n    let mut left_part = n & left_mask;\n    let mut right_part = n & right_mask;\n    left_part = left_part << right_shift;\n    right_part = right_part >> left_shift;\n    n = left_part | right_part;\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpxz7is5bn.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    return n;\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut mask = 0;\n    for i in 0..d {\n        mask = mask | (1 << i);\n    }\n    let mut left = n << d;\n    let mut right = n >> (32 - d);\n    right = right & mask;\n    left = left | right;\n    left\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    for _ in 0..d {\n        let mut last_bit = n & 1;\n        n = n >> 1;\n        last_bit = last_bit << 31;\n        n = n | last_bit;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpjzsqwo9k.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut result = 0;\n    while d > 0 {\n        result = result | (n & 1);\n        result = result << 1;\n        n = n >> 1;\n        d -= 1;\n    }\n    result = result | (n & 1);\n    result\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `64`', /tmp/tmpyj38d6l6.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    while d > 0 {\n        let mut last_bit = n & 1;\n        n = n >> 1;\n        last_bit = last_bit << 31;\n        n = n | last_bit;\n        d -= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpo1qj2lzi.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut r = 0;\n    while d > 0 {\n        r = r << 1;\n        if n & 1 == 1 {\n            r = r | 1;\n        }\n        n = n >> 1;\n        d = d - 1;\n    }\n    r = r << (32 - d);\n    r = r | n;\n    r\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpnopnujzm.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    (n << d) | (n >> (32 - d))\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d %= 32;\n    let mut mask = 0;\n    for _ in 0..d {\n        mask = mask << 1 | 1;\n    }\n    let mut left = n & mask;\n    left = left << (32 - d);\n    let mut right = n >> d;\n    left | right\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpglfeg27c.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mask = (1 << d) - 1;\n    (n << d) | (n >> (32 - d) & mask)\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    for _ in 0..d {\n        let mut last_bit = n & 1;\n        n = n >> 1;\n        last_bit = last_bit << 31;\n        n = n | last_bit;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpjzsqwo9k.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> 32 - d);\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut result = 0;\n    while d > 0 {\n        result = result | (n & 1);\n        n = n >> 1;\n        result = result << 1;\n        d -= 1;\n    }\n    result = result | (n & 1);\n    result\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `64`', /tmp/tmpc1k2nedu.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    (n << d) | (n >> (32 - d))\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut x = n << d;\n    let mut y = n >> (32 - d);\n    x = x | y;\n    x\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut temp = n << d;\n    temp = temp | (n >> (32 - d));\n    temp\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d %= 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut result = 0;\n    let mut i = 0;\n    while i < 32 {\n        result = result | ((n & 1) << (31 - i));\n        n = n >> 1;\n        i += 1;\n    }\n    while d > 0 {\n        result = result << 1;\n        d -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `536870912`,\n right: `64`', /tmp/tmp4z7r68r6.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    for _ in 0..d {\n        let mut last_bit = n & 1;\n        n = n >> 1;\n        last_bit = last_bit << 31;\n        n = n | last_bit;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpjzsqwo9k.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    for _ in 0..d {\n        let mut last_bit = n & 1;\n        n = n >> 1;\n        last_bit = last_bit << 31;\n        n = n | last_bit;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpjzsqwo9k.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    if d > 32 {\n        d = d % 32;\n    }\n    let mut mask = 0;\n    for i in 0..d {\n        mask = mask | 1 << i;\n    }\n    let mut left_mask = n & mask;\n    left_mask = left_mask << (32 - d);\n    n = n >> d;\n    n = n | left_mask;\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpgtr7_uil.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    if d > 32 {\n        d = d % 32;\n    }\n    let mut mask = 0;\n    for i in 0..d {\n        mask = mask | (1 << i);\n    }\n    let mut left_mask = n & mask;\n    left_mask = left_mask << (32 - d);\n    n = n >> d;\n    n = n | left_mask;\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpav8gn4o0.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut i = 0;\n    while i < d {\n        let mut temp = n & 1;\n        n = n >> 1;\n        temp = temp << 31;\n        n = n | temp;\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmp65h4i1lr.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    (n << d) | (n >> (32 - d))\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut result = 0;\n    while d > 0 {\n        result = result | (n & 1);\n        result = result << 1;\n        n = n >> 1;\n        d = d - 1;\n    }\n    result = result | (n & 1);\n    result\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `64`', /tmp/tmpxakv57k0.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut result = 0;\n    while d > 0 {\n        result = result | (n & 1);\n        result = result << 1;\n        n = n >> 1;\n        d = d - 1;\n    }\n    result = result | (n & 1);\n    result\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `64`', /tmp/tmpxakv57k0.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut res = 0;\n    while d > 0 {\n        res = res | (n & 1);\n        res = res << 1;\n        n = n >> 1;\n        d -= 1;\n    }\n    res = res | (n & 1);\n    res = res << (d - 1);\n    res = res | (n >> (32 - d));\n    res\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to shift left with overflow', /tmp/tmpmjqu2kk6.rs:13:11\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut result = 0;\n    while d > 0 {\n        result = result | (n & 1);\n        result = result << 1;\n        n = n >> 1;\n        d = d - 1;\n    }\n    result = result | (n & 1);\n    result\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `64`', /tmp/tmpxakv57k0.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    if d > 0 {\n        d = d % 32;\n        n = (n << d) | (n >> (32 - d));\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut r = 0;\n    while d > 0 {\n        r = (r << 1) | (n & 1);\n        n = n >> 1;\n        d -= 1;\n    }\n    n = n | (r << (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmp1oys74w7.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    for _ in 0..d {\n        let mut i = 0;\n        let mut temp = n & (1 << i);\n        while temp == 0 {\n            i += 1;\n            temp = n & (1 << i);\n        }\n        n = n << 1 | 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `67`,\n right: `64`', /tmp/tmpolxhs7wm.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    if d > 32 {\n        d = d % 32;\n    }\n    n = n << d;\n    n = n | (n >> 32 - d);\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d %= 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    (n << d) | (n >> (32 - d))\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut result = 0;\n    let mut i = 0;\n    while i < 32 {\n        result = result | ((n & 1) << (31 - i));\n        n = n >> 1;\n        i = i + 1;\n    }\n    while d > 0 {\n        result = result << 1;\n        d = d - 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `536870912`,\n right: `64`', /tmp/tmpyui48q2v.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> 32 - d);\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut result = 0;\n\n    while d > 0 {\n        result = result | (n & 1);\n        result = result << 1;\n        n = n >> 1;\n        d -= 1;\n    }\n\n    result = result | (n & 1);\n    result = result << (d - 1);\n    result = result | (n >> (32 - d));\n\n    result\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to shift left with overflow', /tmp/tmp2tzl692x.rs:15:14\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    (n << d) | (n >> (32 - d))\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    for _ in 0..d {\n        let mut temp = n & 1;\n        n = n >> 1;\n        temp = temp << 31;\n        n = n | temp;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmp84j4p334.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut mask = 0;\n    for i in 0..d {\n        mask = mask | 1 << i;\n    }\n    let mut left = n << d;\n    let mut right = n >> (32 - d);\n    right = right & mask;\n    left = left | right;\n    left\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d %= 32;\n    n << d | n >> (32 - d)\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    if d > 32 {\n        d = d % 32;\n    }\n    let mut i = 0;\n    while i < d {\n        let mut temp = n & 1;\n        n = n >> 1;\n        temp = temp << 31;\n        n = n | temp;\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpr4wizc60.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    while d > 0 {\n        n = n << 1;\n        d -= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut res = 0;\n    let mut i = 0;\n    while i < d {\n        let last_bit = n & 1;\n        n = n >> 1;\n        res = res | (last_bit << 31);\n        i += 1;\n    }\n    res = res | n;\n    res\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmp77u_v0kr.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut result = 0;\n    let mut i = 0;\n    while i < 32 {\n        result = result | ((n & 1) << (31 - i));\n        n = n >> 1;\n        i += 1;\n    }\n    while d > 0 {\n        result = result << 1;\n        d -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `536870912`,\n right: `64`', /tmp/tmp4z7r68r6.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    (n << d) | (n >> (32 - d))\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut r = 0;\n    while d > 0 {\n        r = r | (n & 1);\n        n = n >> 1;\n        r = r << 1;\n        d = d - 1;\n    }\n    r = r | (n & 1);\n    r = r >> 1;\n    r\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `64`', /tmp/tmpib7a8l4v.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> 32 - d);\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut r = 0;\n    while d > 0 {\n        r = r | (n & 1);\n        n = n >> 1;\n        r = r << 1;\n        d = d - 1;\n    }\n    r = r | (n & 1);\n    r = r >> 1;\n    r\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `64`', /tmp/tmpib7a8l4v.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut r = 0;\n    while d > 0 {\n        r = r | (n & 1);\n        n = n >> 1;\n        r = r << 1;\n        d = d - 1;\n    }\n    n = n | r;\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmp2rpymnie.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> 32 - d);\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    if d > 32 {\n        d = d % 32;\n    }\n    while d > 0 {\n        n = n << 1;\n        n = n | 1;\n        d -= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `67`,\n right: `64`', /tmp/tmpmqmekhuq.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut temp = n << d;\n    let mut temp2 = n >> (32 - d);\n    temp |= temp2;\n    temp\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    (n << d) | (n >> (32 - d))\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut r = 0;\n    while d > 0 {\n        r = (r << 1) | (n & 1);\n        n = n >> 1;\n        d -= 1;\n    }\n    n = n | (r << (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmp1oys74w7.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    for _ in 0..d {\n        let mut temp = n & 1;\n        n = n >> 1;\n        temp = temp << 31;\n        n = n | temp;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmp84j4p334.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut r = n << d;\n    r = r | (n >> (32 - d));\n    r\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    if d > 32 {\n        d = d % 32;\n    }\n    let mut r = 0;\n    for _ in 0..d {\n        r = r << 1;\n        r = r | (n & 1);\n        n = n >> 1;\n    }\n    n = n << d;\n    n = n | r;\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `16`,\n right: `64`', /tmp/tmp1s7gz9hy.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut r = 0;\n    while d > 0 {\n        r = (r << 1) | (n & 1);\n        n = n >> 1;\n        d -= 1;\n    }\n    n = n | (r << (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmp1oys74w7.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    (n << d) | (n >> (32 - d))\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut r = 0;\n    while d > 0 {\n        r = (r << 1) | (n & 1);\n        n = n >> 1;\n        d -= 1;\n    }\n    n = n | (r << (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmp1oys74w7.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    for _ in 0..d {\n        let mut last_bit = n & 1;\n        n = n >> 1;\n        last_bit = last_bit << 31;\n        n = n | last_bit;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpjzsqwo9k.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut mask = 0;\n    for i in 0..d {\n        mask = mask | 1 << i;\n    }\n    let mut left = n << d;\n    let mut right = n >> (32 - d);\n    right = right & mask;\n    left = left | right;\n    left\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    n << d | n >> (32 - d)\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d %= 32;\n    n << d | n >> (32 - d)\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    if d > 32 {\n        d = d % 32;\n    }\n    let mut i = 0;\n    while i < d {\n        let mut temp = n & 1;\n        n = n >> 1;\n        temp = temp << 31;\n        n = n | temp;\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpr4wizc60.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> 32 - d);\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut mask = 0;\n    for i in 0..d {\n        mask = mask | (1 << i);\n    }\n    mask = mask << (32 - d);\n    let mut left_mask = 0;\n    for i in 0..(32 - d) {\n        left_mask = left_mask | (1 << i);\n    }\n    let left = n & left_mask;\n    let right = n & mask;\n    let mut result = 0;\n    for i in 0..(32 - d) {\n        result = result | (left >> i);\n    }\n    for i in 0..d {\n        result = result | (right >> (32 - d + i));\n    }\n    result\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `31`,\n right: `64`', /tmp/tmpbw0baxuy.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    while d > 0 {\n        let leftmost_bit = n & 1;\n        n = n >> 1;\n        if leftmost_bit == 1 {\n            n = n | (1 << 31);\n        }\n        d -= 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpob2w1qx5.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    if d > 32 {\n        d = d % 32;\n    }\n    for _ in 0..d {\n        let mut temp = n & 1;\n        n = n >> 1;\n        temp = temp << 31;\n        n = n | temp;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpm6bmwkog.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    (n << d) | (n >> (32 - d))\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d %= 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    for _ in 0..d {\n        let leftmost = n & 0x80000000;\n        n <<= 1;\n        n |= leftmost >> 31;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    let mut result = 0;\n    while d > 0 {\n        result = result | (n & 1);\n        result = result << 1;\n        n = n >> 1;\n        d = d - 1;\n    }\n    result = result | (n & 1);\n    result\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `64`', /tmp/tmpxakv57k0.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d %= 32;\n    n = (n << d) | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut i = 0;\n    while i < d {\n        let mut temp = n & 1;\n        n = n >> 1;\n        temp = temp << 31;\n        n = n | temp;\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpndqp64__.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mut n = n;\n    let mut d = d;\n    if d > 32 {\n        d = d % 32;\n    }\n    let mut mask = 0;\n    for i in 0..d {\n        mask = mask | 1 << i;\n    }\n    let mut left_mask = n & mask;\n    let mut right_mask = n & !mask;\n    left_mask = left_mask << (32 - d);\n    right_mask = right_mask >> d;\n    left_mask | right_mask\n}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `64`', /tmp/tmpltum9573.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}