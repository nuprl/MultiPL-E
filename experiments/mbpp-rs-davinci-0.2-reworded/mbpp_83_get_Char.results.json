{
  "name": "mbpp_83_get_Char",
  "language": "rs",
  "prompt": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = sum % 26;\n    let mut res_char = (res as u8 + 65) as char;\n    res_char.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpllysk7nd.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let s = res as char;\n    s.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp4zze5o7l.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let ch = (res + 65) as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpd5ot2yc3.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum = sum + i as u32;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch = ch + 65;\n    let s = ch as char;\n    s.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpl4bvtirw.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let mut s = String::new();\n    s.push(ch as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp46eth3e0.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut result = (sum % 26) as u8;\n    result += 65;\n    let result = result as char;\n    format!(\"{}\", result)\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpquuly2_8.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let mut s = String::new();\n    s.push(ch as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpga361f6p.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8 + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpuee33a0d.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let mut s = String::new();\n    s.push(ch as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpga361f6p.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let mut result = String::new();\n    result.push(res as char);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp1q6tj_2f.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let ch = (res + 65) as u8 as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpkr2m2l0n.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut ch = (sum % 26) as u8 + 65;\n    let mut s = String::new();\n    s.push(ch as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmppmqgwghh.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let ch = (sum % 26 + 65) as u8;\n    let s = ch as char;\n    s.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpx5k78bj7.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let ch = (sum % 26 + 65) as u8 as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpum434fnb.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let sum = sum % 26;\n    let sum = sum + 97;\n    let sum = sum as u8;\n    let sum = sum as char;\n    let mut strr = String::new();\n    strr.push(sum);\n    strr\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpnnf_f84_.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpz40h_1ck.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpwn7508_2.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res as u8 + 97;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpi1sp_o3k.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let ch = res as char;\n    let mut strr = String::new();\n    strr.push(ch);\n    strr\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp9nc4etpk.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26) as u8 + 65;\n    return format!(\"{}\", ch as char);\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp_sblr0kz.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut result = sum % 26;\n    if result == 0 {\n        result = 26;\n    }\n    let result = (result + 64) as u8;\n    let result = result as char;\n    let result = result.to_string();\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmprd66v2dx.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let result = sum % 26;\n    let result = (result + 97) as u8;\n    let result = result as char;\n    let result = result.to_string();\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmp31knc2i5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    return String::from_utf8(vec![res]).unwrap();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpnvk4p23y.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let mut ch = 'a';\n    for i in 0..sum {\n        ch = (ch as u8 + 1) as char;\n    }\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmph7gezweb.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8 + 65;\n    if ch > 90 {\n        ch = ch - 26;\n    }\n    let ch = ch as char;\n    let mut s = String::new();\n    s.push(ch);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmph54fd9xw.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let s = res as char;\n    s.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp4zze5o7l.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let chr = ch as char;\n    let mut strr = String::new();\n    strr.push(chr);\n    strr\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp36vgm7hx.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let ch = (res + 65) as u8 as char;\n    let mut s = String::new();\n    s.push(ch);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp_jq7gijs.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum: u8 = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26 + 97) as char;\n    let s = ch.to_string();\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpnrskqdb3.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res as u8 + 97;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpi1sp_o3k.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = sum % 26;\n    let mut ch = (res + 97) as u8 as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpva90ghxt.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum: i32 = 0;\n    for i in strr.chars() {\n        sum = sum + i as i32;\n    }\n    let res = sum % 26;\n    let ch = (res + 97) as u8 as char;\n    return ch.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmp90ow9m9j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let ch = ch as char;\n    let mut s = String::new();\n    s.push(ch);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpepxrg7xy.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpcdijfqkw.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let ch = ch as char;\n    let mut s = String::new();\n    s.push(ch);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpepxrg7xy.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = sum % 26;\n    res += 65;\n    let mut ress = res as char;\n    ress.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmprcnm8awf.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let mut result = String::new();\n    result.push((res + 65) as char);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpefgnvmek.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let chr = ch as char;\n    chr.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp4yks6pnm.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let mut strr = String::new();\n    strr.push(res as char);\n    strr\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp4r19eyxd.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = sum % 26;\n    res += 97;\n    let res = res as u8 as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpq2_cwbbp.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpoyjtebct.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let ch = (sum % 26 + 97) as u8;\n    let chr = ch as char;\n    return chr.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmp4bipqv9g.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let ch = (sum % 26 + 65) as u8 as char;\n    return ch.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpjgordonh.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res + 65;\n    let res = res as u8 as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpytdwcfnr.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpxm74vowg.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpz40h_1ck.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpcdijfqkw.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26 + 97) as u8;\n    let c = ch as char;\n    c.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpzmggo_l5.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpty8nevxg.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let res = res as u8 + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpi9v69hns.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let res = res + 65;\n    let res = res as u8 as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpunnrrawu.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for c in strr.chars() {\n        sum += c as u32;\n    }\n    let res = sum % 26;\n    let res = res + 97;\n    let res = res as u8 as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpebpd684j.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for c in strr.chars() {\n        sum += c as u8;\n    }\n    let ch = (sum % 26 + 65) as u8;\n    return ch as char.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "error: casts cannot be followed by a method call\n --> /tmp/tmpk99ekz9w.rs:8:12\n  |\n8 |     return ch as char.to_string();\n  |            ^^^^^^^^^^\n  |\nhelp: try surrounding the expression in parentheses\n  |\n8 |     return (ch as char).to_string();\n  |            +          +\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut result = (sum % 26) as u8;\n    result += 65;\n    let result = result as char;\n    result.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpr1cuvc1h.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpwn7508_2.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let ch = (res + 65) as char;\n    let mut str = String::new();\n    str.push(ch);\n    str\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpblgtv4v_.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = (sum % 26) as u8 + 65;\n    let mut res_str = String::new();\n    res_str.push(res as char);\n    res_str\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpm1ubm0c7.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = sum % 26;\n    let mut charr = (res + 65) as u8 as char;\n    charr.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp0ng8rocx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let res = res as u8 + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpi9v69hns.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let modulo = sum % 26;\n    let mut result = String::new();\n    result.push((modulo + 97) as u8 as char);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmp_m7jyn6d.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpwn7508_2.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8 + 65;\n    if ch > 90 {\n        ch = ch - 26;\n    }\n    let chr = ch as char;\n    chr.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpx073uzj7.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum: u32 = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let sum = sum % 26;\n    let mut ch = 'a';\n    for _ in 0..sum {\n        ch = ch.next().unwrap();\n    }\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "error[E0599]: no method named `next` found for type `char` in the current scope\n  --> /tmp/tmpec34cfsk.rs:10:17\n   |\n10 |         ch = ch.next().unwrap();\n   |                 ^^^^ method not found in `char`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    return (res as char).to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp_1654a4x.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    if res == 0 {\n        res = 26;\n    }\n    let mut res_char = (res + 96) as char;\n    res_char.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp0qrv1zh_.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum: i32 = 0;\n    for i in strr.chars() {\n        sum += i as i32;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp9t6w735x.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = sum % 26;\n    res += 65;\n    let res = res as u8 as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp3bl_wr57.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let mut s = String::new();\n    s.push(res as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp36mask3r.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum: u32 = 0;\n    let mut res: String = \"\".to_string();\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let sum = sum % 26;\n    res.push((sum + 65) as u8 as char);\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmplhf_kdyp.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26) as u8 + 65;\n    return ch.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp_s2vc9yn.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let s = ch as char;\n    s.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpv_nmjme7.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26 + 65) as u8;\n    return ch.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp81fw9arm.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let ch = ch as char;\n    let mut s = String::new();\n    s.push(ch);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpepxrg7xy.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut charr = (sum % 26) as u8 + 97;\n    if charr > 122 {\n        charr = charr - 26;\n    }\n    let mut s = String::new();\n    s.push(charr as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpycdwqd2p.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpxm74vowg.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = sum % 26;\n    res += 65;\n    let ch = res as u8 as char;\n    let mut result = String::new();\n    result.push(ch);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpbys0_ceo.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = sum % 26;\n    res += 65;\n    let res = res as u8 as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpv8ezryf0.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let res = res as char;\n    let mut res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpakaepmha.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let res = res + 65;\n    let res = res as u8 as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpunnrrawu.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    return (res as char).to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp_1654a4x.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let c = ch as char;\n    c.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpzmyb6khj.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut result = 0;\n    for i in strr.chars() {\n        result += i as u8;\n    }\n    let result = result % 26;\n    let result = result + 65;\n    let result = result as u8 as char;\n    let result = result.to_string();\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp4p259zgl.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let sum = sum % 26;\n    let sum = sum + 65;\n    let sum = sum as u8 as char;\n    let sum = sum.to_string();\n    sum\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpccwtu3kl.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut num = sum % 26;\n    let mut ch = 'a' as u8;\n    ch += num;\n    let mut s = String::new();\n    s.push(ch as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpwiux9qt3.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8 + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpuee33a0d.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) + 65;\n    if res > 90 {\n        res = res - 26;\n    }\n    let res = res as u8 as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpvbllfrcy.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let chr = ch as char;\n    let mut strr = String::new();\n    strr.push(chr);\n    strr\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp62t4wcn3.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = sum % 26;\n    res += 65;\n    let res = res as u8 as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp3bl_wr57.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let res = res as u8;\n    let res = res + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpy6u__u_8.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = (sum % 26) as u8;\n    res = res + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpisezmdsd.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpoyjtebct.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res as u8 + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpge6wx4eb.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let ch = ch as char;\n    let mut s = String::new();\n    s.push(ch);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpepxrg7xy.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let res = res + 65;\n    let res = res as u8 as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpunnrrawu.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let mut res_str = String::new();\n    res_str.push(res as char);\n    res_str\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp2b54ct90.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8 + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpnjk0w82w.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for c in strr.chars() {\n        sum += c as u32;\n    }\n    let res = sum % 26;\n    let res = res as u8;\n    let res = res + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpb6lnlerw.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8 + 65;\n    if ch > 90 {\n        ch = ch - 26;\n    }\n    let ch = ch as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpmerzvwlq.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpxm74vowg.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpxm74vowg.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let mut s = String::new();\n    s.push(res as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp36mask3r.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    let mut result = String::new();\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    result.push((sum + 65) as char);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpi3461i6n.rs:6:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let ch = ch as char;\n    let mut s = String::new();\n    s.push(ch);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpepxrg7xy.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let mut s = String::new();\n    s.push(res as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp36mask3r.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let ch = (sum % 26 + 65) as u8;\n    let ch = ch as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpuen77ouu.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = sum % 26;\n    let mut ch = (res + 65) as u8;\n    let mut s = String::new();\n    s.push(ch as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpsia1ytkt.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpxm74vowg.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 97;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpye1btsx7.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8 + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp0r8lz7qd.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let mut result = String::new();\n    result.push((sum + 65) as char);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpagzvd5ya.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let ch = ch as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp6excpsml.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = sum % 26;\n    res += 65;\n    let res = res as u8 as char;\n    let mut res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmprt3k7jm0.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut ch = sum % 26;\n    ch += 65;\n    let ch = ch as u8 as char;\n    let mut strr = String::new();\n    strr.push(ch);\n    strr\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmph4zf7opv.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res + 65;\n    let res = res as u8 as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpytdwcfnr.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = sum % 26;\n    res += 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpp2padeo3.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26) as u8 + 97;\n    let ch = ch as char;\n    format!(\"{}\", ch)\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmplcueefz3.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let res = res + 97;\n    let res = res as u8 as char;\n    let mut res = res.to_string();\n    res.push('\\n');\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\\n\"`,\n right: `\"f\"`', /tmp/tmpk7fvxej7.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = sum % 26;\n    let mut ch = (res + 97) as u8;\n    let mut chr = ch as char;\n    let mut strr = String::new();\n    strr.push(chr);\n    strr\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpjkbcn60w.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for c in strr.chars() {\n        sum += c as u8;\n    }\n    let res = (sum % 26) as u8;\n    return (res + 65) as char;\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpr7o2fzdz.rs:8:12\n  |\n2 | fn get_Char(strr: String) -> String {\n  |                              ------ expected `String` because of return type\n...\n8 |     return (res + 65) as char;\n  |            ^^^^^^^^^^^^^^^^^^ expected struct `String`, found `char`\n  |\nhelp: try using a conversion method\n  |\n8 |     return ((res + 65) as char).to_string();\n  |            +                  +++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpoyjtebct.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let res = res + 65;\n    let res = res as u8 as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp_efi4uqr.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res as u8 + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpvvku5gzk.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26 + 97) as u8;\n    return ch as char.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "error: casts cannot be followed by a method call\n --> /tmp/tmp3gxunb8c.rs:8:12\n  |\n8 |     return ch as char.to_string();\n  |            ^^^^^^^^^^\n  |\nhelp: try surrounding the expression in parentheses\n  |\n8 |     return (ch as char).to_string();\n  |            +          +\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let mut s = String::new();\n    s.push(res as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp36mask3r.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum: u32 = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = sum % 26;\n    let mut ch = 'a' as u32;\n    ch += res;\n    let ch = ch as u8 as char;\n    return ch.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpys819gzn.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpfd6ki481.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum: i32 = 0;\n    for i in strr.chars() {\n        sum += i as i32;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp9t6w735x.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum: i32 = 0;\n    for i in strr.chars() {\n        sum += i as i32;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpy_7wya2e.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let chr = ch as char;\n    let mut strr = String::new();\n    strr.push(chr);\n    strr\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp36vgm7hx.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let sum = sum + 65;\n    let sum = sum as u8;\n    let sum = sum as char;\n    let sum = sum.to_string();\n    sum\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpr3f3t0bh.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = sum % 26;\n    ch += 65;\n    let ch = ch as u8 as char;\n    let mut s = String::new();\n    s.push(ch);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpv2b0_fta.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8 + 65;\n    return res.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"73\"`,\n right: `\"f\"`', /tmp/tmp98uec300.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut s = String::new();\n    s.push(((sum % 26) + 65) as u8 as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp8wnv8kkg.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let mut ch = (res + 65) as u8;\n    let mut s = String::new();\n    s.push(ch as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp1lk0h_7k.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let ch = (res + 97) as u8;\n    let ch = ch as char;\n    let mut s = String::new();\n    s.push(ch);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpbqmoq3z7.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    return res.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"73\"`,\n right: `\"f\"`', /tmp/tmp1d6udr9b.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = sum % 26;\n    res += 65;\n    let res = res as u8 as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpv8ezryf0.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res + 97;\n    let res = res as char;\n    let mut res = res.to_string();\n    res.push('\\n');\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp8wl1cthc.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = sum % 26;\n    if res == 0 {\n        res = 26;\n    }\n    let mut ch = (res + 64) as u8;\n    let mut s = String::new();\n    s.push(ch as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"H\"`,\n right: `\"f\"`', /tmp/tmps09edby8.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpfd6ki481.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for c in strr.chars() {\n        sum += c as u32;\n    }\n    let ch = (sum % 26 + 65) as u8;\n    return format!(\"{}\", ch as char);\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpwrjzcd7c.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26 + 65) as u8;\n    let ch = ch as char;\n    let mut s = String::new();\n    s.push(ch);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpvuiimpn3.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let res = (sum + 97) as u8;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmphbixfp8w.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = sum % 26;\n    let mut ch = res as u8 + 65;\n    let mut strr = String::new();\n    strr.push(ch as char);\n    strr\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp3n4jpkvr.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpz40h_1ck.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let ch = (sum + 97) as u8;\n    let ch = ch as char;\n    let mut s = String::new();\n    s.push(ch);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmprfa27klq.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26) as u8 + 97;\n    let c = ch as char;\n    c.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp07htlso1.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let ch = (sum % 26 + 'a' as u32) as u8 as char;\n    let mut s = String::new();\n    s.push(ch);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpgsj4z9in.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut result = (sum % 26) as u8 + 65;\n    let mut res = String::new();\n    res.push(result as char);\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpe26ffmcy.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26) as u8 + 65;\n    let ch = ch as char;\n    format!(\"{}\", ch)\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpz84p1vir.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let ch = ch as char;\n    let mut s = String::new();\n    s.push(ch);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpepxrg7xy.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let ch = (sum % 26 + 97) as u8;\n    let chr = ch as char;\n    let strr = chr.to_string();\n    strr\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpu8n8zd9y.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let mut s = String::new();\n    s.push(res as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpak9ig3_4.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = sum % 26;\n    res += 65;\n    let res = res as u8 as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpv8ezryf0.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let ch = (sum % 26 + 97) as u8;\n    let ch = ch as char;\n    let mut s = String::new();\n    s.push(ch);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmplw_sp5dj.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpfd6ki481.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8 + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpuee33a0d.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as i32;\n    }\n    let res = sum % 26;\n    let res = (res + 65) as u8;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp1b5o8g1k.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let s = String::from_utf8(vec![ch]).unwrap();\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp20pw5op0.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut ch = (sum % 26) as u8 + 97;\n    let mut s = String::new();\n    s.push(ch as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpfndc0at6.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum = sum + i as u32;\n    }\n    let sum = sum % 26;\n    let mut res = String::new();\n    res.push((sum + 65) as u8 as char);\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpkiroxrbi.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum: i32 = 0;\n    for i in strr.chars() {\n        sum += i as i32;\n    }\n    let res = sum % 26;\n    let mut res_str = String::new();\n    res_str.push((res + 97) as u8 as char);\n    res_str\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpq533982d.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let mut s = String::new();\n    s.push(ch as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp46eth3e0.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let c = (sum % 26) as u8 + 'a' as u8;\n    return c.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"105\"`,\n right: `\"f\"`', /tmp/tmpqxuzzr_4.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = sum % 26;\n    res += 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpp2padeo3.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8 + 65;\n    return res.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"73\"`,\n right: `\"f\"`', /tmp/tmp98uec300.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for c in strr.chars() {\n        sum += c as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let mut res_str = String::new();\n    res_str.push(res as char);\n    res_str\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp81s36zoj.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = sum % 26;\n    res += 65;\n    let res = res as u8 as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp3bl_wr57.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let sum = sum % 26;\n    let mut result = String::new();\n    result.push((sum + 65) as u8 as char);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmph6s0clo_.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 97;\n    let mut s = String::new();\n    s.push(ch as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpg077ulct.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let ch = res + 65;\n    let chr = ch as char;\n    let res = chr.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpe_wyfgu6.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let ch = (sum + 65) as u8 as char;\n    let mut s = String::new();\n    s.push(ch);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpixszojlb.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = sum % 26;\n    res += 65;\n    let res = res as u8 as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpv8ezryf0.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let sum = sum + 65;\n    let sum = sum as u8 as char;\n    let sum = sum.to_string();\n    sum\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpgn4psbb9.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8 + 65;\n    let mut s = String::new();\n    s.push(res as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp3h8e6uvi.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = sum % 26;\n    res += 65;\n    let res = res as u8 as char;\n    let mut result = String::new();\n    result.push(res);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp0xuw_91t.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8 + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpnjk0w82w.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let mut s = String::new();\n    s.push(res as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp36mask3r.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = sum % 26;\n    res += 65;\n    let res = res as u8 as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp7gvmwx8k.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = sum % 26;\n    res += 65;\n    let mut s = String::new();\n    s.push(res as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpqb9ydlt4.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    let mut res = String::new();\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let rem = sum % 26;\n    res.push((rem + 65) as u8 as char);\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpqa0zvvmd.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26) as u8 + 65;\n    let ch = ch as char;\n    let mut s = String::new();\n    s.push(ch);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpib7lbk0i.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26) as u8;\n    let ch = ch + 65;\n    let ch = ch as char;\n    let mut s = String::new();\n    s.push(ch);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpzkyo2f6h.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let chr = ch as char;\n    let mut strr = String::new();\n    strr.push(chr);\n    strr\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp36vgm7hx.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8 + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpnjk0w82w.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let sum = sum + 65;\n    let sum = sum as u8 as char;\n    let sum = sum.to_string();\n    sum\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpgn4psbb9.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let ch = (sum + 65) as u8;\n    let ch = ch as char;\n    let ch = ch.to_string();\n    ch\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpafz9ylyt.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8 + 65;\n    return res.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"73\"`,\n right: `\"f\"`', /tmp/tmp98uec300.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let ch = ch as char;\n    let mut s = String::new();\n    s.push(ch);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpepxrg7xy.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8 + 65;\n    return res.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"73\"`,\n right: `\"f\"`', /tmp/tmp98uec300.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let mut ch = 'a';\n    for _i in 0..sum {\n        ch = ch.next().unwrap();\n    }\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "error[E0599]: no method named `next` found for type `char` in the current scope\n  --> /tmp/tmpgtobfjnt.rs:10:17\n   |\n10 |         ch = ch.next().unwrap();\n   |                 ^^^^ method not found in `char`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let res = res + 97;\n    let res = res as u8 as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpgbw99ugu.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpoyjtebct.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let mut result = String::new();\n    result.push(res as char);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509674,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp1q6tj_2f.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum = sum + i as u32;\n    }\n    let mut ch = (sum % 26) as u8 + 65;\n    let mut s = String::new();\n    s.push(ch as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp0lgq2mci.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let c = (sum + 65) as u8;\n    let c = c as char;\n    let mut s = String::new();\n    s.push(c);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpa9bljgj8.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let ch = ch as char;\n    let mut s = String::new();\n    s.push(ch);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpepxrg7xy.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26 + 65) as u8;\n    let ch = ch as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmppzzale0q.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26) as u8 + 97;\n    let ch = ch as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp3tfhzr8z.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let res = (res + 97) as u8;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmp3_jvnhv3.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}