{
  "name": "mbpp_223_is_majority",
  "language": "rs",
  "prompt": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut left = 0;\n    let mut right = n - 1;\n    let mut mid = 0;\n    while left <= right {\n        mid = (left + right) / 2;\n        if arr[mid as usize] == x {\n            break;\n        } else if arr[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    if left > right {\n        return false;\n    }\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpc8szcnmp.rs:21:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut i = 0;\n    let mut j = n - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if arr[mid as usize] == x {\n            break;\n        } else if arr[mid as usize] > x {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpdehq44fd.rs:18:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count: isize = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmppqlpdj8j.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpds58zubq.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in arr {\n        if i == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n/2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpal7an4e4.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count: isize = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmppqlpdj8j.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n/2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpg8itk1qv.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in arr {\n        if i == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpsgigxvax.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpsgigxvax.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpsgigxvax.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut left = 0;\n    let mut right = n - 1;\n    let mut mid = 0;\n    while left <= right {\n        mid = (left + right) / 2;\n        if arr[mid as usize] == x {\n            break;\n        } else if arr[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpah91_zdq.rs:18:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut l = 0;\n    let mut r = n - 1;\n    let mut mid = 0;\n    while l <= r {\n        mid = (l + r) / 2;\n        if arr[mid as usize] == x {\n            break;\n        } else if arr[mid as usize] < x {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    if l > r {\n        return false;\n    }\n    let mut count = 0;\n    let mut i = mid;\n    while i >= 0 && arr[i as usize] == x {\n        count += 1;\n        i -= 1;\n    }\n    i = mid + 1;\n    while i < n && arr[i as usize] == x {\n        count += 1;\n        i += 1;\n    }\n    return count > n / 2;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpsgigxvax.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n/2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpal7an4e4.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpsgigxvax.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp12r9ssex.rs:5:12\n  |\n5 |         if arr[i] == x {\n  |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    let mut i = 0;\n    while i < n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n        i += 1;\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpy5gyq369.rs:6:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut left = 0;\n    let mut right = n - 1;\n    let mut mid = 0;\n    while left <= right {\n        mid = (left + right) / 2;\n        if arr[mid as usize] == x {\n            break;\n        } else if arr[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpah91_zdq.rs:18:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n/2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp0kl0ookp.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut i = 0;\n    let mut j = n - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if arr[mid as usize] == x {\n            break;\n        } else if arr[mid as usize] < x {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n    }\n    if mid == 0 {\n        return false;\n    }\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    count > n / 2\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmptqc6ivte.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n/2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpal7an4e4.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpsgigxvax.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in arr {\n        if i == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpsgigxvax.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in arr {\n        if i == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in arr.iter() {\n        if *i == x {\n            count += 1;\n        }\n    }\n    count > n / 2\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    if n == 0 {\n        return false;\n    }\n\n    let mid = n / 2;\n    if arr[mid as usize] == x {\n        if (mid + 1) > (n / 2) {\n            return true;\n        }\n        return is_majority(arr[mid as usize..].to_vec(), n - mid - 1, x);\n    } else if arr[mid as usize] > x {\n        return is_majority(arr[..mid as usize].to_vec(), mid, x);\n    } else {\n        return is_majority(arr[(mid + 1) as usize..].to_vec(), n - mid - 1, x);\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpi52co2k2.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpds58zubq.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp5sgx283j.rs:5:12\n  |\n5 |         if arr[i] == x {\n  |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in arr {\n        if i == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpds58zubq.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpds58zubq.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count: isize = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmppqlpdj8j.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut left = 0;\n    let mut right = n - 1;\n    let mut mid = 0;\n    while left <= right {\n        mid = (left + right) / 2;\n        if arr[mid as usize] == x {\n            break;\n        } else if arr[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    let mut count = 0;\n    let mut i = mid;\n    while i >= 0 && arr[i as usize] == x {\n        count += 1;\n        i -= 1;\n    }\n    i = mid + 1;\n    while i < n && arr[i as usize] == x {\n        count += 1;\n        i += 1;\n    }\n    count > n / 2\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut l = 0;\n    let mut r = n - 1;\n    let mut mid = (l + r) / 2;\n    while l <= r {\n        if arr[mid as usize] == x {\n            break;\n        } else if arr[mid as usize] < x {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n        mid = (l + r) / 2;\n    }\n    if l > r {\n        return false;\n    }\n    let mut left = mid;\n    let mut right = mid;\n    while left > 0 && arr[left as usize - 1] == x {\n        left -= 1;\n    }\n    while right < n - 1 && arr[right as usize + 1] == x {\n        right += 1;\n    }\n    if right - left + 1 > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpds58zubq.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut l = 0;\n    let mut r = n - 1;\n    let mut mid = 0;\n    while l <= r {\n        mid = (l + r) / 2;\n        if arr[mid as usize] == x && (mid == 0 || arr[(mid - 1) as usize] != x) {\n            break;\n        }\n        if arr[mid as usize] < x {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    if l > r {\n        return false;\n    }\n    let count = n - mid;\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpyypx7nak.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpsgigxvax.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpsgigxvax.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut left = 0;\n    let mut right = n - 1;\n    let mut mid = 0;\n    while left <= right {\n        mid = (left + right) / 2;\n        if arr[mid as usize] == x {\n            break;\n        } else if arr[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    if left > right {\n        return false;\n    }\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    count > n / 2\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp39v2p10i.rs:21:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut l = 0;\n    let mut r = n - 1;\n    let mut mid = 0;\n    while l <= r {\n        mid = (l + r) / 2;\n        if arr[mid] == x {\n            break;\n        } else if arr[mid] < x {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    if l > r {\n        return false;\n    }\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmppvj_oy3p.rs:8:12\n  |\n8 |         if arr[mid] == x {\n  |            ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmppvj_oy3p.rs:10:19\n   |\n10 |         } else if arr[mid] < x {\n   |                   ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmppvj_oy3p.rs:21:12\n   |\n21 |         if arr[i] == x {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpsgigxvax.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut left = 0;\n    let mut right = n - 1;\n    let mut mid = 0;\n    while left <= right {\n        mid = (left + right) / 2;\n        if arr[mid as usize] == x {\n            break;\n        } else if arr[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    if left > right {\n        return false;\n    }\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmprkufnjoj.rs:21:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut left = 0;\n    let mut right = n - 1;\n    let mut mid = 0;\n    while left <= right {\n        mid = (left + right) / 2;\n        if arr[mid as usize] == x {\n            break;\n        } else if arr[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    if left > right {\n        return false;\n    }\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmprkufnjoj.rs:21:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpsgigxvax.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpds58zubq.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpsgigxvax.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in arr {\n        if i == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    return count > n / 2;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3a05scxw.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut l = 0;\n    let mut r = n - 1;\n    let mut mid = 0;\n    while l <= r {\n        mid = (l + r) / 2;\n        if arr[mid as usize] == x {\n            break;\n        } else if arr[mid as usize] < x {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    if l > r {\n        return false;\n    }\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpgzc27sl5.rs:21:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp12r9ssex.rs:5:12\n  |\n5 |         if arr[i] == x {\n  |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n        if count > n/2 {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpiasqfr63.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in arr {\n        if i == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut i = 0;\n    let mut j = n - 1;\n    let mut mid = (i + j) / 2;\n    while i <= j {\n        if arr[mid as usize] == x {\n            break;\n        } else if arr[mid as usize] < x {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n        mid = (i + j) / 2;\n    }\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp2fpwglng.rs:18:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut l = 0;\n    let mut r = n;\n    let mut mid = 0;\n    while l < r {\n        mid = (l + r) / 2;\n        if arr[mid as usize] == x {\n            break;\n        } else if arr[mid as usize] < x {\n            l = mid + 1;\n        } else {\n            r = mid;\n        }\n    }\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmplj09dkew.rs:18:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in arr {\n        if i == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpds58zubq.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count: isize = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpwll2137j.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in arr {\n        if i == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut left = 0;\n    let mut right = n - 1;\n    let mut mid = 0;\n    while left <= right {\n        mid = (left + right) / 2;\n        if arr[mid as usize] == x {\n            break;\n        } else if arr[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    let mut count = 0;\n    let mut i = mid;\n    while i >= 0 && arr[i as usize] == x {\n        count += 1;\n        i -= 1;\n    }\n    i = mid + 1;\n    while i < n && arr[i as usize] == x {\n        count += 1;\n        i += 1;\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut l = 0;\n    let mut r = n - 1;\n    let mut mid = 0;\n    let mut i = 0;\n    while l <= r {\n        mid = (l + r) / 2;\n        if arr[mid as usize] == x {\n            i = mid;\n            break;\n        } else if arr[mid as usize] < x {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    if arr[i as usize] == x && (i + n / 2) < n && arr[(i + n / 2) as usize] == x {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpm5xs31jl.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut l = 0;\n    let mut r = n - 1;\n    let mut mid = (l + r) / 2;\n    while l <= r {\n        mid = (l + r) / 2;\n        if arr[mid as usize] == x {\n            break;\n        } else if arr[mid as usize] < x {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    if arr[mid as usize] == x {\n        let mut count = 0;\n        for i in 0..n {\n            if arr[i as usize] == x {\n                count += 1;\n            }\n        }\n        if count > n / 2 {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp76rjjuap.rs:19:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in arr {\n        if i == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpsgigxvax.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut left = 0;\n    let mut right = n - 1;\n    let mut mid = 0;\n\n    while left <= right {\n        mid = (left + right) / 2;\n        if arr[mid as usize] == x {\n            break;\n        } else if arr[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    if left > right {\n        return false;\n    }\n\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n\n    if count > n / 2 {\n        return true;\n    }\n\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpc85xcuzd.rs:24:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpsgigxvax.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut i = 0;\n    let mut j = n - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if arr[mid as usize] == x {\n            break;\n        } else if arr[mid as usize] < x {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n    }\n    let count = arr.iter().filter(|&e| *e == x).count();\n    if count > (n / 2) as usize {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpsgigxvax.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpsgigxvax.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpsgigxvax.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut first_index = -1;\n    let mut last_index = -1;\n    let mut mid = n / 2;\n    let mut low = 0;\n    let mut high = n - 1;\n    while low <= high {\n        if arr[mid as usize] == x {\n            first_index = mid;\n            high = mid - 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n        mid = (low + high) / 2;\n    }\n    if first_index == -1 {\n        return false;\n    }\n    low = 0;\n    high = n - 1;\n    mid = n / 2;\n    while low <= high {\n        if arr[mid as usize] == x {\n            last_index = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n        mid = (low + high) / 2;\n    }\n    if last_index - first_index + 1 > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpds58zubq.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    let mut i = 0;\n    while i < n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n        i += 1;\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpy5gyq369.rs:6:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpsgigxvax.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n/2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpal7an4e4.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut i = 0;\n    let mut j = n - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if arr[mid as usize] == x {\n            break;\n        } else if arr[mid as usize] < x {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n    }\n    if arr[mid as usize] != x {\n        return false;\n    }\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    return count > n / 2;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmphb84uyhr.rs:21:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpsgigxvax.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpds58zubq.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpsgigxvax.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpds58zubq.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpds58zubq.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut l = 0;\n    let mut r = n - 1;\n    let mut mid = (l + r) / 2;\n    while l <= r {\n        if arr[mid] == x {\n            if (mid + n / 2) < n && arr[mid + n as usize / 2] == x {\n                return true;\n            } else {\n                return false;\n            }\n        } else if arr[mid] < x {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n        mid = (l + r) / 2;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp8v7xj_mw.rs:7:12\n  |\n7 |         if arr[mid] == x {\n  |            ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp8v7xj_mw.rs:8:47\n  |\n8 |             if (mid + n / 2) < n && arr[mid + n as usize / 2] == x {\n  |                                               ^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot add `usize` to `isize`\n --> /tmp/tmp8v7xj_mw.rs:8:45\n  |\n8 |             if (mid + n / 2) < n && arr[mid + n as usize / 2] == x {\n  |                                             ^ no implementation for `isize + usize`\n  |\n  = help: the trait `Add<usize>` is not implemented for `isize`\n  = help: the following other types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp8v7xj_mw.rs:8:37\n  |\n8 |             if (mid + n / 2) < n && arr[mid + n as usize / 2] == x {\n  |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp8v7xj_mw.rs:13:19\n   |\n13 |         } else if arr[mid] < x {\n   |                   ^^^^^^^^ s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp3g1jks9d.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}