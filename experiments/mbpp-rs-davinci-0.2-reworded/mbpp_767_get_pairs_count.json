{
  "name": "mbpp_767_get_pairs_count",
  "language": "rs",
  "prompt": "/// Write a rsthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a vector of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut set = HashSet::new();\n\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if set.contains(&diff) {\n            count += 1;\n        }\n        set.insert(arr[i]);\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map[&diff];\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map[&arr[i]] + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += map[&(sum - arr[i])];\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map[&arr[i]] + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += map[&(sum - i)];\n        }\n        if map.contains_key(&i) {\n            map.insert(i, map[&i] + 1);\n        } else {\n            map.insert(i, 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += 1;\n        }\n        map.insert(i, 1);\n    }\n    count",
    "    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] + arr[j] == sum {\n            count += 1;\n            i += 1;\n            j -= 1;\n        } else if arr[i] + arr[j] < sum {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in arr {\n        let complement = sum - i;\n        if map.contains_key(&complement) {\n            count += 1;\n        }\n        map.insert(i, i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += map[&(sum - arr[i])];\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map[&arr[i]] + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map[&diff];\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map[&arr[i]] + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&arr[i]) {\n            count += 1;\n        } else {\n            map.insert(sum - arr[i], i);\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&arr[i]) {\n            count += map[&arr[i]];\n        }\n        map.insert(sum - arr[i], map.get(&(sum - arr[i])).unwrap_or(&0) + 1);\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i as isize);\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += map[&(sum - arr[i])];\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map[&arr[i]] + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map.get(&diff).unwrap();\n        }\n        let val = map.entry(arr[i]).or_insert(0);\n        *val += 1;\n    }\n    return count;",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map[&diff];\n        }\n        let count = map.entry(arr[i]).or_insert(0);\n        *count += 1;\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += 1;\n        }\n        map.insert(i, 1);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if hash_map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        hash_map.insert(arr[i], i as isize);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map[&diff];\n        }\n        let val = map.entry(arr[i]).or_insert(0);\n        *val += 1;\n    }\n    count",
    "    let mut count = 0;\n    let mut set: HashSet<isize> = HashSet::new();\n    for i in arr {\n        if set.contains(&(sum - i)) {\n            count += 1;\n        }\n        set.insert(i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map[&diff];\n        }\n        let count = map.entry(arr[i]).or_insert(0);\n        *count += 1;\n    }\n    count",
    "    let mut count = 0;\n    let mut set = HashSet::new();\n    for i in arr {\n        if set.contains(&(sum - i)) {\n            count += 1;\n        }\n        set.insert(i);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += 1;\n        }\n        map.insert(i, 1);\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map[&diff];\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map[&arr[i]] + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += map[&(sum - i)];\n        }\n        if map.contains_key(&i) {\n            map.insert(i, map[&i] + 1);\n        } else {\n            map.insert(i, 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += map[&(sum - i)];\n        }\n        if map.contains_key(&i) {\n            map.insert(i, map[&i] + 1);\n        } else {\n            map.insert(i, 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&arr[i]) {\n            count += 1;\n        } else {\n            map.insert(sum - arr[i], i);\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += 1;\n        }\n        map.insert(i, 1);\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += map[&(sum - i)];\n        }\n        if map.contains_key(&i) {\n            map.insert(i, map[&i] + 1);\n        } else {\n            map.insert(i, 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] + arr[j] == sum {\n            count += 1;\n            i += 1;\n            j -= 1;\n        } else if arr[i] + arr[j] < sum {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut set = HashSet::new();\n    for i in arr {\n        if set.contains(&(sum - i)) {\n            count += 1;\n        }\n        set.insert(i);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    for i in arr {\n        if hash_map.contains_key(&(sum - i)) {\n            count += 1;\n        }\n        hash_map.insert(i, true);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] + arr[j] == sum {\n            count += 1;\n            i += 1;\n            j -= 1;\n        } else if arr[i] + arr[j] < sum {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += 1;\n        }\n        map.insert(i, 1);\n    }\n    count",
    "    let mut count = 0;\n    let mut set = HashSet::new();\n    for i in arr {\n        if set.contains(&(sum - i)) {\n            count += 1;\n        }\n        set.insert(i);\n    }\n    count",
    "    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] + arr[j] == sum {\n            count += 1;\n            i += 1;\n            j -= 1;\n        } else if arr[i] + arr[j] < sum {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut set = HashSet::new();\n    for i in arr {\n        if set.contains(&(sum - i)) {\n            count += 1;\n        }\n        set.insert(i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += 1;\n        }\n        map.insert(i, 1);\n    }\n    count",
    "    let mut count = 0isize;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i as isize);\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i as isize);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        let diff = sum - i;\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(i, 1);\n    }\n    count",
    "    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] + arr[j] == sum {\n            count += 1;\n            i += 1;\n            j -= 1;\n        } else if arr[i] + arr[j] < sum {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] + arr[j] == sum {\n            count += 1;\n            i += 1;\n            j -= 1;\n        } else if arr[i] + arr[j] < sum {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        let diff = sum - i;\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(i, 1);\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i as isize);\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map.get(&diff).unwrap();\n        }\n        let count = map.entry(arr[i]).or_insert(0);\n        *count += 1;\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map[&diff];\n        }\n        let count = map.entry(arr[i]).or_insert(0);\n        *count += 1;\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut set: HashSet<isize> = HashSet::new();\n    for i in 0..arr.len() {\n        if set.contains(&(sum - arr[i])) {\n            count += 1;\n        }\n        set.insert(arr[i]);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += 1;\n        }\n        map.insert(i, 1);\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        let diff = sum - i;\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(i, 1);\n    }\n    count",
    "    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if hash_map.contains_key(&diff) {\n            count += 1;\n        }\n        hash_map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] + arr[j] == sum {\n            count += 1;\n            i += 1;\n            j -= 1;\n        } else if arr[i] + arr[j] < sum {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i as isize);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += map[&(sum - i)];\n        }\n        if map.contains_key(&i) {\n            map.insert(i, map[&i] + 1);\n        } else {\n            map.insert(i, 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = arr.len() - 1;\n    while i < j {\n        if arr[i] + arr[j] == sum {\n            count += 1;\n            i += 1;\n            j -= 1;\n        } else if arr[i] + arr[j] < sum {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += 1;\n        }\n        map.insert(i, 1);\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += map[&(sum - arr[i])];\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map[&arr[i]] + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += map.get(&(sum - i)).unwrap();\n        }\n        if map.contains_key(&i) {\n            map.insert(i, map.get(&i).unwrap() + 1);\n        } else {\n            map.insert(i, 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut set = HashSet::new();\n    for i in arr {\n        if set.contains(&(sum - i)) {\n            count += 1;\n        }\n        set.insert(i);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += map[&(sum - arr[i])];\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map[&arr[i]] + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += map[&(sum - i)];\n        }\n        let entry = map.entry(i).or_insert(0);\n        *entry += 1;\n    }\n    count",
    "    let mut count = 0;\n    let mut set = HashSet::new();\n    for i in arr {\n        if set.contains(&(sum - i)) {\n            count += 1;\n        }\n        set.insert(i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += map[&(sum - arr[i])];\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map[&arr[i]] + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += map[&(sum - arr[i])];\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map[&arr[i]] + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut set = HashSet::new();\n    for i in arr {\n        if set.contains(&(sum - i)) {\n            count += 1;\n        }\n        set.insert(i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map.get(&diff).unwrap();\n        }\n        let val = map.entry(arr[i]).or_insert(0);\n        *val += 1;\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut set = HashSet::new();\n    for i in arr {\n        let diff = sum - i;\n        if set.contains(&diff) {\n            count += 1;\n        }\n        set.insert(i);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] + arr[j] == sum {\n            count += 1;\n            i += 1;\n            j -= 1;\n        } else if arr[i] + arr[j] < sum {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i as isize);\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map.get(&diff).unwrap();\n        }\n        let count = map.entry(arr[i]).or_insert(0);\n        *count += 1;\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += 1;\n        }\n        map.insert(i, 1);\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += map[&(sum - i)];\n        }\n        if map.contains_key(&i) {\n            map.insert(i, map[&i] + 1);\n        } else {\n            map.insert(i, 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut set = HashSet::new();\n    for i in arr {\n        if set.contains(&(sum - i)) {\n            count += 1;\n        }\n        set.insert(i);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut s = HashSet::new();\n\n    for i in arr {\n        let diff = sum - i;\n        if s.contains(&diff) {\n            count += 1;\n        }\n        s.insert(i);\n    }\n\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&arr[i]) {\n            count += 1;\n        }\n        map.insert(sum - arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += map[&(sum - arr[i])];\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map[&arr[i]] + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += map[&(sum - arr[i])];\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map[&arr[i]] + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in arr.iter() {\n        if map.contains_key(i) {\n            let val = map.get(i).unwrap();\n            map.insert(*i, val + 1);\n        } else {\n            map.insert(*i, 1);\n        }\n    }\n    for i in arr.iter() {\n        let diff = sum - i;\n        if map.contains_key(&diff) {\n            count += map.get(&diff).unwrap();\n        }\n        if diff == *i {\n            count -= 1;\n        }\n    }\n    count / 2",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += map[&(sum - arr[i])];\n        }\n        let mut value = 1;\n        if map.contains_key(&arr[i]) {\n            value = map[&arr[i]] + 1;\n        }\n        map.insert(arr[i], value);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&arr[i]) {\n            count += 1;\n        }\n        map.insert(sum - arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += map[&(sum - i)];\n        }\n        if map.contains_key(&i) {\n            map.insert(i, map[&i] + 1);\n        } else {\n            map.insert(i, 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += 1;\n        }\n        map.insert(i, 1);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map[&diff];\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map[&arr[i]] + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] + arr[j] == sum {\n            count += 1;\n            i += 1;\n            j -= 1;\n        } else if arr[i] + arr[j] < sum {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] + arr[j] == sum {\n            count += 1;\n            i += 1;\n            j -= 1;\n        } else if arr[i] + arr[j] < sum {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut set = HashSet::new();\n    for i in arr {\n        let diff = sum - i;\n        if set.contains(&diff) {\n            count += 1;\n        }\n        set.insert(i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in arr {\n        let diff = sum - i;\n        if map.contains_key(&diff) {\n            count += map[&diff];\n        }\n        let entry = map.entry(i).or_insert(0);\n        *entry += 1;\n    }\n    count",
    "    let mut count = 0;\n    let mut set: HashSet<isize> = HashSet::new();\n    for i in arr {\n        if set.contains(&(sum - i)) {\n            count += 1;\n        }\n        set.insert(i);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += 1;\n        }\n        map.insert(i, 1);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in arr {\n        let complement = sum - i;\n        if map.contains_key(&complement) {\n            count += map[&complement];\n        }\n        if map.contains_key(&i) {\n            map.insert(i, map[&i] + 1);\n        } else {\n            map.insert(i, 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut set = HashSet::new();\n    for i in arr {\n        if set.contains(&(sum - i)) {\n            count += 1;\n        }\n        set.insert(i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let complement = sum - arr[i];\n        if map.contains_key(&complement) {\n            count += map.get(&complement).unwrap();\n        }\n        let value = map.entry(arr[i]).or_insert(0);\n        *value += 1;\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += map[&(sum - i)];\n        }\n        let entry = map.entry(i).or_insert(0);\n        *entry += 1;\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i as isize);\n    }\n    count",
    "    let mut count = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if hash_map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        hash_map.insert(arr[i], 1);\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += 1;\n        }\n        map.insert(i, 1);\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map[&diff];\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map[&arr[i]] + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n\n        if map.contains_key(&diff) {\n            count += map[&diff];\n        }\n\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map[&arr[i]] + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += map.get(&(sum - arr[i])).unwrap();\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map.get(&arr[i]).unwrap() + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] + arr[j] == sum {\n            count += 1;\n            i += 1;\n            j -= 1;\n        } else if arr[i] + arr[j] < sum {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&arr[i]) {\n            count += 1;\n        } else {\n            map.insert(sum - arr[i], i);\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut set = HashSet::new();\n    for i in arr {\n        let diff = sum - i;\n        if set.contains(&diff) {\n            count += 1;\n        }\n        set.insert(i);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map[&diff];\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map[&arr[i]] + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&arr[i]) {\n            count += 1;\n        } else {\n            map.insert(sum - arr[i], 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr.iter() {\n        let diff = sum - i;\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(i, 1);\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map.get(&diff).unwrap();\n        }\n        let val = map.entry(arr[i]).or_insert(0);\n        *val += 1;\n    }\n    count",
    "    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] + arr[j] == sum {\n            count += 1;\n            i += 1;\n            j -= 1;\n        } else if arr[i] + arr[j] < sum {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map[&diff];\n        }\n        let val = map.entry(arr[i]).or_insert(0);\n        *val += 1;\n    }\n    count",
    "    let mut count = 0;\n    let mut set: HashSet<isize> = HashSet::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if set.contains(&diff) {\n            count += 1;\n        }\n        set.insert(arr[i]);\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map[&diff];\n        }\n        let count = map.entry(arr[i]).or_insert(0);\n        *count += 1;\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map[&diff];\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map[&arr[i]] + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut set: HashSet<isize> = HashSet::new();\n    for i in 0..arr.len() {\n        if set.contains(&(sum - arr[i])) {\n            count += 1;\n        }\n        set.insert(arr[i]);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        let complement = sum - i;\n        if map.contains_key(&complement) {\n            count += 1;\n        }\n        map.insert(i, 1);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map[&diff];\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map[&arr[i]] + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut set = HashSet::new();\n    for i in arr {\n        let diff = sum - i;\n        if set.contains(&diff) {\n            count += 1;\n        }\n        set.insert(i);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut set = HashSet::new();\n    for i in arr {\n        if set.contains(&(sum - i)) {\n            count += 1;\n        }\n        set.insert(i);\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += map.get(&(sum - arr[i])).unwrap();\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map.get(&arr[i]).unwrap() + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map[&diff];\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map[&arr[i]] + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map[&diff];\n        }\n        let count = map.entry(arr[i]).or_insert(0);\n        *count += 1;\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&arr[i]) {\n            count += 1;\n        } else {\n            map.insert(sum - arr[i], arr[i]);\n        }\n    }\n    count"
  ]
}