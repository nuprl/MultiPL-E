{
  "name": "mbpp_461_upper_ctr",
  "language": "rs",
  "prompt": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp69esff6z.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp69esff6z.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for ch in str.chars() {\n        if ch.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp8ct_us3i.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut count = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpxsmb2g7e.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for ch in str.chars() {\n        if ch.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp8ct_us3i.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut count: isize = 0;\n    for ch in str.chars() {\n        if ch.is_uppercase() {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp0rdpleer.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for i in str.chars() {\n        if i.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp3mblj4xh.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp69esff6z.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut count = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpxsmb2g7e.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for ch in str.chars() {\n        if ch.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp8ct_us3i.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for ch in str.chars() {\n        if ch.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp75jnau24.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut count = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpxsmb2g7e.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for ch in str.chars() {\n        if ch.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp8ct_us3i.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp69esff6z.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp69esff6z.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut count = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpxsmb2g7e.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp69esff6z.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut count = 0;\n    for ch in str.chars() {\n        if ch.is_uppercase() {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpj50cdavl.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp69esff6z.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp69esff6z.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for ch in str.chars() {\n        if ch.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp8ct_us3i.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp69esff6z.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut count = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpxsmb2g7e.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut count = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpxsmb2g7e.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut count = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpxsmb2g7e.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for ch in str.chars() {\n        if ch.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp8ct_us3i.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for ch in str.chars() {\n        if ch.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp75jnau24.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut count = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpxsmb2g7e.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp69esff6z.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp69esff6z.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for ch in str.chars() {\n        if ch.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp8ct_us3i.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for ch in str.chars() {\n        if ch.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp8ct_us3i.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut count = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpxsmb2g7e.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp69esff6z.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp69esff6z.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4mo9261n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}