{
  "name": "mbpp_644_reverse_Array_Upto_K",
  "language": "rs",
  "prompt": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpdzxezdvw.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        input.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpqk_dgqoa.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k as usize;\n    while i < j {\n        output.swap(i, j);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3wuf7oky.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        output.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        input.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    while i < k {\n        let temp = output[i];\n        output[i] = output[k as usize - 1];\n        output[k as usize - 1] = temp;\n        i += 1;\n        k -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpm6prwaq8.rs:6:20\n  |\n6 |         let temp = output[i];\n  |                    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpm6prwaq8.rs:7:9\n  |\n7 |         output[i] = output[k as usize - 1];\n  |         ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i = 0;\n    while i < k {\n        let temp = output[i];\n        output[i] = output[k - i - 1];\n        output[k - i - 1] = temp;\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpek13lx8g.rs:6:20\n  |\n6 |         let temp = output[i];\n  |                    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpek13lx8g.rs:7:9\n  |\n7 |         output[i] = output[k - i - 1];\n  |         ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpek13lx8g.rs:7:21\n  |\n7 |         output[i] = output[k - i - 1];\n  |                     ^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpek13lx8g.rs:8:9\n  |\n8 |         output[k - i - 1] = temp;\n  |         ^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i: isize = 0;\n    while i < k {\n        result.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        result.push(input[i as usize]);\n        i += 1;\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = Vec::new();\n    let mut i = 0;\n    while i < k {\n        output.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    while i < k {\n        let temp = output[i];\n        output[i] = output[k as usize - i as usize - 1];\n        output[k as usize - i as usize - 1] = temp;\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp83k1tn75.rs:6:20\n  |\n6 |         let temp = output[i];\n  |                    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp83k1tn75.rs:7:9\n  |\n7 |         output[i] = output[k as usize - i as usize - 1];\n  |         ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpdzxezdvw.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut k = k;\n    for i in input {\n        if k > 0 {\n            output.insert(0, i);\n            k -= 1;\n        } else {\n            output.push(i);\n        }\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpgdulfpo7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpgdulfpo7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i: isize = 0;\n    let mut j: isize = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpyi0z8_1q.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i: isize = 0;\n    let mut j: isize = k - 1;\n    while i < j {\n        let temp: isize = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    while i < k {\n        let temp = input[i];\n        input[i] = input[k];\n        input[k] = temp;\n        i += 1;\n        k -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpiofe6av5.rs:6:20\n  |\n6 |         let temp = input[i];\n  |                    ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpiofe6av5.rs:7:9\n  |\n7 |         input[i] = input[k];\n  |         ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpiofe6av5.rs:7:20\n  |\n7 |         input[i] = input[k];\n  |                    ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpiofe6av5.rs:8:9\n  |\n8 |         input[k] = temp;\n  |         ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut start = 0;\n    let mut end = k as usize;\n    while start < end {\n        let temp = output[start];\n        output[start] = output[end];\n        output[end] = temp;\n        start += 1;\n        end -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpcndv3102.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        input.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpqk_dgqoa.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k as usize;\n    while i < j {\n        let temp = output[i];\n        output[i] = output[j];\n        output[j] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpwljstq_j.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        output.push(input[k as usize - i as usize - 1]);\n        i = i + 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i = i + 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = result[i as usize];\n        result[i as usize] = result[j as usize];\n        result[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpjbzi1zm6.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i: isize = 0;\n    while i < k {\n        let temp = output[i as usize];\n        output[i as usize] = output[(k - i - 1) as usize];\n        output[(k - i - 1) as usize] = temp;\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpvy25n_uf.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        input.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpqk_dgqoa.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpgdulfpo7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = result[i as usize];\n        result[i as usize] = result[j as usize];\n        result[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpjbzi1zm6.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        output.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpdzxezdvw.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    for i in 0..k {\n        output[i as usize] = input[(k - i - 1) as usize];\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut start = 0;\n    let mut end = k;\n    while start < end {\n        let temp = input[start as usize];\n        input[start as usize] = input[end as usize];\n        input[end as usize] = temp;\n        start += 1;\n        end -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpdqkvms12.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        result.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp9zod25n2.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i = 0;\n    let mut j = k;\n    while i < k {\n        output.push(input[j as usize]);\n        i += 1;\n        j -= 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 5, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpb0a1x87m.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        result.push(input[(input.len() - 1 - i) as usize]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        result.push(input[i as usize]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpu9na1klv.rs:6:46\n  |\n6 |         result.push(input[(input.len() - 1 - i) as usize]);\n  |                                              ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n --> /tmp/tmpu9na1klv.rs:6:44\n  |\n6 |         result.push(input[(input.len() - 1 - i) as usize]);\n  |                                            ^ no implementation for `usize - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented for `usize`\n  = help: the following other types implement trait `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n            <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k as usize - 1;\n    while i < j {\n        let temp = input[i];\n        input[i] = input[j];\n        input[j] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = result[i as usize];\n        result[i as usize] = result[j as usize];\n        result[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpjbzi1zm6.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut k = k;\n    for i in 0..input.len() {\n        if k > 0 {\n            result.push(input[i]);\n            k = k - 1;\n        } else {\n            result.insert(0, input[i]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[6, 5, 1, 2, 3, 4]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmphgyasf7i.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i: isize = 0;\n    while i < k {\n        output.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i: isize = 0;\n    let mut j: isize = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpyi0z8_1q.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i: isize = 0;\n    while i < k {\n        result.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        result.push(input[i as usize]);\n        i += 1;\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    for i in 0..k {\n        output[i as usize] = input[(k - i - 1) as usize];\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k as usize;\n    while i < j {\n        output.swap(i, j);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3wuf7oky.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpgdulfpo7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = result[i as usize];\n        result[i as usize] = result[j as usize];\n        result[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpjbzi1zm6.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i: isize = 0;\n    while i < k {\n        let temp: isize = output[i as usize];\n        output[i as usize] = output[(k - i - 1) as usize];\n        output[(k - i - 1) as usize] = temp;\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp0bi1hqjp.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = result[i as usize];\n        result[i as usize] = result[j as usize];\n        result[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpjbzi1zm6.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpdzxezdvw.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        input.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpqk_dgqoa.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        result.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpuasfyhct.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpgdulfpo7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = result[i as usize];\n        result[i as usize] = result[j as usize];\n        result[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpjbzi1zm6.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k as usize;\n    while i < j {\n        input.swap(i, j);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp2c98kww5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        output.push(input[k as usize - 1 - i as usize]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    return output;\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    for i in 0..k {\n        output.push(input[k as usize - i as usize - 1]);\n    }\n    for i in k..input.len() as isize {\n        output.push(input[i as usize]);\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut k: usize = k as usize;\n    let mut input_length: usize = input.len();\n    while i < input_length {\n        if i < k {\n            output.push(input[k - 1]);\n            k -= 1;\n        } else {\n            output.push(input[i]);\n        }\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 3, 3, 4, 5, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp_hq32nbd.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        output.push(input[k as usize - 1 - i as usize]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k as usize;\n    while i < j {\n        let temp = input[i];\n        input[i] = input[j];\n        input[j] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpf9sat2n8.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n    let mut j = k;\n    while i < k {\n        result.push(input[j as usize]);\n        i += 1;\n        j -= 1;\n    }\n    while j < input.len() as isize {\n        result.push(input[j as usize]);\n        j += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 2, 3, 4, 5, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmb4awzi0.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = result[i as usize];\n        result[i as usize] = result[j as usize];\n        result[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        result.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        result.push(input[i as usize]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp1u1wk5au.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut start = 0;\n    let mut end = k;\n    while start < end {\n        let temp = input[start as usize];\n        input[start as usize] = input[end as usize];\n        input[end as usize] = temp;\n        start += 1;\n        end -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpdqkvms12.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        input.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpqk_dgqoa.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut index = 0;\n    while index < k {\n        result.push(input[index as usize]);\n        index += 1;\n    }\n    result.reverse();\n    while index < input.len() as isize {\n        result.push(input[index as usize]);\n        index += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpdzxezdvw.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k as usize;\n    while i < j {\n        let temp = input[i];\n        input[i] = input[j];\n        input[j] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpf9sat2n8.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    for i in 0..k {\n        let temp = input[i as usize];\n        input[i as usize] = input[(k - i - 1) as usize];\n        input[(k - i - 1) as usize] = temp;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp45wi34em.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < k {\n        result.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        result.push(input[i as usize]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i: isize = 0;\n    let mut j: isize = k;\n    while i < k {\n        output.push(input[j as usize]);\n        i += 1;\n        j -= 1;\n    }\n    while j < input.len() as isize {\n        output.push(input[j as usize]);\n        j += 1;\n    }\n    return output;\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 2, 3, 4, 5, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp9242v4lf.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        input.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpqk_dgqoa.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k as usize;\n    while i < j {\n        output.swap(i, j);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3wuf7oky.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut k = k;\n    for i in 0..input.len() {\n        if k > 0 {\n            result.push(input[i]);\n            k -= 1;\n        } else {\n            result.insert(0, input[i]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[6, 5, 1, 2, 3, 4]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpa5h66kv0.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        input.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpqk_dgqoa.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k as usize;\n    while i < j {\n        let temp = input[i];\n        input[i] = input[j];\n        input[j] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpf9sat2n8.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    for i in 0..k {\n        output[i as usize] = input[(k - i - 1) as usize];\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        input.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpqk_dgqoa.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    for i in 0..k {\n        output.push(input[k - i - 1]);\n    }\n    for i in k..input.len() {\n        output.push(input[i]);\n    }\n    return output;\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpr1vx5a3k.rs:5:21\n  |\n5 |         output.push(input[k - i - 1]);\n  |                     ^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpr1vx5a3k.rs:7:17\n  |\n7 |     for i in k..input.len() {\n  |                 ^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpr1vx5a3k.rs:8:21\n  |\n8 |         output.push(input[i]);\n  |                     ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        input.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpqk_dgqoa.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    while i < k {\n        let temp = input[i as usize];\n        input[i as usize] = input[(k - i - 1) as usize];\n        input[(k - i - 1) as usize] = temp;\n        i += 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpqi8l7l29.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpdzxezdvw.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        result.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        result.push(input[i as usize]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k as usize;\n    while i < j {\n        output.swap(i, j);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3wuf7oky.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i: isize = 0;\n    let mut j: isize = k;\n    while i < k {\n        output.push(input[j as usize]);\n        i += 1;\n        j -= 1;\n    }\n    while j < input.len() as isize {\n        output.push(input[j as usize]);\n        j += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 2, 3, 4, 5, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp19mpp2hj.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    for i in 0..k {\n        let temp = input[i as usize];\n        input[i as usize] = input[(k - i - 1) as usize];\n        input[(k - i - 1) as usize] = temp;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp45wi34em.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i: isize = 0;\n    let mut j: isize = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpyi0z8_1q.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i: isize = 0;\n    let mut j: isize = k - 1;\n    while i < j {\n        let temp: isize = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    return output;\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpjgfttay0.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpgdulfpo7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    for i in 0..k {\n        output[i as usize] = input[(k - i - 1) as usize];\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        input.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpqk_dgqoa.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        output.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i: isize = 0;\n    let mut j: isize = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpyi0z8_1q.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpdzxezdvw.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpgdulfpo7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        input.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpqk_dgqoa.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        input.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpqk_dgqoa.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i: isize = 0;\n    let mut j: isize = k - 1;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    for i in 0..k {\n        let temp = input[i];\n        input[i] = input[k - i - 1];\n        input[k - i - 1] = temp;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpqienm_9n.rs:5:20\n  |\n5 |         let temp = input[i];\n  |                    ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpqienm_9n.rs:6:9\n  |\n6 |         input[i] = input[k - i - 1];\n  |         ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpqienm_9n.rs:6:20\n  |\n6 |         input[i] = input[k - i - 1];\n  |                    ^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpqienm_9n.rs:7:9\n  |\n7 |         input[k - i - 1] = temp;\n  |         ^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        result.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        result.push(input[i as usize]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpgdulfpo7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpdzxezdvw.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = result[i as usize];\n        result[i as usize] = result[j as usize];\n        result[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3ucij1o5.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i: isize = 0;\n    while i < k {\n        output.push(input[(k - i - 1) as usize]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    return output;\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k as usize;\n    while i < j {\n        input.swap(i, j);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp2c98kww5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i: isize = 0;\n    while i < k {\n        result.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        result.push(input[i as usize]);\n        i += 1;\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        input.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpqk_dgqoa.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        input.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpqk_dgqoa.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        result.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpuasfyhct.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut input_iter = input.iter();\n    let mut count = 0;\n    while count < k {\n        let temp = input_iter.next().unwrap();\n        output.insert(0, *temp);\n        count += 1;\n    }\n    while let Some(x) = input_iter.next() {\n        output.push(*x);\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpdzxezdvw.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = result[i as usize];\n        result[i as usize] = result[j as usize];\n        result[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k as usize;\n    while i < j {\n        input.swap(i, j);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp2c98kww5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = result[i as usize];\n        result[i as usize] = result[j as usize];\n        result[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3ucij1o5.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpdzxezdvw.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpdzxezdvw.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    while i < k {\n        let temp = input[i as usize];\n        input[i as usize] = input[(k - i - 1) as usize];\n        input[(k - i - 1) as usize] = temp;\n        i += 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpqi8l7l29.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut start_index = 0;\n    let mut end_index = k as usize;\n    while start_index < end_index {\n        let temp = input[start_index];\n        input[start_index] = input[end_index];\n        input[end_index] = temp;\n        start_index += 1;\n        end_index -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpv8_sqwm8.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut k = k;\n    let mut i = 0;\n    while i < k {\n        output.push(input[k as usize - 1]);\n        k -= 1;\n    }\n    while i < input.len() {\n        output.push(input[i]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpy44yspb2.rs:10:15\n   |\n10 |     while i < input.len() {\n   |               ^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n10 |     while i < input.len().try_into().unwrap() {\n   |                          ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpy44yspb2.rs:11:21\n   |\n11 |         output.push(input[i]);\n   |                     ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in 0..k {\n        result.push(input[k - i - 1]);\n    }\n    for i in k..input.len() {\n        result.push(input[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpfena6aau.rs:5:21\n  |\n5 |         result.push(input[k - i - 1]);\n  |                     ^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpfena6aau.rs:7:17\n  |\n7 |     for i in k..input.len() {\n  |                 ^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpfena6aau.rs:8:21\n  |\n8 |         result.push(input[i]);\n  |                     ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    for i in 0..k {\n        output[i as usize] = input[(k - i - 1) as usize];\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = result[i as usize];\n        result[i as usize] = result[j as usize];\n        result[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpjbzi1zm6.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpgdulfpo7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpdzxezdvw.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut start = 0;\n    let mut end = k;\n    while start < end {\n        let temp = input[start as usize];\n        input[start as usize] = input[end as usize];\n        input[end as usize] = temp;\n        start += 1;\n        end -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpdqkvms12.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut start = 0;\n    let mut end = k as usize;\n    while start < end {\n        let temp = input[start];\n        input[start] = input[end];\n        input[end] = temp;\n        start += 1;\n        end -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp7vpg9aro.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k as usize;\n    while i < j {\n        output.swap(i, j);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3wuf7oky.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i: isize = 0;\n    let mut j: isize = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpyi0z8_1q.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut start = 0;\n    let mut end = k - 1;\n    while start < end {\n        output.swap(start as usize, end as usize);\n        start += 1;\n        end -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpgdulfpo7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    return input;\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpynj05il_.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k as usize;\n    while i < j {\n        input.swap(i, j);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp2c98kww5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpdzxezdvw.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpgdulfpo7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut output = Vec::new();\n    let mut i = 0;\n    while i < k {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output.reverse();\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k as usize;\n    while i < j {\n        let temp = output[i];\n        output[i] = output[j];\n        output[j] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpwljstq_j.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        input.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpqk_dgqoa.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        result.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpuasfyhct.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpgdulfpo7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        result.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        result.push(input[i as usize]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        input.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpqk_dgqoa.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n    let mut j = k;\n    while i < k {\n        result.push(input[j as usize]);\n        i += 1;\n        j -= 1;\n    }\n    while j < input.len() as isize {\n        result.push(input[j as usize]);\n        j += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 2, 3, 4, 5, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmb4awzi0.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        output.push(input[k as usize - i as usize - 1]);\n        i = i + 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i = i + 1;\n    }\n    return output;\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k as usize;\n    while i < j {\n        input.swap(i, j);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp2c98kww5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpdzxezdvw.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k as usize;\n    while i < j {\n        let temp = output[i];\n        output[i] = output[j];\n        output[j] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpwljstq_j.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        input.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpqk_dgqoa.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        input.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpqk_dgqoa.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = result[i as usize];\n        result[i as usize] = result[j as usize];\n        result[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp3b595vm7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}