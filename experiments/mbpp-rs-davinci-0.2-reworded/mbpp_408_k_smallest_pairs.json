{
  "name": "mbpp_408_k_smallest_pairs",
  "language": "rs",
  "prompt": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n            if heap.len() > k as usize {\n                heap.pop();\n            }\n        }\n    }\n    while let Some(Reverse((_, i, j))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res.reverse();\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push((-sum, (i, j)));\n            } else {\n                if -sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push((-sum, (i, j)));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let (sum, (i, j)) = heap.pop().unwrap();\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res",
    "    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push((nums1[i] + nums2[0], i, 0));\n    }\n    while k > 0 && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        if j + 1 < nums2.len() {\n            heap.push((nums1[i] + nums2[j + 1], i, j + 1));\n        }\n        k -= 1;\n    }\n    result",
    "    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, (i, j))));\n        }\n    }\n    let mut res = Vec::new();\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res",
    "    let mut res = vec![];\n    let mut pq = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pq.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = pq.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res",
    "    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for (i, n1) in nums1.iter().enumerate() {\n        for (j, n2) in nums2.iter().enumerate() {\n            heap.push((*n1 + *n2, *n1, *n2));\n        }\n    }\n    for _ in 0..k {\n        if let Some((_, n1, n2)) = heap.pop() {\n            result.push(vec![n1, n2]);\n        }\n    }\n    result",
    "    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            if heap.len() < k as usize {\n                heap.push((nums1[i] + nums2[j], nums1[i], nums2[j]));\n            } else {\n                if nums1[i] + nums2[j] < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push((nums1[i] + nums2[j], nums1[i], nums2[j]));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let (sum, num1, num2) = heap.pop().unwrap();\n        result.push(vec![num1, num2]);\n    }\n    result",
    "    let mut res = vec![];\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    res.truncate(k as usize);\n    res",
    "    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    let mut res = Vec::new();\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, vec![nums1[i], nums2[j]])));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse((sum, vec![nums1[i], nums2[j]])));\n                }\n            }\n        }\n    }\n    for i in heap {\n        res.push(i.0);\n    }\n    res",
    "    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push((nums1[i] + nums2[j], i, j));\n        }\n    }\n    for _ in 0..k {\n        if let Some((_, i, j)) = heap.pop() {\n            result.push(vec![nums1[i as usize], nums2[j as usize]]);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    if nums1.len() == 0 || nums2.len() == 0 {\n        return result;\n    }\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push(Pair {\n            sum: nums1[i] + nums2[0],\n            index1: i,\n            index2: 0,\n        });\n    }\n    let mut count = 0;\n    while count < k && !heap.is_empty() {\n        let pair = heap.pop().unwrap();\n        result.push(vec![nums1[pair.index1], nums2[pair.index2]]);\n        count += 1;\n        if pair.index2 + 1 < nums2.len() {\n            heap.push(Pair {\n                sum: nums1[pair.index1] + nums2[pair.index2 + 1],\n                index1: pair.index1,\n                index2: pair.index2 + 1,\n            });\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut pq = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            pq.push(Reverse((sum, (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = pq.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else {\n                let top = heap.peek().unwrap();\n                if sum < top.0 {\n                    heap.pop();\n                    heap.push(Reverse(sum));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let top = heap.pop().unwrap();\n        result.push(vec![top.0]);\n    }\n    result",
    "    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, usize, usize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push((nums1[i] + nums2[0], i, 0));\n    }\n    while result.len() < k as usize && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        if j + 1 < nums2.len() {\n            heap.push((nums1[i] + nums2[j + 1], i, j + 1));\n        }\n    }\n    result",
    "    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.iter().take(k as usize).map(|x| x.to_vec()).collect()",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((sum, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut heap = BinaryHeap::new();\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse(sum));\n            if heap.len() > k as usize {\n                heap.pop();\n            }\n        }\n    }\n    while let Some(Reverse(sum)) = heap.pop() {\n        let mut pair = Vec::new();\n        pair.push(sum - nums2[0]);\n        pair.push(nums2[0]);\n        result.push(pair);\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((sum, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse(sum));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse(sum) = heap.pop().unwrap();\n        let mut pair = Vec::new();\n        for i in 0..nums1.len() {\n            for j in 0..nums2.len() {\n                if nums1[i] + nums2[j] == sum {\n                    pair.push(nums1[i]);\n                    pair.push(nums2[j]);\n                    break;\n                }\n            }\n            if !pair.is_empty() {\n                break;\n            }\n        }\n        result.push(pair);\n    }\n    result",
    "    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    if nums1.len() == 0 || nums2.len() == 0 {\n        return result;\n    }\n    heap.push(Pair {\n        sum: nums1[0] + nums2[0],\n        index1: 0,\n        index2: 0,\n    });\n    visited.insert((0, 0));\n    while k > 0 && !heap.is_empty() {\n        let pair = heap.pop().unwrap();\n        result.push(vec![nums1[pair.index1], nums2[pair.index2]]);\n        k -= 1;\n        if pair.index1 + 1 < nums1.len() && !visited.contains(&(pair.index1 + 1, pair.index2)) {\n            heap.push(Pair {\n                sum: nums1[pair.index1 + 1] + nums2[pair.index2],\n                index1: pair.index1 + 1,\n                index2: pair.index2,\n            });\n            visited.insert((pair.index1 + 1, pair.index2));\n        }\n        if pair.index2 + 1 < nums2.len() && !visited.contains(&(pair.index1, pair.index2 + 1)) {\n            heap.push(Pair {\n                sum: nums1[pair.index1] + nums2[pair.index2 + 1],\n                index1: pair.index1,\n                index2: pair.index2 + 1,\n            });\n            visited.insert((pair.index1, pair.index2 + 1));\n        }\n    }\n    result",
    "    let mut res = Vec::new();\n    let mut pq = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pq.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    let mut count = 0;\n    while count < k && !pq.is_empty() {\n        let Reverse((sum, i, j)) = pq.pop().unwrap();\n        res.push(vec![nums1[i], nums2[j]]);\n        count += 1;\n    }\n    res",
    "    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| a[0].cmp(&b[0]));\n    pairs.truncate(k as usize);\n    pairs",
    "    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push((nums1[i] + nums2[j], nums1[i], nums2[j]));\n        }\n    }\n    for _ in 0..k {\n        if let Some(x) = heap.pop() {\n            result.push(vec![x.1, x.2]);\n        }\n    }\n    result",
    "    let mut heap = BinaryHeap::new();\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut heap = BinaryHeap::new();\n    let mut result = Vec::new();\n    let mut visited = HashSet::new();\n    if nums1.len() == 0 || nums2.len() == 0 {\n        return result;\n    }\n    heap.push(Pair {\n        sum: nums1[0] + nums2[0],\n        index1: 0,\n        index2: 0,\n    });\n    visited.insert((0, 0));\n    while k > 0 && !heap.is_empty() {\n        let pair = heap.pop().unwrap();\n        result.push(vec![nums1[pair.index1], nums2[pair.index2]]);\n        if pair.index1 + 1 < nums1.len() && !visited.contains(&(pair.index1 + 1, pair.index2)) {\n            heap.push(Pair {\n                sum: nums1[pair.index1 + 1] + nums2[pair.index2],\n                index1: pair.index1 + 1,\n                index2: pair.index2,\n            });\n            visited.insert((pair.index1 + 1, pair.index2));\n        }\n        if pair.index2 + 1 < nums2.len() && !visited.contains(&(pair.index1, pair.index2 + 1)) {\n            heap.push(Pair {\n                sum: nums1[pair.index1] + nums2[pair.index2 + 1],\n                index1: pair.index1,\n                index2: pair.index2 + 1,\n            });\n            visited.insert((pair.index1, pair.index2 + 1));\n        }\n        k -= 1;\n    }\n    result",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else {\n                if heap.peek().unwrap().0 < sum {\n                    heap.pop();\n                    heap.push(Reverse(sum));\n                }\n            }\n        }\n    }\n    for i in 0..heap.len() {\n        let mut tmp = Vec::new();\n        tmp.push(heap.pop().unwrap().0);\n        res.push(tmp);\n    }\n    res",
    "    let mut heap = BinaryHeap::new();\n    let mut result = vec![];\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    while k > 0 && !heap.is_empty() {\n        let Reverse((_, (i, j))) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        k -= 1;\n    }\n    result",
    "    let mut res: Vec<Vec<isize>> = Vec::new();\n    if nums1.len() == 0 || nums2.len() == 0 {\n        return res;\n    }\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    heap.push((nums1[0] + nums2[0], 0, 0));\n    let mut visited: HashSet<(isize, isize)> = HashSet::new();\n    visited.insert((0, 0));\n    while res.len() < k as usize && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        res.push(vec![nums1[i as usize], nums2[j as usize]]);\n        if i + 1 < nums1.len() as isize && !visited.contains(&(i + 1, j)) {\n            heap.push((nums1[(i + 1) as usize] + nums2[j as usize], i + 1, j));\n            visited.insert((i + 1, j));\n        }\n        if j + 1 < nums2.len() as isize && !visited.contains(&(i, j + 1)) {\n            heap.push((nums1[i as usize] + nums2[(j + 1) as usize], i, j + 1));\n            visited.insert((i, j + 1));\n        }\n    }\n    res",
    "    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push((sum, vec![nums1[i], nums2[j]]));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push((sum, vec![nums1[i], nums2[j]]));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap().1);\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res",
    "    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push((nums1[i] + nums2[0], i, 0));\n    }\n    while k > 0 && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        if j + 1 < nums2.len() {\n            heap.push((nums1[i] + nums2[j + 1], i, j + 1));\n        }\n        k -= 1;\n    }\n    result",
    "    let mut result = Vec::new();\n    if nums1.is_empty() || nums2.is_empty() {\n        return result;\n    }\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push(Pair {\n            sum: nums1[i] + nums2[0],\n            index1: i,\n            index2: 0,\n        });\n    }\n    while k > 0 && !heap.is_empty() {\n        let pair = heap.pop().unwrap();\n        result.push(vec![nums1[pair.index1], nums2[pair.index2]]);\n        if pair.index2 + 1 < nums2.len() {\n            heap.push(Pair {\n                sum: nums1[pair.index1] + nums2[pair.index2 + 1],\n                index1: pair.index1,\n                index2: pair.index2 + 1,\n            });\n        }\n        k -= 1;\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            let pair = vec![nums1[i], nums2[j]];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, pair)));\n            } else if sum < heap.peek().unwrap().0 {\n                heap.pop();\n                heap.push(Reverse((sum, pair)));\n            }\n        }\n    }\n    while !heap.is_empty() {\n        result.push(heap.pop().unwrap().1);\n    }\n    result",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse((sum, (i, j))));\n                }\n            }\n        }\n    }\n    while let Some(Reverse((sum, (i, j)))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res",
    "    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.into_iter().take(k as usize).collect()",
    "    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push((nums1[i] + nums2[0], i, 0));\n    }\n    while result.len() < k as usize && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        if j + 1 < nums2.len() {\n            heap.push((nums1[i] + nums2[j + 1], i, j + 1));\n        }\n    }\n    result",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else {\n                if let Some(Reverse((max, _, _))) = heap.peek() {\n                    if sum < *max {\n                        heap.pop();\n                        heap.push(Reverse((sum, i, j)));\n                    }\n                }\n            }\n        }\n    }\n    while let Some(Reverse((_, i, j))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            let pair = vec![nums1[i], nums2[j]];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, pair)));\n            } else {\n                let top = heap.peek().unwrap();\n                if sum < top.0 {\n                    heap.pop();\n                    heap.push(Reverse((sum, pair)));\n                }\n            }\n        }\n    }\n    for i in heap {\n        result.push(i.1);\n    }\n    result",
    "    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else if sum < heap.peek().unwrap().0 {\n                heap.pop();\n                heap.push(Reverse((sum, (i, j))));\n            }\n        }\n    }\n    let mut result = Vec::new();\n    while let Some(Reverse((sum, (i, j)))) = heap.pop() {\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result",
    "    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut pairs = Vec::new();\n    for num1 in nums1 {\n        for num2 in nums2.iter() {\n            pairs.push(vec![num1, *num2]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.truncate(k as usize);\n    pairs",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse(sum));\n                }\n            }\n        }\n    }\n    for i in heap {\n        res.push(vec![i.0, i.1]);\n    }\n    res",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    let mut count = 0;\n    while count < k && !heap.is_empty() {\n        let Reverse((_, i, j)) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        count += 1;\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((sum, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push((nums1[i] + nums2[0], i, 0));\n    }\n    while k > 0 && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        if j + 1 < nums2.len() {\n            heap.push((nums1[i] + nums2[j + 1], i, j + 1));\n        }\n        k -= 1;\n    }\n    result",
    "    let mut heap = BinaryHeap::new();\n    let mut res = vec![];\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse(sum));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse(sum) = heap.pop().unwrap();\n        let mut tmp = vec![];\n        for i in 0..nums1.len() {\n            for j in 0..nums2.len() {\n                if nums1[i] + nums2[j] == sum {\n                    tmp.push(nums1[i]);\n                    tmp.push(nums2[j]);\n                    res.push(tmp);\n                    break;\n                }\n            }\n        }\n    }\n    res",
    "    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut nums1 = nums1.clone();\n    let mut nums2 = nums2.clone();\n    nums1.sort();\n    nums2.sort();\n    let mut i = 0;\n    let mut j = 0;\n    while i < nums1.len() && j < nums2.len() && result.len() < k as usize {\n        if nums1[i] + nums2[j] < 0 {\n            i += 1;\n        } else if nums1[i] + nums2[j] > 0 {\n            j += 1;\n        } else {\n            result.push(vec![nums1[i], nums2[j]]);\n            i += 1;\n            j += 1;\n        }\n    }\n    result",
    "    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push((sum, (i, j)));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push((sum, (i, j)));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let (sum, (i, j)) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result",
    "    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| a[0].cmp(&b[0]));\n    pairs.truncate(k as usize);\n    pairs",
    "    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push((nums1[i] + nums2[0], i, 0));\n    }\n    while k > 0 && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        if j + 1 < nums2.len() {\n            heap.push((nums1[i] + nums2[j + 1], i, j + 1));\n        }\n        k -= 1;\n    }\n    result",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else {\n                let (sum, _) = heap.peek().unwrap().0;\n                if sum > &sum {\n                    heap.pop();\n                    heap.push(Reverse((sum, (i, j))));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let (sum, (i, j)) = heap.pop().unwrap().0;\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res",
    "    let mut heap = BinaryHeap::new();\n    let mut res = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, (i, j))));\n            if heap.len() > k as usize {\n                heap.pop();\n            }\n        }\n    }\n    while let Some(Reverse((_, (i, j)))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res.reverse();\n    res",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut pairs: Vec<Vec<isize>> = vec![];\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.truncate(k as usize);\n    pairs",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n\n    if nums1.len() == 0 || nums2.len() == 0 || k == 0 {\n        return result;\n    }\n\n    heap.push(Pair {\n        sum: nums1[0] + nums2[0],\n        index1: 0,\n        index2: 0,\n    });\n\n    visited.insert((0, 0));\n\n    for _ in 0..k {\n        if heap.is_empty() {\n            break;\n        }\n\n        let pair = heap.pop().unwrap();\n\n        result.push(vec![nums1[pair.index1], nums2[pair.index2]]);\n\n        if pair.index1 + 1 < nums1.len() && !visited.contains(&(pair.index1 + 1, pair.index2)) {\n            heap.push(Pair {\n                sum: nums1[pair.index1 + 1] + nums2[pair.index2],\n                index1: pair.index1 + 1,\n                index2: pair.index2,\n            });\n            visited.insert((pair.index1 + 1, pair.index2));\n        }\n\n        if pair.index2 + 1 < nums2.len() && !visited.contains(&(pair.index1, pair.index2 + 1)) {\n            heap.push(Pair {\n                sum: nums1[pair.index1] + nums2[pair.index2 + 1],\n                index1: pair.index1,\n                index2: pair.index2 + 1,\n            });\n            visited.insert((pair.index1, pair.index2 + 1));\n        }\n    }\n\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else {\n                let top = heap.peek().unwrap();\n                if top.0 < sum {\n                    break;\n                } else {\n                    heap.pop();\n                    heap.push(Reverse((sum, (i, j))));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse((sum, (i, j))) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((sum, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        } else {\n            break;\n        }\n    }\n    result",
    "    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else {\n                let top = heap.peek().unwrap();\n                if sum < top.0 {\n                    heap.pop();\n                    heap.push(Reverse(sum));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let top = heap.pop().unwrap();\n        result.push(vec![top.0, top.0]);\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else {\n                let top = heap.peek().unwrap();\n                if top.0 > sum {\n                    heap.pop();\n                    heap.push(Reverse((sum, (i, j))));\n                }\n            }\n        }\n    }\n    while let Some(Reverse((_, (i, j)))) = heap.pop() {\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result",
    "    let mut pairs = Vec::new();\n    for &n1 in &nums1 {\n        for &n2 in &nums2 {\n            pairs.push(vec![n1, n2]);\n        }\n    }\n    pairs.sort_by(|a, b| a[0].cmp(&b[0]).then(a[1].cmp(&b[1])));\n    pairs.into_iter().take(k as usize).collect()",
    "    let mut pairs: Vec<Vec<isize>> = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.truncate(k as usize);\n    pairs",
    "    let mut res = Vec::new();\n    if nums1.is_empty() || nums2.is_empty() {\n        return res;\n    }\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push(Pair {\n            sum: nums1[i] + nums2[0],\n            index1: i,\n            index2: 0,\n        });\n    }\n    for _ in 0..k {\n        if let Some(pair) = heap.pop() {\n            res.push(vec![nums1[pair.index1], nums2[pair.index2]]);\n            if pair.index2 + 1 < nums2.len() {\n                heap.push(Pair {\n                    sum: nums1[pair.index1] + nums2[pair.index2 + 1],\n                    index1: pair.index1,\n                    index2: pair.index2 + 1,\n                });\n            }\n        } else {\n            break;\n        }\n    }\n    res",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for (i, num1) in nums1.iter().enumerate() {\n        for (j, num2) in nums2.iter().enumerate() {\n            let sum = num1 + num2;\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else {\n                let top = heap.peek().unwrap();\n                if top.0 > sum {\n                    heap.pop();\n                    heap.push(Reverse((sum, i, j)));\n                }\n            }\n        }\n    }\n    while let Some(Reverse((_, i, j))) = heap.pop() {\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else {\n                let top = heap.peek().unwrap();\n                if top.0 < sum {\n                    break;\n                } else {\n                    heap.pop();\n                    heap.push(Reverse((sum, (i, j))));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse((sum, (i, j))) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result",
    "    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else {\n                if heap.peek().unwrap().0 > sum {\n                    heap.pop();\n                    heap.push(Reverse(sum));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse(sum) = heap.pop().unwrap();\n        let mut pair = vec![];\n        for i in 0..nums1.len() {\n            for j in 0..nums2.len() {\n                if nums1[i] + nums2[j] == sum {\n                    pair.push(nums1[i]);\n                    pair.push(nums2[j]);\n                    break;\n                }\n            }\n            if pair.len() > 0 {\n                break;\n            }\n        }\n        result.push(pair);\n    }\n    result",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res",
    "    let mut res: Vec<Vec<isize>> = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else {\n                if let Some(Reverse((s, _, _))) = heap.peek() {\n                    if sum < *s {\n                        heap.pop();\n                        heap.push(Reverse((sum, i, j)));\n                    }\n                }\n            }\n        }\n    }\n    while let Some(Reverse((sum, i, j))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    let mut i = 0;\n    while i < k && !heap.is_empty() {\n        let Reverse((_, x, y)) = heap.pop().unwrap();\n        res.push(vec![nums1[x], nums2[y]]);\n        i += 1;\n    }\n    res",
    "    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push((nums1[i] + nums2[0], i, 0));\n    }\n    while k > 0 && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        if j + 1 < nums2.len() {\n            heap.push((nums1[i] + nums2[j + 1], i, j + 1));\n        }\n        k -= 1;\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse(sum));\n                }\n            }\n        }\n    }\n    for i in 0..heap.len() {\n        result.push(vec![heap.pop().unwrap().0]);\n    }\n    result",
    "    let mut res = Vec::new();\n    if nums1.is_empty() || nums2.is_empty() {\n        return res;\n    }\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push(Pair {\n            sum: nums1[i] + nums2[0],\n            index1: i,\n            index2: 0,\n        });\n    }\n    while k > 0 && !heap.is_empty() {\n        let pair = heap.pop().unwrap();\n        res.push(vec![nums1[pair.index1], nums2[pair.index2]]);\n        if pair.index2 + 1 < nums2.len() {\n            heap.push(Pair {\n                sum: nums1[pair.index1] + nums2[pair.index2 + 1],\n                index1: pair.index1,\n                index2: pair.index2 + 1,\n            });\n        }\n        k -= 1;\n    }\n    res",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut res: Vec<Vec<isize>> = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else if sum < heap.peek().unwrap().0 {\n                heap.pop();\n                heap.push(Reverse((sum, (i, j))));\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let (_, (i, j)) = heap.pop().unwrap().0;\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut pq = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pq.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = pq.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    while k > 0 && !heap.is_empty() {\n        let Reverse((_, i, j)) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        k -= 1;\n    }\n    result",
    "    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        } else {\n            break;\n        }\n    }\n    result",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut res: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, usize, usize)> = BinaryHeap::new();\n    if nums1.len() == 0 || nums2.len() == 0 {\n        return res;\n    }\n    heap.push((nums1[0] + nums2[0], nums1[0], 0, 0));\n    while res.len() < k as usize && !heap.is_empty() {\n        let (sum, num1, i, j) = heap.pop().unwrap();\n        res.push(vec![num1, nums2[j]]);\n        if i + 1 < nums1.len() {\n            heap.push((nums1[i + 1] + nums2[j], nums1[i + 1], i + 1, j));\n        }\n        if i == 0 && j + 1 < nums2.len() {\n            heap.push((nums1[i] + nums2[j + 1], nums1[i], i, j + 1));\n        }\n    }\n    res",
    "    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push((nums1[i] + nums2[0], i, 0));\n    }\n    while result.len() < k as usize && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        if j + 1 < nums2.len() {\n            heap.push((nums1[i] + nums2[j + 1], i, j + 1));\n        }\n    }\n    result",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else if sum < heap.peek().unwrap().0 {\n                heap.pop();\n                heap.push(Reverse((sum, i, j)));\n            }\n        }\n    }\n    while let Some(Reverse((_, i, j))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < nums1.len() && j < nums2.len() {\n        let sum = nums1[i] + nums2[j];\n        if visited.insert((i, j)) {\n            heap.push(Reverse((sum, (i, j))));\n        }\n        if i == nums1.len() - 1 {\n            j += 1;\n        } else if j == nums2.len() - 1 {\n            i += 1;\n        } else {\n            if nums1[i + 1] + nums2[j] <= nums1[i] + nums2[j + 1] {\n                i += 1;\n            } else {\n                j += 1;\n            }\n        }\n    }\n    while k > 0 && !heap.is_empty() {\n        let Reverse((_, (i, j))) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        k -= 1;\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse((sum, (i, j))));\n                }\n            }\n        }\n    }\n    for Reverse((_, (i, j))) in heap {\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push((-sum, (i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some((_, (i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    let mut i = 0;\n    while i < k && !heap.is_empty() {\n        let (sum, (i, j)) = heap.pop().unwrap().0;\n        res.push(vec![nums1[i], nums2[j]]);\n        i += 1;\n    }\n    res",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push((-sum, (i, j)));\n            } else {\n                if sum > -heap.peek().unwrap().0 {\n                    break;\n                } else {\n                    heap.pop();\n                    heap.push((-sum, (i, j)));\n                }\n            }\n        }\n    }\n    while let Some((_, (i, j))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else if sum < heap.peek().unwrap().0 {\n                heap.pop();\n                heap.push(Reverse((sum, (i, j))));\n            }\n        }\n    }\n    while let Some(Reverse((_, (i, j)))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res",
    "    let mut pairs = Vec::new();\n    for n1 in nums1 {\n        for n2 in nums2.iter() {\n            pairs.push(vec![n1, *n2]);\n        }\n    }\n    pairs.sort_by(|a, b| a[0].cmp(&b[0]));\n    pairs.truncate(k as usize);\n    pairs",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((sum, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = vec![vec![false; nums2.len()]; nums1.len()];\n    heap.push(Reverse((nums1[0] + nums2[0], 0, 0)));\n    visited[0][0] = true;\n    while k > 0 && !heap.is_empty() {\n        let Reverse((sum, i, j)) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        if i + 1 < nums1.len() && !visited[i + 1][j] {\n            heap.push(Reverse((nums1[i + 1] + nums2[j], i + 1, j)));\n            visited[i + 1][j] = true;\n        }\n        if j + 1 < nums2.len() && !visited[i][j + 1] {\n            heap.push(Reverse((nums1[i] + nums2[j + 1], i, j + 1)));\n            visited[i][j + 1] = true;\n        }\n        k -= 1;\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((sum, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else if sum < heap.peek().unwrap().0 {\n                heap.pop();\n                heap.push(Reverse((sum, (i, j))));\n            }\n        }\n    }\n    while let Some(Reverse((_, (i, j)))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res",
    "    let mut res: Vec<Vec<isize>> = vec![];\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push((nums1[i] + nums2[j], nums1[i], nums2[j]));\n        }\n    }\n    for _ in 0..k {\n        if let Some(x) = heap.pop() {\n            res.push(vec![x.1, x.2]);\n        }\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    if nums1.len() == 0 || nums2.len() == 0 {\n        return res;\n    }\n    heap.push(Pair {\n        sum: nums1[0] + nums2[0],\n        index1: 0,\n        index2: 0,\n    });\n    visited.insert((0, 0));\n    while k > 0 && !heap.is_empty() {\n        let pair = heap.pop().unwrap();\n        res.push(vec![nums1[pair.index1], nums2[pair.index2]]);\n        k -= 1;\n        if pair.index1 + 1 < nums1.len() && !visited.contains(&(pair.index1 + 1, pair.index2)) {\n            heap.push(Pair {\n                sum: nums1[pair.index1 + 1] + nums2[pair.index2],\n                index1: pair.index1 + 1,\n                index2: pair.index2,\n            });\n            visited.insert((pair.index1 + 1, pair.index2));\n        }\n        if pair.index2 + 1 < nums2.len() && !visited.contains(&(pair.index1, pair.index2 + 1)) {\n            heap.push(Pair {\n                sum: nums1[pair.index1] + nums2[pair.index2 + 1],\n                index1: pair.index1,\n                index2: pair.index2 + 1,\n            });\n            visited.insert((pair.index1, pair.index2 + 1));\n        }\n    }\n    res",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut result: Vec<Vec<isize>> = vec![];\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    let mut visited: HashSet<(isize, isize)> = HashSet::new();\n    if nums1.len() == 0 || nums2.len() == 0 || k == 0 {\n        return result;\n    }\n    heap.push((nums1[0] + nums2[0], 0, 0));\n    visited.insert((0, 0));\n    while result.len() < k as usize && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        result.push(vec![nums1[i as usize], nums2[j as usize]]);\n        if i + 1 < nums1.len() as isize && !visited.contains(&(i + 1, j)) {\n            heap.push((nums1[(i + 1) as usize] + nums2[j as usize], i + 1, j));\n            visited.insert((i + 1, j));\n        }\n        if j + 1 < nums2.len() as isize && !visited.contains(&(i, j + 1)) {\n            heap.push((nums1[i as usize] + nums2[(j + 1) as usize], i, j + 1));\n            visited.insert((i, j + 1));\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut heap = BinaryHeap::new();\n    let mut res = Vec::new();\n    if nums1.len() == 0 || nums2.len() == 0 {\n        return res;\n    }\n    for i in 0..nums1.len() {\n        heap.push(Pair {\n            sum: nums1[i] + nums2[0],\n            i,\n            j: 0,\n        });\n    }\n    while k > 0 && heap.len() > 0 {\n        let pair = heap.pop().unwrap();\n        res.push(vec![nums1[pair.i], nums2[pair.j]]);\n        if pair.j + 1 < nums2.len() {\n            heap.push(Pair {\n                sum: nums1[pair.i] + nums2[pair.j + 1],\n                i: pair.i,\n                j: pair.j + 1,\n            });\n        }\n        k -= 1;\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else {\n                let (sum, (i, j)) = heap.peek().unwrap().0;\n                if sum > nums1[i] + nums2[j] {\n                    heap.pop();\n                    heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n                }\n            }\n        }\n    }\n    while let Some(Reverse((sum, (i, j)))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse((sum, (i, j))));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse((sum, (i, j))) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut pairs = Vec::new();\n    for n1 in nums1 {\n        for n2 in nums2.iter() {\n            pairs.push(vec![n1, *n2]);\n        }\n    }\n    pairs.sort_by(|a, b| a[0].cmp(&b[0]));\n    pairs.into_iter().take(k as usize).collect()",
    "    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push((-sum, (i, j)));\n            } else {\n                let (top_sum, _) = heap.peek().unwrap();\n                if -top_sum > sum {\n                    heap.pop();\n                    heap.push((-sum, (i, j)));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let (_, (i, j)) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result",
    "    let mut res: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    let mut visited: HashSet<(isize, isize)> = HashSet::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push((sum, i as isize, j as isize));\n                visited.insert((i as isize, j as isize));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push((sum, i as isize, j as isize));\n                    visited.insert((i as isize, j as isize));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        res.push(vec![nums1[i as usize], nums2[j as usize]]);\n    }\n    res.reverse();\n    res",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut res = Vec::new();\n    if nums1.len() == 0 || nums2.len() == 0 {\n        return res;\n    }\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push(Pair {\n            sum: nums1[i] + nums2[0],\n            index: (i, 0),\n        });\n    }\n    while k > 0 && !heap.is_empty() {\n        let Pair { sum, index } = heap.pop().unwrap();\n        res.push(vec![nums1[index.0], nums2[index.1]]);\n        if index.1 + 1 < nums2.len() {\n            heap.push(Pair {\n                sum: nums1[index.0] + nums2[index.1 + 1],\n                index: (index.0, index.1 + 1),\n            });\n        }\n        k -= 1;\n    }\n    res",
    "    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.into_iter().take(k as usize).collect()",
    "    let mut result: Vec<Vec<isize>> = Vec::new();\n    if nums1.len() == 0 || nums2.len() == 0 {\n        return result;\n    }\n    let mut heap: BinaryHeap<(isize, usize, usize)> = BinaryHeap::new();\n    heap.push((nums1[0] + nums2[0], 0, 0));\n    let mut visited: HashSet<(usize, usize)> = HashSet::new();\n    visited.insert((0, 0));\n    while result.len() < k as usize && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        if i + 1 < nums1.len() && !visited.contains(&(i + 1, j)) {\n            heap.push((nums1[i + 1] + nums2[j], i + 1, j));\n            visited.insert((i + 1, j));\n        }\n        if j + 1 < nums2.len() && !visited.contains(&(i, j + 1)) {\n            heap.push((nums1[i] + nums2[j + 1], i, j + 1));\n            visited.insert((i, j + 1));\n        }\n    }\n    result",
    "    let mut res = Vec::new();\n    if nums1.is_empty() || nums2.is_empty() {\n        return res;\n    }\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else {\n                let top = heap.peek().unwrap();\n                if top.0 > sum {\n                    heap.pop();\n                    heap.push(Reverse((sum, i, j)));\n                }\n            }\n        }\n    }\n    while let Some(Reverse((_, i, j))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res",
    "    let mut result: Vec<Vec<isize>> = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else if sum < heap.peek().unwrap().0 {\n                heap.pop();\n                heap.push(Reverse((sum, i, j)));\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse((_, i, j)) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result",
    "    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            let mut pair = vec![nums1[i], nums2[j]];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n                result.push(pair);\n            } else if sum < heap.peek().unwrap().0 {\n                heap.pop();\n                heap.push(Reverse(sum));\n                result.push(pair);\n            }\n        }\n    }\n    result",
    "    let mut heap = BinaryHeap::new();\n    let mut res = Vec::new();\n    if nums1.len() == 0 || nums2.len() == 0 || k == 0 {\n        return res;\n    }\n    heap.push(Pair {\n        sum: nums1[0] + nums2[0],\n        index1: 0,\n        index2: 0,\n    });\n    while k > 0 && !heap.is_empty() {\n        let pair = heap.pop().unwrap();\n        res.push(vec![nums1[pair.index1], nums2[pair.index2]]);\n        if pair.index1 + 1 < nums1.len() {\n            heap.push(Pair {\n                sum: nums1[pair.index1 + 1] + nums2[pair.index2],\n                index1: pair.index1 + 1,\n                index2: pair.index2,\n            });\n        }\n        if pair.index1 == 0 && pair.index2 + 1 < nums2.len() {\n            heap.push(Pair {\n                sum: nums1[pair.index1] + nums2[pair.index2 + 1],\n                index1: pair.index1,\n                index2: pair.index2 + 1,\n            });\n        }\n        k -= 1;\n    }\n    res",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else {\n                let Reverse(max) = heap.peek().unwrap();\n                if sum < max {\n                    heap.pop();\n                    heap.push(Reverse(sum));\n                }\n            }\n        }\n    }\n    for Reverse(sum) in heap {\n        result.push(vec![sum]);\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else {\n                let top = heap.peek().unwrap();\n                if top.0 < sum {\n                    break;\n                }\n                heap.push(Reverse((sum, i, j)));\n                heap.pop();\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse((sum, i, j)) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut result: Vec<Vec<isize>> = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            let pair = vec![nums1[i], nums2[j]];\n            heap.push(Reverse((sum, pair)));\n        }\n    }\n    let mut count = 0;\n    while count < k as usize && !heap.is_empty() {\n        let Reverse((_, pair)) = heap.pop().unwrap();\n        result.push(pair);\n        count += 1;\n    }\n    result",
    "    let mut pairs = Vec::new();\n    for n1 in nums1 {\n        for n2 in nums2.iter() {\n            pairs.push(vec![n1, *n2]);\n        }\n    }\n    pairs.sort_by(|a, b| a[0].cmp(&b[0]));\n    pairs.iter().take(k as usize).cloned().collect()",
    "    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else {\n                if let Some(Reverse((_, (i1, j1)))) = heap.peek() {\n                    if sum < nums1[*i1] + nums2[*j1] {\n                        heap.pop();\n                        heap.push(Reverse((sum, (i, j))));\n                    }\n                }\n            }\n        }\n    }\n    while let Some(Reverse((_, (i, j)))) = heap.pop() {\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result",
    "    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| a[0].cmp(&b[0]));\n    pairs.truncate(k as usize);\n    pairs",
    "    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse(sum));\n                }\n            }\n        }\n    }\n    while heap.len() > 0 {\n        let sum = heap.pop().unwrap().0;\n        let mut vec = Vec::new();\n        for i in 0..nums1.len() {\n            for j in 0..nums2.len() {\n                if nums1[i] + nums2[j] == sum {\n                    vec.push(nums1[i]);\n                    vec.push(nums2[j]);\n                    result.push(vec);\n                    break;\n                }\n            }\n        }\n    }\n    result",
    "    let mut pairs: Vec<Vec<isize>> = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.truncate(k as usize);\n    pairs",
    "    let mut result = Vec::new();\n    if nums1.len() == 0 || nums2.len() == 0 {\n        return result;\n    }\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push(Pair {\n            sum: nums1[i] + nums2[0],\n            index1: i,\n            index2: 0,\n        });\n    }\n    for _ in 0..k {\n        if let Some(pair) = heap.pop() {\n            result.push(vec![nums1[pair.index1], nums2[pair.index2]]);\n            if pair.index2 + 1 < nums2.len() {\n                heap.push(Pair {\n                    sum: nums1[pair.index1] + nums2[pair.index2 + 1],\n                    index1: pair.index1,\n                    index2: pair.index2 + 1,\n                });\n            }\n        } else {\n            break;\n        }\n    }\n    result",
    "    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for (i, n1) in nums1.iter().enumerate() {\n        for (j, n2) in nums2.iter().enumerate() {\n            heap.push((n1 + n2, *n1, *n2));\n        }\n    }\n    for _ in 0..k {\n        if let Some((_, n1, n2)) = heap.pop() {\n            result.push(vec![n1, n2]);\n        }\n    }\n    result",
    "    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.into_iter().take(k as usize).collect()",
    "    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut res: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push((nums1[i] + nums2[j], i, j));\n        }\n    }\n    for _ in 0..k {\n        if let Some((_, i, j)) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res",
    "    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push((nums1[i] + nums2[j], i, j));\n        }\n    }\n    for _ in 0..k {\n        if let Some((_, i, j)) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut res: Vec<Vec<isize>> = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    let mut count = 0;\n    while count < k && !heap.is_empty() {\n        let Reverse((sum, i, j)) = heap.pop().unwrap();\n        res.push(vec![nums1[i], nums2[j]]);\n        count += 1;\n    }\n    res",
    "    let mut heap = BinaryHeap::new();\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, nums1[i], nums2[j])));\n            } else {\n                let top = heap.peek().unwrap();\n                if top.0 > sum {\n                    heap.pop();\n                    heap.push(Reverse((sum, nums1[i], nums2[j])));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let top = heap.pop().unwrap();\n        result.push(vec![top.1, top.2]);\n    }\n    result",
    "    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.truncate(k as usize);\n    pairs",
    "    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push((nums1[i] + nums2[0], i, 0));\n    }\n    while result.len() < k as usize && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        if j + 1 < nums2.len() {\n            heap.push((nums1[i] + nums2[j + 1], i, j + 1));\n        }\n    }\n    result",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push((sum, (i, j)));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push((sum, (i, j)));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let (_, (i, j)) = heap.pop().unwrap();\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else {\n                let top = heap.peek().unwrap();\n                if top.0 > sum {\n                    heap.pop();\n                    heap.push(Reverse((sum, i, j)));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse((_, i, j)) = heap.pop().unwrap();\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse(sum));\n                }\n            }\n        }\n    }\n    for i in 0..heap.len() {\n        let sum = heap.pop().unwrap().0;\n        for j in 0..nums1.len() {\n            for k in 0..nums2.len() {\n                if sum == nums1[j] + nums2[k] {\n                    result.push(vec![nums1[j], nums2[k]]);\n                }\n            }\n        }\n    }\n    result",
    "    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    let mut res = vec![];\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    let mut count = 0;\n    while count < k && !heap.is_empty() {\n        let Reverse((_, i, j)) = heap.pop().unwrap();\n        res.push(vec![nums1[i], nums2[j]]);\n        count += 1;\n    }\n    res",
    "    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            let pair = vec![nums1[i], nums2[j]];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, pair)));\n            } else {\n                let top = heap.peek().unwrap();\n                if top.0 > sum {\n                    heap.pop();\n                    heap.push(Reverse((sum, pair)));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let top = heap.pop().unwrap();\n        result.push(top.1);\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((sum, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse(sum));\n            if heap.len() > k as usize {\n                heap.pop();\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse(sum) = heap.pop().unwrap();\n        let mut pair = vec![];\n        for i in 0..nums1.len() {\n            for j in 0..nums2.len() {\n                if nums1[i] + nums2[j] == sum {\n                    pair.push(nums1[i]);\n                    pair.push(nums2[j]);\n                    res.push(pair);\n                    break;\n                }\n            }\n        }\n    }\n    res",
    "    let mut result = vec![];\n    if nums1.is_empty() || nums2.is_empty() {\n        return result;\n    }\n    let mut min_heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if min_heap.len() < k as usize {\n                min_heap.push(Reverse((sum, nums1[i], nums2[j])));\n            } else {\n                let top = min_heap.peek().unwrap();\n                if top.0 > sum {\n                    min_heap.pop();\n                    min_heap.push(Reverse((sum, nums1[i], nums2[j])));\n                }\n            }\n        }\n    }\n    while !min_heap.is_empty() {\n        let Reverse((_, a, b)) = min_heap.pop().unwrap();\n        result.push(vec![a, b]);\n    }\n    result",
    "    let mut res: Vec<Vec<isize>> = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse(sum));\n                }\n            }\n        }\n    }\n    for i in 0..heap.len() {\n        res.push(vec![heap.pop().unwrap().0]);\n    }\n    res",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    heap.push(Pair {\n        first: nums1[0],\n        second: nums2[0],\n        first_index: 0,\n        second_index: 0,\n    });\n    visited.insert((0, 0));\n    while k > 0 && !heap.is_empty() {\n        let pair = heap.pop().unwrap();\n        result.push(vec![pair.first, pair.second]);\n        if pair.first_index + 1 < nums1.len() && !visited.contains(&(pair.first_index + 1, pair.second_index)) {\n            heap.push(Pair {\n                first: nums1[pair.first_index + 1],\n                second: nums2[pair.second_index],\n                first_index: pair.first_index + 1,\n                second_index: pair.second_index,\n            });\n            visited.insert((pair.first_index + 1, pair.second_index));\n        }\n        if pair.second_index + 1 < nums2.len() && !visited.contains(&(pair.first_index, pair.second_index + 1)) {\n            heap.push(Pair {\n                first: nums1[pair.first_index],\n                second: nums2[pair.second_index + 1],\n                first_index: pair.first_index,\n                second_index: pair.second_index + 1,\n            });\n            visited.insert((pair.first_index, pair.second_index + 1));\n        }\n        k -= 1;\n    }\n    result",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse((sum, (i, j))));\n                }\n            }\n        }\n    }\n    for Reverse((_, (i, j))) in heap {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res",
    "    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse((sum, (i, j))));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse((sum, (i, j))) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result",
    "    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| a[0].cmp(&b[0]).then(a[1].cmp(&b[1])));\n    pairs.into_iter().take(k as usize).collect()",
    "    let mut res: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, usize, usize)> = BinaryHeap::new();\n    if nums1.is_empty() || nums2.is_empty() {\n        return res;\n    }\n    heap.push((nums1[0] + nums2[0], 0, 0));\n    let mut visited: HashSet<(usize, usize)> = HashSet::new();\n    visited.insert((0, 0));\n    while k > 0 && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        res.push(vec![nums1[i], nums2[j]]);\n        if i + 1 < nums1.len() && !visited.contains(&(i + 1, j)) {\n            heap.push((nums1[i + 1] + nums2[j], i + 1, j));\n            visited.insert((i + 1, j));\n        }\n        if j + 1 < nums2.len() && !visited.contains(&(i, j + 1)) {\n            heap.push((nums1[i] + nums2[j + 1], i, j + 1));\n            visited.insert((i, j + 1));\n        }\n        k -= 1;\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else {\n                if let Some(Reverse((top, _, _))) = heap.peek() {\n                    if sum < *top {\n                        heap.pop();\n                        heap.push(Reverse((sum, i, j)));\n                    }\n                }\n            }\n        }\n    }\n    while let Some(Reverse((_, i, j))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    let mut count = 0;\n    while count < k && !heap.is_empty() {\n        let Reverse((sum, i, j)) = heap.pop().unwrap();\n        res.push(vec![nums1[i], nums2[j]]);\n        count += 1;\n    }\n    res",
    "    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.truncate(k as usize);\n    pairs",
    "    let mut pairs: Vec<Vec<isize>> = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.iter().take(k as usize).map(|x| x.clone()).collect()",
    "    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| a[0].cmp(&b[0]));\n    pairs.truncate(k as usize);\n    pairs",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else if sum < heap.peek().unwrap().0 {\n                heap.pop();\n                heap.push(Reverse((sum, i, j)));\n            }\n        }\n    }\n    for Reverse((_, i, j)) in heap {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else {\n                let top = heap.peek().unwrap();\n                if sum < top.0 {\n                    heap.pop();\n                    heap.push(Reverse((sum, (i, j))));\n                }\n            }\n        }\n    }\n    while let Some(Reverse((_, (i, j)))) = heap.pop() {\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res",
    "    let mut result: Vec<Vec<isize>> = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else {\n                if heap.peek().unwrap().0 > sum {\n                    heap.pop();\n                    heap.push(Reverse((sum, i, j)));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse((sum, i, j)) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((sum, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    if nums1.len() == 0 || nums2.len() == 0 || k == 0 {\n        return result;\n    }\n    for i in 0..nums1.len() {\n        heap.push((nums1[i] + nums2[0], i, 0));\n    }\n    while k > 0 && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        if j + 1 < nums2.len() {\n            heap.push((nums1[i] + nums2[j + 1], i, j + 1));\n        }\n        k -= 1;\n    }\n    result",
    "    let mut heap = BinaryHeap::new();\n    let mut result = Vec::new();\n    if nums1.is_empty() || nums2.is_empty() {\n        return result;\n    }\n    heap.push(Reverse((nums1[0] + nums2[0], 0, 0)));\n    let mut visited = vec![vec![false; nums2.len()]; nums1.len()];\n    visited[0][0] = true;\n    while k > 0 && !heap.is_empty() {\n        let Reverse((sum, i, j)) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        k -= 1;\n        if i + 1 < nums1.len() && !visited[i + 1][j] {\n            heap.push(Reverse((nums1[i + 1] + nums2[j], i + 1, j)));\n            visited[i + 1][j] = true;\n        }\n        if j + 1 < nums2.len() && !visited[i][j + 1] {\n            heap.push(Reverse((nums1[i] + nums2[j + 1], i, j + 1)));\n            visited[i][j + 1] = true;\n        }\n    }\n    result",
    "    let mut res = Vec::new();\n    let mut pq = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pq.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = pq.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res",
    "    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| a[0].cmp(&b[0]));\n    pairs.truncate(k as usize);\n    pairs",
    "    let mut res: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, usize, usize)> = BinaryHeap::new();\n    if nums1.len() == 0 || nums2.len() == 0 || k == 0 {\n        return res;\n    }\n    heap.push((nums1[0] + nums2[0], nums1[0], 0, 0));\n    while k > 0 && !heap.is_empty() {\n        let (sum, num1, i, j) = heap.pop().unwrap();\n        res.push(vec![num1, nums2[j]]);\n        if i + 1 < nums1.len() {\n            heap.push((nums1[i + 1] + nums2[j], nums1[i + 1], i + 1, j));\n        }\n        if i == 0 && j + 1 < nums2.len() {\n            heap.push((nums1[i] + nums2[j + 1], nums1[i], i, j + 1));\n        }\n        k -= 1;\n    }\n    res",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.truncate(k as usize);\n    pairs",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else if sum < heap.peek().unwrap().0 {\n                heap.pop();\n                heap.push(Reverse(sum));\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse(sum) = heap.pop().unwrap();\n        let mut pair = vec![];\n        for i in 0..nums1.len() {\n            for j in 0..nums2.len() {\n                if nums1[i] + nums2[j] == sum {\n                    pair.push(nums1[i]);\n                    pair.push(nums2[j]);\n                    res.push(pair);\n                    pair = vec![];\n                }\n            }\n        }\n    }\n    res",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.into_iter().take(k as usize).collect()",
    "    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((sum, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.truncate(k as usize);\n    pairs",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = vec![vec![false; nums2.len()]; nums1.len()];\n    if nums1.is_empty() || nums2.is_empty() {\n        return res;\n    }\n    heap.push(Pair {\n        x: 0,\n        y: 0,\n        sum: nums1[0] + nums2[0],\n    });\n    visited[0][0] = true;\n    while k > 0 && !heap.is_empty() {\n        let p = heap.pop().unwrap();\n        res.push(vec![nums1[p.x], nums2[p.y]]);\n        if p.x + 1 < nums1.len() && !visited[p.x + 1][p.y] {\n            heap.push(Pair {\n                x: p.x + 1,\n                y: p.y,\n                sum: nums1[p.x + 1] + nums2[p.y],\n            });\n            visited[p.x + 1][p.y] = true;\n        }\n        if p.y + 1 < nums2.len() && !visited[p.x][p.y + 1] {\n            heap.push(Pair {\n                x: p.x,\n                y: p.y + 1,\n                sum: nums1[p.x] + nums2[p.y + 1],\n            });\n            visited[p.x][p.y + 1] = true;\n        }\n        k -= 1;\n    }\n    res",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else if sum < heap.peek().unwrap().0 {\n                heap.pop();\n                heap.push(Reverse((sum, i, j)));\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse((_, i, j)) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut pairs: Vec<Vec<isize>> = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.iter().take(k as usize).map(|x| x.to_vec()).collect()",
    "    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut pairs = Vec::new();\n\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n\n    pairs.sort_by(|a, b| a[0].cmp(&b[0]));\n\n    pairs.into_iter().take(k as usize).collect()"
  ]
}