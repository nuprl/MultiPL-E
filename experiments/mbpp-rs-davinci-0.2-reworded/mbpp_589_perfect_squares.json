{
  "name": "mbpp_589_perfect_squares",
  "language": "rs",
  "prompt": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares",
    "    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares",
    "    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            result.push(i);\n        }\n    }\n    result",
    "    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares",
    "    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            result.push(i);\n        }\n    }\n    result",
    "    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.floor() == sqrt {\n            squares.push(i);\n        }\n    }\n    squares",
    "    let mut result = Vec::new();\n    for i in a..(b + 1) {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            result.push(i);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            result.push(i * i);\n        }\n        i += 1;\n    }\n    result",
    "    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares",
    "    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            result.push(i);\n        }\n    }\n    result",
    "    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares",
    "    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            result.push(i);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            result.push(i);\n        }\n    }\n    result",
    "    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares",
    "    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares",
    "    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares",
    "    let mut result = Vec::new();\n    for i in a..b {\n        if (i as f64).sqrt().fract() == 0.0 {\n            result.push(i);\n        }\n    }\n    result",
    "    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares",
    "    let mut result = Vec::new();\n    let mut i = a;\n    while i <= b {\n        let sqrt = (i as f64).sqrt() as isize;\n        if sqrt * sqrt == i {\n            result.push(i);\n        }\n        i += 1;\n    }\n    result",
    "    (a..b+1).filter(|x| (x as f64).sqrt().fract() == 0.0).collect()"
  ]
}