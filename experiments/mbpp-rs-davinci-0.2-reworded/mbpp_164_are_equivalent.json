{
  "name": "mbpp_164_are_equivalent",
  "language": "rs",
  "prompt": "/// Write a function to determine if the sum of the divisors of two integers are the same.\nfn are_equivalent(num1: isize, num2: isize) -> bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = are_equivalent;\n    assert_eq!(candidate(36, 57), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(23, 47), true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_of_divisors(num1);\n    let sum2 = sum_of_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_of_divisors(num1);\n    let sum2 = sum_of_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = divisors(num1);\n    let divisors2 = divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    sum_divisors(num1) == sum_divisors(num2)",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2"
  ]
}