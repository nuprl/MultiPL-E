{
  "name": "mbpp_786_right_insertion",
  "language": "rs",
  "prompt": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize;\n    while low < high {\n        let mid = (low + high) / 2;\n        if x < a[mid as usize] {\n            high = mid;\n        } else {\n            low = mid + 1;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize - 1;\n    while left <= right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = a.len();\n    while lo < hi {\n        let mid = (lo + hi) / 2;\n        if a[mid] <= x {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    lo as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize - 1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if a[mid as usize] <= x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] > x {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if x < a[mid as usize] {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n    right\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = a.len() as isize;\n    while lo < hi {\n        let mid = lo + (hi - lo) / 2;\n        if a[mid as usize] <= x {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    lo\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize - 1;\n    while left <= right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if x < a[m as usize] {\n            r = m;\n        } else {\n            l = m + 1;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize;\n    while low < high {\n        let mid = (low + high) / 2;\n        if a[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize;\n    while low < high {\n        let mid = (low + high) / 2;\n        if a[mid as usize] <= x {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize - 1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len();\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = a.len() as isize;\n    while lo < hi {\n        let mid = lo + (hi - lo) / 2;\n        if a[mid as usize] <= x {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    lo\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = a.len();\n    while lo < hi {\n        let mid = (lo + hi) / 2;\n        if a[mid] <= x {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    lo as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = l + (r - l) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize - 1;\n    while left <= right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = a.len();\n    while lo < hi {\n        let mid = lo + (hi - lo) / 2;\n        if a[mid] <= x {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    lo as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] > x {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    right\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize - 1;\n    while l <= r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len();\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len();\n    while low < high {\n        let mid = (low + high) / 2;\n        if a[mid] <= x {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize - 1;\n    while left <= right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = a.len();\n    while lo < hi {\n        let mid = lo + (hi - lo) / 2;\n        if a[mid] < x {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    lo as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = a.len() as isize;\n    while lo < hi {\n        let mid = lo + (hi - lo) / 2;\n        if a[mid as usize] <= x {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    lo\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len();\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize;\n    while low < high {\n        let mid = (low + high) / 2;\n        if a[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() - 1;\n    while left <= right {\n        let mid = (left + right) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize - 1;\n    while l <= r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize;\n    while low < high {\n        let mid = (low + high) / 2;\n        if x < a[mid as usize] {\n            high = mid;\n        } else {\n            low = mid + 1;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize - 1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if a[mid as usize] <= x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n    while left < right {\n        let mid = left + (right - left) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len();\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut i = 0;\n    let mut j = a.len() as isize - 1;\n    while i <= j {\n        let m = (i + j) / 2;\n        if a[m as usize] <= x {\n            i = m + 1;\n        } else {\n            j = m - 1;\n        }\n    }\n    i\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize;\n    while low < high {\n        let mid = (low + high) / 2;\n        if x < a[mid as usize] {\n            high = mid;\n        } else {\n            low = mid + 1;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize;\n    while low < high {\n        let mid = (low + high) / 2;\n        if a[mid as usize] <= x {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() - 1;\n    while left <= right {\n        let mid = (left + right) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize;\n    while low < high {\n        let mid = (low + high) / 2;\n        if a[mid as usize] <= x {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n    while left < right {\n        let mid = (left + right) / 2;\n        if x < a[mid] {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n    while left < right {\n        let mid = left + (right - left) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = a.len() as isize;\n    while lo < hi {\n        let mid = lo + (hi - lo) / 2;\n        if a[mid as usize] <= x {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    lo\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len();\n    while low < high {\n        let mid = (low + high) / 2;\n        if a[mid] <= x {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize - 1;\n    while l <= r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = a.len();\n    while lo < hi {\n        let mid = lo + (hi - lo) / 2;\n        if a[mid] <= x {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    lo as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = a.len() as isize;\n    while lo < hi {\n        let mid = (lo + hi) / 2;\n        if a[mid as usize] <= x {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    lo\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize - 1;\n    while left <= right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize;\n    while low < high {\n        let mid = low + (high - low) / 2;\n        if a[mid as usize] > x {\n            high = mid;\n        } else {\n            low = mid + 1;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize - 1;\n    while l <= r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize - 1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if a[mid as usize] <= x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() - 1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if a[mid] <= x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize;\n    while low < high {\n        let mid = (low + high) / 2;\n        if x <= a[mid as usize] {\n            high = mid;\n        } else {\n            low = mid + 1;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize - 1;\n    while l <= r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize - 1;\n    while l <= r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] > x {\n            r = m;\n        } else {\n            l = m + 1;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize;\n    while low < high {\n        let mid = (low + high) / 2;\n        if x < a[mid as usize] {\n            high = mid;\n        } else {\n            low = mid + 1;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() - 1;\n    while left <= right {\n        let mid = (left + right) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = a.len() as isize;\n    while lo < hi {\n        let mid = lo + (hi - lo) / 2;\n        if x < a[mid as usize] {\n            hi = mid;\n        } else {\n            lo = mid + 1;\n        }\n    }\n    lo\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize - 1;\n    while l <= r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize;\n    while low < high {\n        let mid = (low + high) / 2;\n        if a[mid as usize] > x {\n            high = mid;\n        } else {\n            low = mid + 1;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = l + (r - l) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = left + (right - left) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] > x {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len();\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len();\n    while low < high {\n        let mid = (low + high) / 2;\n        if a[mid] <= x {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = a.len() as isize;\n    while lo < hi {\n        let mid = (lo + hi) / 2;\n        if a[mid as usize] <= x {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    lo\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len();\n    while low < high {\n        let mid = (low + high) / 2;\n        if a[mid] <= x {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() - 1;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmpqo4nxmcw.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize;\n    while low < high {\n        let mid = (low + high) / 2;\n        if x < a[mid as usize] {\n            high = mid;\n        } else {\n            low = mid + 1;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize - 1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if a[mid as usize] <= x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize - 1;\n    while l <= r {\n        let m = (l + r) / 2;\n        if a[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize - 1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if a[mid as usize] <= x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize - 1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if a[mid as usize] <= x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = a.len() as isize;\n    while lo < hi {\n        let mid = (lo + hi) / 2;\n        if a[mid as usize] <= x {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    lo\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize - 1;\n    while l <= r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize;\n    while low < high {\n        let mid = (low + high) / 2;\n        if a[mid as usize] <= x {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len();\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize;\n    while low < high {\n        let mid = (low + high) / 2;\n        if x < a[mid as usize] {\n            high = mid;\n        } else {\n            low = mid + 1;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize - 1;\n    while l <= r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize - 1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if a[mid as usize] <= x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = a.len() as isize;\n    while lo < hi {\n        let mid = lo + (hi - lo) / 2;\n        if a[mid as usize] <= x {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    lo\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    right\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() - 1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if a[mid] <= x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    low as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if x < a[mid as usize] {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if x < a[m as usize] {\n            r = m;\n        } else {\n            l = m + 1;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = a.len() as isize;\n    while lo < hi {\n        let mid = lo + (hi - lo) / 2;\n        if a[mid as usize] < x {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    lo\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize - 1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if x < a[mid as usize] {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize - 1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if a[mid as usize] <= x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if x < a[mid as usize] {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize;\n    while low < high {\n        let mid = (low + high) / 2;\n        if a[mid as usize] <= x {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() - 1;\n    while left <= right {\n        let mid = (left + right) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = a.len() as isize;\n    while lo < hi {\n        let mid = lo + (hi - lo) / 2;\n        if a[mid as usize] <= x {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    lo\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() - 1;\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = a.len() as isize;\n    while lo < hi {\n        let mid = lo + (hi - lo) / 2;\n        if a[mid as usize] <= x {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    lo\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize;\n    while low < high {\n        let mid = (low + high) / 2;\n        if a[mid as usize] <= x {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = a.len() as isize;\n    while lo < hi {\n        let mid = lo + (hi - lo) / 2;\n        if a[mid as usize] <= x {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    lo\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize - 1;\n    while left <= right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize;\n    while low < high {\n        let mid = (low + high) / 2;\n        if x <= a[mid as usize] {\n            high = mid;\n        } else {\n            low = mid + 1;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() as isize;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize;\n    while low < high {\n        let mid = (low + high) / 2;\n        if a[mid as usize] <= x {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut lo = 0;\n    let mut hi = a.len() as isize;\n    while lo < hi {\n        let mid = lo + (hi - lo) / 2;\n        if a[mid as usize] <= x {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    lo\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize;\n    while low < high {\n        let mid = low + (high - low) / 2;\n        if x < a[mid as usize] {\n            high = mid;\n        } else {\n            low = mid + 1;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] <= x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len() - 1;\n    while left <= right {\n        let mid = (left + right) / 2;\n        if a[mid] == x {\n            return mid as isize;\n        } else if a[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    left as isize\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if a[m as usize] <= x {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut low = 0;\n    let mut high = a.len() as isize - 1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if a[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut l = 0;\n    let mut r = a.len() as isize;\n    while l < r {\n        let m = (l + r) / 2;\n        if x < a[m as usize] {\n            r = m;\n        } else {\n            l = m + 1;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}