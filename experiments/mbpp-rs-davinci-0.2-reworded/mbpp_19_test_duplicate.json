{
  "name": "mbpp_19_test_duplicate",
  "language": "rs",
  "prompt": "/// Write a function to find whether a given vector of integers contains any duplicate element.\nfn test_duplicate(arraynums: Vec<isize>) -> bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = test_duplicate;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 4]), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2, 3, 3, 4, 4, 5]), true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut nums = arraynums.clone();\n    nums.sort();\n    for i in 0..nums.len() - 1 {\n        if nums[i] == nums[i + 1] {\n            return true;\n        }\n    }\n    false",
    "    let mut arraynums = arraynums;\n    arraynums.sort();\n    for i in 0..arraynums.len() - 1 {\n        if arraynums[i] == arraynums[i + 1] {\n            return true;\n        }\n    }\n    false",
    "    let mut hashmap = HashMap::new();\n    for i in arraynums {\n        let count = hashmap.entry(i).or_insert(0);\n        *count += 1;\n    }\n    for (_, v) in hashmap.iter() {\n        if *v > 1 {\n            return true;\n        }\n    }\n    false",
    "    let mut hashset: HashSet<isize> = HashSet::new();\n    for num in arraynums {\n        if hashset.contains(&num) {\n            return true;\n        }\n        hashset.insert(num);\n    }\n    return false;",
    "    let mut arraynums = arraynums;\n    arraynums.sort();\n    for i in 0..arraynums.len() - 1 {\n        if arraynums[i] == arraynums[i + 1] {\n            return true;\n        }\n    }\n    false",
    "    let mut arraynums = arraynums;\n    arraynums.sort();\n    for i in 0..arraynums.len() - 1 {\n        if arraynums[i] == arraynums[i + 1] {\n            return true;\n        }\n    }\n    false",
    "    let mut arraynums = arraynums;\n    arraynums.sort();\n    for i in 0..arraynums.len() - 1 {\n        if arraynums[i] == arraynums[i + 1] {\n            return true;\n        }\n    }\n    false",
    "    let mut arraynums = arraynums;\n    arraynums.sort();\n    for i in 0..arraynums.len() - 1 {\n        if arraynums[i] == arraynums[i + 1] {\n            return true;\n        }\n    }\n    false",
    "    let mut hashmap = HashMap::new();\n    for i in arraynums {\n        let count = hashmap.entry(i).or_insert(0);\n        *count += 1;\n    }\n    for (_, v) in hashmap {\n        if v > 1 {\n            return true;\n        }\n    }\n    false",
    "    let mut hashmap = HashMap::new();\n    for num in arraynums {\n        let count = hashmap.entry(num).or_insert(0);\n        *count += 1;\n        if *count > 1 {\n            return true;\n        }\n    }\n    false",
    "    let mut arraynums = arraynums;\n    arraynums.sort();\n    for i in 0..arraynums.len() - 1 {\n        if arraynums[i] == arraynums[i + 1] {\n            return true;\n        }\n    }\n    false",
    "    let mut nums = arraynums.clone();\n    nums.sort();\n    for i in 0..nums.len() - 1 {\n        if nums[i] == nums[i + 1] {\n            return true;\n        }\n    }\n    false",
    "    let mut nums = arraynums.clone();\n    nums.sort();\n    for i in 0..nums.len() - 1 {\n        if nums[i] == nums[i + 1] {\n            return true;\n        }\n    }\n    false",
    "    let mut nums = arraynums.clone();\n    nums.sort();\n    for i in 0..nums.len() - 1 {\n        if nums[i] == nums[i + 1] {\n            return true;\n        }\n    }\n    false",
    "    let mut arraynums = arraynums;\n    arraynums.sort();\n    for i in 0..arraynums.len() - 1 {\n        if arraynums[i] == arraynums[i + 1] {\n            return true;\n        }\n    }\n    false",
    "    let mut arraynums = arraynums;\n    arraynums.sort();\n    for i in 0..arraynums.len() - 1 {\n        if arraynums[i] == arraynums[i + 1] {\n            return true;\n        }\n    }\n    false",
    "    let mut hashmap = HashMap::new();\n    for i in arraynums {\n        let count = hashmap.entry(i).or_insert(0);\n        *count += 1;\n        if *count > 1 {\n            return true;\n        }\n    }\n    false",
    "    let mut hashmap = HashMap::new();\n    for i in arraynums {\n        let count = hashmap.entry(i).or_insert(0);\n        *count += 1;\n    }\n    for (_, v) in hashmap {\n        if v > 1 {\n            return true;\n        }\n    }\n    false",
    "    let mut hashmap = HashMap::new();\n    for i in arraynums {\n        let count = hashmap.entry(i).or_insert(0);\n        *count += 1;\n    }\n    for (_, v) in hashmap {\n        if v > 1 {\n            return true;\n        }\n    }\n    false",
    "    let mut nums = arraynums.clone();\n    nums.sort();\n    for i in 0..nums.len() - 1 {\n        if nums[i] == nums[i + 1] {\n            return true;\n        }\n    }\n    false"
  ]
}