{
  "name": "mbpp_138_is_Sum_Of_Powers_Of_Two",
  "language": "rs",
  "prompt": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            sum += 1;\n        }\n        n >>= 1;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpu3a_t14y.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= n & (-n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp4vbk_eic.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpysm_f_e6.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        let mut i = 1;\n        while i <= n {\n            i *= 2;\n        }\n        i /= 2;\n        n -= i;\n        sum += i;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpnha88cwh.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n != 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n = n - (n & -n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp6rp2n4vq.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp6ocl0gnm.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        sum += n & 1;\n        n >>= 1;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpltk6zt3f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp97gu3ch5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        let rem = n % 2;\n        n = n / 2;\n        sum += rem;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpz9hpl985.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        sum += n & 1;\n        n >>= 1;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpltk6zt3f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n = n - (n & (-n));\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpm0vpno57.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n != 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n = n - (n & -n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp6rp2n4vq.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut sum = 0;\n    while num > 0 {\n        sum += num & 1;\n        num >>= 1;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_4c6_duv.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpysm_f_e6.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n != 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= n & -n;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpdt47sipx.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n != 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= n & (-n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpzfgrajwu.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n = n - (n & -n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp3opxq4uq.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    if n == 0 {\n        return false;\n    }\n    let mut n = n;\n    while n != 1 {\n        if n % 2 != 0 {\n            return false;\n        }\n        n /= 2;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpb5i8vs9r.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp6ocl0gnm.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n != 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= n & -n;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpdt47sipx.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut x = n;\n    while x > 0 {\n        if x & (x - 1) == 0 {\n            return true;\n        }\n        x = x - (x & -x);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpapwhmtri.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpysm_f_e6.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        let rem = n % 2;\n        sum += rem;\n        n /= 2;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpxgxjtrjv.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut count = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            count += 1;\n        }\n        n = n >> 1;\n    }\n    return count == 1;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpkkko34e3.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp6ocl0gnm.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpysm_f_e6.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp97gu3ch5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut count = 0;\n    while n > 0 {\n        n = n & (n - 1);\n        count += 1;\n    }\n    return count == 1;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpi45skiix.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n = n - (n & (-n));\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpqpjhgvtv.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut count = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            count += 1;\n        }\n        n = n >> 1;\n    }\n    return count == 1;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpkkko34e3.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp97gu3ch5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            n -= 1 << i;\n        }\n        i += 1;\n    }\n    n == 0\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n = n - (n & -n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp3opxq4uq.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n = n - (n & -n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp3opxq4uq.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        sum += n & 1;\n        n >>= 1;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpltk6zt3f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        sum += n & 1;\n        n >>= 1;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpltk6zt3f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n != 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= n & (-n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpzfgrajwu.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num != 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= num & (-num);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpgfhwan4b.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    if n == 0 {\n        return false;\n    }\n    let mut n = n;\n    while n != 1 {\n        if n % 2 != 0 {\n            return false;\n        }\n        n /= 2;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp1o5mr_pj.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num = num - (num & -num);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp7993rrw5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n = n - (n & -n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp3opxq4uq.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut sum = 0;\n    while num > 0 {\n        sum += num & 1;\n        num = num >> 1;\n    }\n    return sum == 1;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpqu5y67hh.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    if n == 0 {\n        return false;\n    }\n    let mut n = n;\n    while n != 1 {\n        if n % 2 != 0 {\n            return false;\n        }\n        n = n / 2;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpav50pt59.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n = n - (n & -n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp3opxq4uq.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp6ocl0gnm.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    if n == 0 {\n        return false;\n    }\n    while n != 1 {\n        if n % 2 != 0 {\n            return false;\n        }\n        n /= 2;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp6e_qcc18.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= num & -num;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp947q9jjg.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= n & -n;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpfqc3ohb6.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut sum = 0;\n    while num > 0 {\n        sum += num & 1;\n        num = num >> 1;\n    }\n    return sum == 1;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpqu5y67hh.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n % 2 == 1 {\n            n -= 1 << i;\n        }\n        i += 1;\n    }\n    n == 0\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp6ocl0gnm.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        sum += n & 1;\n        n >>= 1;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpltk6zt3f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n = n - (n & -n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp3opxq4uq.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut sum = 0;\n    while num > 0 {\n        let rem = num % 2;\n        if rem == 1 {\n            sum += 1;\n        }\n        num /= 2;\n    }\n    if sum == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpnv9seq0p.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut sum = 0;\n    while num > 0 {\n        let rem = num % 2;\n        num = num / 2;\n        sum += rem;\n    }\n    return sum == 1;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmplnwgngxf.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n == 1 {\n            return true;\n        }\n        n = n - (n & (-n));\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpw2os_yqc.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n = n - (n & -n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp3opxq4uq.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    if n == 0 {\n        return false;\n    }\n    let mut n = n;\n    while n != 1 {\n        if n % 2 != 0 {\n            return false;\n        }\n        n /= 2;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpb5i8vs9r.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= num & -num;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp947q9jjg.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        let rem = n % 2;\n        if rem == 1 {\n            sum += 1;\n        }\n        n /= 2;\n    }\n    if sum == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpb10m3dy4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            n = n - (1 << i);\n        }\n        i += 1;\n    }\n    n == 0\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp97gu3ch5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n = n - (n & -n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp3opxq4uq.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp6ocl0gnm.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut sum = 0;\n    while num > 0 {\n        sum += num & 1;\n        num = num >> 1;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_lqpmdzf.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        sum += (n & 1) * (n & 1);\n        n = n >> 1;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmphr1a9kp2.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n & (n - 1) != 0 {\n                return false;\n            }\n            n -= 1;\n        }\n        n >>= 1;\n        i += 1;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp6nbrp_w6.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n = n - (n & -n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp3opxq4uq.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    if n == 0 {\n        return false;\n    }\n    let mut n = n;\n    while n > 0 {\n        if n & 1 == 1 {\n            n = n - 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    return n == 0;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpbbwwot81.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp6ocl0gnm.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        sum += n & 1;\n        n >>= 1;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpltk6zt3f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 1 {\n        if n % 2 == 0 {\n            n /= 2;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpa28fh84p.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut sum = 0;\n    while num > 0 {\n        sum += num & 1;\n        num = num >> 1;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_lqpmdzf.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            n -= 1 << i;\n        }\n        i += 1;\n    }\n    n == 0\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp6ocl0gnm.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n & (n - 1) != 0 {\n                return false;\n            }\n            n -= 1 << i;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut sum = 0;\n    while num > 0 {\n        let rem = num % 2;\n        num = num / 2;\n        sum += rem;\n    }\n    if sum == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpoxf5b0a1.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n == 1 {\n            return true;\n        }\n        n = n - (n & -n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpuhrjtxt1.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp6ocl0gnm.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        sum += n & 1;\n        n = n >> 1;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpm94n9d_e.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp6ocl0gnm.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp6ocl0gnm.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n != 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= (n & -n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp3stm3f8x.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpysm_f_e6.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        sum += (n & 1);\n        n = n >> 1;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpnixqqz4m.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut count = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            count += 1;\n        }\n        n = n >> 1;\n    }\n    return count == 1;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpkkko34e3.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        let rem = n % 2;\n        if rem == 1 {\n            sum += 1;\n        }\n        n /= 2;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmppe1sc86h.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        let rem = n % 2;\n        sum += rem;\n        n = n / 2;\n    }\n    if sum == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpdycg0nmd.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num != 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= (num & -num);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp4w9pkrle.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if (n & (n - 1)) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp3cc_vl4u.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        sum += n & 1;\n        n >>= 1;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpltk6zt3f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp6ocl0gnm.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp6ocl0gnm.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n == 1 {\n            return true;\n        }\n        n = n - (n & -n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpuhrjtxt1.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n & (n - 1) != 0 {\n                return false;\n            }\n            n -= 1;\n        }\n        n >>= 1;\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpe5uztava.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut sum = 0;\n    while num > 0 {\n        sum += num & 1;\n        num = num >> 1;\n    }\n    return sum == 1;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpqu5y67hh.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n != 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpt9v5sdka.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n & (n - 1) != 0 {\n                return false;\n            }\n            n = n - (1 << i);\n        }\n        i += 1;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n == 1 {\n                return true;\n            }\n            n -= 1 << i;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp6ocl0gnm.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n = n - (n & -n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp3opxq4uq.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n & (n - 1) == 0 {\n                return true;\n            }\n            n -= 1 << i;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= n & (-n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp4vbk_eic.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n != 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpt9v5sdka.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    if n == 0 {\n        return false;\n    }\n    let mut n = n;\n    while n != 1 {\n        if n % 2 != 0 {\n            return false;\n        }\n        n = n / 2;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpav50pt59.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut sum = 0;\n    while num > 0 {\n        sum += num & 1;\n        num = num >> 1;\n    }\n    return sum == 1;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpqu5y67hh.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n = n - (n & -n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp3opxq4uq.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n = n - (n & -n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp3opxq4uq.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & 1 == 1 {\n            n = n - 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    return n == 0;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp9bcgix5_.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n != 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpt9v5sdka.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        let rem = n % 2;\n        n = n / 2;\n        sum += rem;\n    }\n    if sum == 1 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpfvyoln89.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n % 2 == 1 {\n            n -= 2_isize.pow(i);\n        }\n        i += 1;\n    }\n    n == 0\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut count = 0;\n    while n > 0 {\n        count += 1;\n        n = n & (n - 1);\n    }\n    return count == 1;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpb6gd1vzk.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp6ocl0gnm.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp6ocl0gnm.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n = n - (n & -n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp3opxq4uq.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut i = 0;\n    while num > 0 {\n        if num & 1 == 1 {\n            if num == 1 {\n                return true;\n            }\n            num = num - (1 << i);\n        }\n        i += 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut sum = 0;\n    while num > 0 {\n        sum += num & 1;\n        num = num >> 1;\n    }\n    return sum == 1;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpqu5y67hh.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n == 1 {\n                return true;\n            }\n            n -= 1 << i;\n        }\n        i += 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut count = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            count += 1;\n        }\n        n >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpdfxjakak.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n != 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= n & (-n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpzfgrajwu.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_s4aj2bo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}