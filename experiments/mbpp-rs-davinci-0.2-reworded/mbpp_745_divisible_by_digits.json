{
  "name": "mbpp_745_divisible_by_digits",
  "language": "rs",
  "prompt": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result",
    "    (startnum..endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()",
    "    (startnum..endnum)\n        .filter(|x| {\n            x.to_string()\n                .chars()\n                .all(|c| x % c.to_digit(10).unwrap() as isize == 0)\n        })\n        .collect()",
    "    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut is_divisible = true;\n        for j in i.to_string().chars() {\n            if j == '0' {\n                is_divisible = false;\n                break;\n            }\n            if i % (j.to_digit(10).unwrap() as isize) != 0 {\n                is_divisible = false;\n                break;\n            }\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result",
    "    (startnum..=endnum)\n        .filter(|&x| {\n            let mut x = x;\n            while x > 0 {\n                let digit = x % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                x /= 10;\n            }\n            true\n        })\n        .collect()",
    "    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<char> = i.to_string().chars().collect();\n        let mut divisible = true;\n        for digit in digits {\n            if i % digit.to_digit(10).unwrap() as isize != 0 {\n                divisible = false;\n                break;\n            }\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result",
    "    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()",
    "    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut is_divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result",
    "    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| d != 0 && x % d == 0)\n        })\n        .collect()",
    "    (startnum..endnum)\n        .filter(|&x| {\n            let mut digits = x.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()",
    "    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut divisible = true;\n        for c in i.to_string().chars() {\n            if i % c.to_digit(10).unwrap() as isize != 0 {\n                divisible = false;\n                break;\n            }\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    for num in startnum..endnum {\n        let mut digits = Vec::new();\n        let mut num_copy = num;\n        while num_copy > 0 {\n            digits.push(num_copy % 10);\n            num_copy /= 10;\n        }\n        if digits.iter().all(|d| num % d == 0) {\n            result.push(num);\n        }\n    }\n    result",
    "    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()",
    "    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut is_divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<isize> = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n        if digits.iter().all(|d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let mut is_divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if i % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result",
    "    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()",
    "    (startnum..=endnum)\n        .filter(|&x| {\n            let mut digits = x;\n            while digits > 0 {\n                let digit = digits % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                digits /= 10;\n            }\n            true\n        })\n        .collect()",
    "    (startnum..endnum+1)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()",
    "    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()"
  ]
}